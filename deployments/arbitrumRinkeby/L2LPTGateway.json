{
  "address": "0x7e0ba3791B23D0D577Cf8D09C4FDd5821222208C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2LPTDataCache",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "TxToL1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_l2ToL1Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exitNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "calculateL2TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterpartGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "finalizeInboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getOutboundCalldata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "outboundCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Counterpart",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2LPTDataCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Counterpart",
          "type": "address"
        }
      ],
      "name": "setCounterpart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcaa2c64eafb0bb9b7d5e424e81b403fc65a2148490f5572d7ebd49d65aa7f7e7",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0x7e0ba3791B23D0D577Cf8D09C4FDd5821222208C",
    "transactionIndex": 0,
    "gasUsed": "36094402",
    "logsBloom": "0x00000004000000000800000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000020000400000000000000800000000000000000000000000000000000000000400000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000020010000000000000008000000000000000000000000100000000000020000000800000000000400000000000000400000000000000000000000000000000",
    "blockHash": "0xa7a63f3ad1545ba6081e667c2a1cbc7553bf627cbb19ac778394b9f18fce1fdf",
    "transactionHash": "0xcaa2c64eafb0bb9b7d5e424e81b403fc65a2148490f5572d7ebd49d65aa7f7e7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9124440,
        "transactionHash": "0xcaa2c64eafb0bb9b7d5e424e81b403fc65a2148490f5572d7ebd49d65aa7f7e7",
        "address": "0x7e0ba3791B23D0D577Cf8D09C4FDd5821222208C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa7a63f3ad1545ba6081e667c2a1cbc7553bf627cbb19ac778394b9f18fce1fdf"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9124440,
        "transactionHash": "0xcaa2c64eafb0bb9b7d5e424e81b403fc65a2148490f5572d7ebd49d65aa7f7e7",
        "address": "0x7e0ba3791B23D0D577Cf8D09C4FDd5821222208C",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa7a63f3ad1545ba6081e667c2a1cbc7553bf627cbb19ac778394b9f18fce1fdf"
      }
    ],
    "blockNumber": 9124440,
    "cumulativeGasUsed": "16412841",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9413AD42910c1eA60c737dB5f58d1C504498a3cD",
    "0xEf5F154eb0261CB0331a28BC0fB60CA73E716617",
    "0x743b8469e5f54cD765F1954604cD4dfA67b64bF6",
    "0xd348394B6Fa2F698eC6A26352390663047735388"
  ],
  "solcInputHash": "df3a98f241f4ed0415b91bfeefbc7463",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2LPTDataCache\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_l2ToL1Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2LPTDataCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Counterpart\",\"type\":\"address\"}],\"name\":\"setCounterpart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the contract can be paused by the governor which will prevent any outbound transfers but pausing the contract does not affect inbound transfers (tokens coming from L1)\",\"kind\":\"dev\",\"methods\":{\"finalizeInboundTransfer(address,address,address,uint256,bytes)\":{\"details\":\"can only accept txs coming directly from L1 LPT Gateway data param is unused because no additional data is allowed from L1\",\"params\":{\"_amount\":\"Amount of tokens transferred\",\"_from\":\"Address of the sender on L1\",\"_l1Token\":\"L1 Address of LPT\",\"_to\":\"Recepient address on L2\"}},\"getOutboundCalldata(address,address,address,uint256,bytes)\":{\"details\":\"encodes the target function with its params which will be called on L1 when the message is received on L1\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"outboundTransfer(address,address,uint256,bytes)\":{\"details\":\"no additional callhook data is allowed\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_data\":\"Contains sender and additional data to send to L1\",\"_l1Token\":\"L1 Address of LPT\",\"_to\":\"Recipient address on L1\"},\"returns\":{\"_0\":\"ID of the withdraw tx\"}},\"outboundTransfer(address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"no additional callhook data is allowed\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_data\":\"Contains sender and additional data to send to L1\",\"_l1Token\":\"L1 Address of LPT\",\"_to\":\"Recipient address on L1\"},\"returns\":{\"res\":\"ID of the withdraw tx\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setCounterpart(address)\":{\"details\":\"Only address with the governor role is allowed to change the value of l1Counterpart\",\"params\":{\"_l1Counterpart\":\"L1 Address of the counterpart\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"L1LPTGateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateL2TokenAddress(address)\":{\"notice\":\"returns address of L2 version of LPT\"},\"counterpartGateway()\":{\"notice\":\"returns address of L1 LPT Gateway\"},\"finalizeInboundTransfer(address,address,address,uint256,bytes)\":{\"notice\":\"Receives token amount from L1 and mints the equivalent tokens to the receiving address\"},\"getOutboundCalldata(address,address,address,uint256,bytes)\":{\"notice\":\"Creates calldata required to send tx to L1\"},\"outboundTransfer(address,address,uint256,bytes)\":{\"notice\":\"Burns L2 tokens and sends a message to L1 The tokens will be received on L1 only after the wait period (7 days) is over\"},\"outboundTransfer(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Burns L2 tokens and sends a message to L1 The tokens will be received on L1 only after the wait period (7 days) is over\"},\"setCounterpart(address)\":{\"notice\":\"Sets address of companion L1LPTGateway\"}},\"notice\":\"Manages inbound and outbound transfers of LPT between Arbitrum Rollup and L1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/gateway/L2LPTGateway.sol\":\"L2LPTGateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ControlledGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title ControlledGateway\\n * @notice Base Contract for both L1 and L2 LPT gateways. Provides AccessControl.\\n * Gateways can be paused by the governor to stop outgoing token migrations\\n */\\ncontract ControlledGateway is AccessControl, Pausable {\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\n    address public immutable l1Lpt;\\n    address public immutable l2Lpt;\\n\\n    constructor(address _l1Lpt, address _l2Lpt) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        l1Lpt = _l1Lpt;\\n        l2Lpt = _l2Lpt;\\n    }\\n\\n    function pause() external onlyRole(GOVERNOR_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(GOVERNOR_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x70cb86fdae16705471113f5df3e05ae40a64f56a07deea1cee2c5bc25bd3549a\",\"license\":\"MIT\"},\"contracts/L1/gateway/IL1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL1LPTGateway {\\n    event DepositInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _sequenceNumber,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalFinalized(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf3c4fceb1627089f5a91e3187c815fdf363cae07ff43ddf89d9ff6b016f9f59c\",\"license\":\"MIT\"},\"contracts/L2/gateway/IL2LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL2LPTGateway {\\n    event DepositFinalized(\\n        address indexed _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _l2ToL1Id,\\n        uint256 _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address _l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9d0a018f6179245cda5c578c5becb21121a71b710528fef1e6e53f3fa8f69d1c\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IArbSys} from \\\"../../arbitrum/IArbSys.sol\\\";\\n\\nabstract contract L2ArbitrumMessenger {\\n    event TxToL1(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _id,\\n        bytes _data\\n    );\\n\\n    function sendTxToL1(\\n        address user,\\n        address to,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        // note: this method doesn't support sending ether to L1 together with a call\\n        uint256 id = IArbSys(address(100)).sendTxToL1(to, data);\\n        emit TxToL1(user, to, id, data);\\n        return id;\\n    }\\n\\n    modifier onlyL1Counterpart(address l1Counterpart) {\\n        require(\\n            msg.sender == applyL1ToL2Alias(l1Counterpart),\\n            \\\"ONLY_COUNTERPART_GATEWAY\\\"\\n        );\\n        _;\\n    }\\n\\n    uint160 internal constant OFFSET =\\n        uint160(0x1111000000000000000000000000000000001111);\\n\\n    // l1 addresses are transformed durng l1->l2 calls\\n    function applyL1ToL2Alias(address l1Address)\\n        internal\\n        pure\\n        returns (address l2Address)\\n    {\\n        l2Address = address(uint160(l1Address) + OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x03edd83d95772f14bba5da9c2726caece1b06b15f0106bd58a929e4cbdcee5a1\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ControlledGateway} from \\\"../../ControlledGateway.sol\\\";\\nimport {L2ArbitrumMessenger} from \\\"./L2ArbitrumMessenger.sol\\\";\\nimport {IL2LPTGateway} from \\\"./IL2LPTGateway.sol\\\";\\nimport {IL1LPTGateway} from \\\"../../L1/gateway/IL1LPTGateway.sol\\\";\\n\\ninterface Mintable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burnFrom(address _from, uint256 _amount) external;\\n}\\n\\ninterface IL2LPTDataCache {\\n    function increaseL2SupplyFromL1(uint256 _amount) external;\\n\\n    function decreaseL2SupplyFromL1(uint256 _amount) external;\\n}\\n\\n/**\\n * @title L1LPTGateway\\n * @notice Manages inbound and outbound transfers of LPT between Arbitrum Rollup and L1\\n * @dev the contract can be paused by the governor which will prevent any outbound transfers\\n * but pausing the contract does not affect inbound transfers (tokens coming from L1)\\n */\\ncontract L2LPTGateway is IL2LPTGateway, ControlledGateway, L2ArbitrumMessenger {\\n    address public immutable l2Router;\\n    address public immutable l2LPTDataCache;\\n\\n    address public l1Counterpart;\\n\\n    constructor(\\n        address _l2Router,\\n        address _l1Lpt,\\n        address _l2Lpt,\\n        address _l2LPTDataCache\\n    ) ControlledGateway(_l1Lpt, _l2Lpt) {\\n        l2Router = _l2Router;\\n        l2LPTDataCache = _l2LPTDataCache;\\n    }\\n\\n    /**\\n     * @notice Sets address of companion L1LPTGateway\\n     * @dev Only address with the governor role is allowed to change the value of l1Counterpart\\n     * @param _l1Counterpart L1 Address of the counterpart\\n     */\\n    function setCounterpart(address _l1Counterpart)\\n        external\\n        onlyRole(GOVERNOR_ROLE)\\n    {\\n        l1Counterpart = _l1Counterpart;\\n    }\\n\\n    /**\\n     * @notice Burns L2 tokens and sends a message to L1\\n     * The tokens will be received on L1 only after the wait period (7 days) is over\\n     * @dev no additional callhook data is allowed\\n     * @param _l1Token L1 Address of LPT\\n     * @param _to Recipient address on L1\\n     * @param _amount Amount of tokens to burn\\n     * @param _data Contains sender and additional data to send to L1\\n     * @return ID of the withdraw tx\\n     */\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external override returns (bytes memory) {\\n        return outboundTransfer(_l1Token, _to, _amount, 0, 0, _data);\\n    }\\n\\n    /**\\n     * @notice Burns L2 tokens and sends a message to L1\\n     * The tokens will be received on L1 only after the wait period (7 days) is over\\n     * @dev no additional callhook data is allowed\\n     * @param _l1Token L1 Address of LPT\\n     * @param _to Recipient address on L1\\n     * @param _amount Amount of tokens to burn\\n     * @param _data Contains sender and additional data to send to L1\\n     * @return res ID of the withdraw tx\\n     */\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256, // maxGas\\n        uint256, // gasPriceBid\\n        bytes calldata _data\\n    ) public whenNotPaused returns (bytes memory res) {\\n        require(_l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n\\n        (address from, bytes memory extraData) = parseOutboundData(_data);\\n        require(extraData.length == 0, \\\"CALL_HOOK_DATA_NOT_ALLOWED\\\");\\n\\n        // from needs to approve this contract to burn the amount first\\n        Mintable(l2Lpt).burnFrom(from, _amount);\\n        IL2LPTDataCache(l2LPTDataCache).decreaseL2SupplyFromL1(_amount);\\n\\n        uint256 id = sendTxToL1(\\n            from,\\n            l1Counterpart,\\n            getOutboundCalldata(_l1Token, from, _to, _amount, extraData)\\n        );\\n\\n        // we don't need to track exitNums (b/c we have no fast exits) so we always use 0\\n        emit WithdrawalInitiated(_l1Token, from, _to, id, 0, _amount);\\n\\n        return abi.encode(id);\\n    }\\n\\n    /**\\n     * @notice Receives token amount from L1 and mints the equivalent tokens to the receiving address\\n     * @dev can only accept txs coming directly from L1 LPT Gateway\\n     * data param is unused because no additional data is allowed from L1\\n     * @param _l1Token L1 Address of LPT\\n     * @param _from Address of the sender on L1\\n     * @param _to Recepient address on L2\\n     * @param _amount Amount of tokens transferred\\n     */\\n    function finalizeInboundTransfer(\\n        address _l1Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata // data -- unused\\n    ) external override onlyL1Counterpart(l1Counterpart) {\\n        require(_l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n\\n        Mintable(l2Lpt).mint(_to, _amount);\\n        IL2LPTDataCache(l2LPTDataCache).increaseL2SupplyFromL1(_amount);\\n\\n        emit DepositFinalized(_l1Token, _from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Decodes calldata required for migration of tokens\\n     * @dev extraData can be left empty\\n     * @param data Encoded callhook data\\n     * @return from Sender of the tx\\n     * @return extraData Any other data sent to L1\\n     */\\n    function parseOutboundData(bytes memory data)\\n        internal\\n        view\\n        returns (address from, bytes memory extraData)\\n    {\\n        if (msg.sender == l2Router) {\\n            (from, extraData) = abi.decode(data, (address, bytes));\\n        } else {\\n            from = msg.sender;\\n            extraData = data;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns address of L1 LPT Gateway\\n     */\\n    function counterpartGateway() external view override returns (address) {\\n        return l1Counterpart;\\n    }\\n\\n    /**\\n     * @notice returns address of L2 version of LPT\\n     */\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (l1Token != l1Lpt) {\\n            return address(0);\\n        }\\n\\n        return l2Lpt;\\n    }\\n\\n    /**\\n     * @notice Creates calldata required to send tx to L1\\n     * @dev encodes the target function with its params which\\n     * will be called on L1 when the message is received on L1\\n     */\\n    function getOutboundCalldata(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data\\n    ) public pure returns (bytes memory outboundCalldata) {\\n        outboundCalldata = abi.encodeWithSelector(\\n            IL1LPTGateway.finalizeInboundTransfer.selector,\\n            token,\\n            from,\\n            to,\\n            amount,\\n            abi.encode(0, data) // we don't need to track exitNums (b/c we have no fast exits) so we always use 0\\n        );\\n\\n        return outboundCalldata;\\n    }\\n}\\n\",\"keccak256\":\"0xbad473eca68d7ae48bbaa761cf7a27043549a8385df20b3d3b50388c54f827b7\",\"license\":\"MIT\"},\"contracts/arbitrum/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint256);\\n\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n}\\n\",\"keccak256\":\"0x3d6319dff311534eee9cd66e2a577a3fa1ab34f9c7c5996bc4a3ecdd9101ebfb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002d1e38038062002d1e8339818101604052810190620000389190620003a8565b82826000600160006101000a81548160ff021916908315150217905550620000796000801b6200006d6200019660201b60201c565b6200019e60201b60201c565b620000ae7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556000801b620001b460201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050505062000462565b600033905090565b620001b082826200021760201b60201c565b5050565b6000620001c7836200030860201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6200022982826200032760201b60201c565b6200030457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002a96200019660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000838152602001908152602001600020600101549050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081519050620003a28162000448565b92915050565b60008060008060808587031215620003bf57600080fd5b6000620003cf8782880162000391565b9450506020620003e28782880162000391565b9350506040620003f58782880162000391565b9250506060620004088782880162000391565b91505092959194509250565b6000620004218262000428565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004538162000414565b81146200045f57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c612837620004e7600039600081816106e901528181610dfb0152610f850152600081816108e201526113ea01526000818161065c01528181610a5701528181610b8d0152610d6e0152600081816104cc015281816105ce01528181610b310152610c4801526128376000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637b3a3c8b116100c3578063a7e28d481161007c578063a7e28d481461037a578063c4c0087c146103aa578063ccc57490146103c8578063d2ce7d65146103e6578063d547741f14610416578063e83d1f17146104325761014d565b80637b3a3c8b146102a45780638456cb59146102d457806391d14854146102de5780639d79bdb51461030e578063a0c76a961461032c578063a217fddf1461035c5761014d565b80632f2ff15d116101155780632f2ff15d1461020a57806336568abe146102265780633f4ba83a146102425780634adc698a1461024c5780635c975abb1461026a57806377061e4d146102885761014d565b806301ffc9a7146101525780630725667714610182578063248a9ca3146101a05780632db09c1c146101d05780632e567b36146101ee575b600080fd5b61016c60048036038101906101679190611d29565b610450565b60405161017991906120f2565b60405180910390f35b61018a6104ca565b6040516101979190611fed565b60405180910390f35b6101ba60048036038101906101b59190611cc4565b6104ee565b6040516101c7919061210d565b60405180910390f35b6101d861050d565b6040516101e59190611fed565b60405180910390f35b61020860048036038101906102039190611a7c565b610535565b005b610224600480360381019061021f9190611ced565b6107f7565b005b610240600480360381019061023b9190611ced565b610820565b005b61024a6108a3565b005b6102546108e0565b6040516102619190611fed565b60405180910390f35b610272610904565b60405161027f91906120f2565b60405180910390f35b6102a2600480360381019061029d91906119ff565b61091b565b005b6102be60048036038101906102b99190611b9d565b610991565b6040516102cb9190612128565b60405180910390f35b6102dc6109ae565b005b6102f860048036038101906102f39190611ced565b6109eb565b60405161030591906120f2565b60405180910390f35b610316610a55565b6040516103239190611fed565b60405180910390f35b61034660048036038101906103419190611b0e565b610a79565b6040516103539190612128565b60405180910390f35b610364610b26565b604051610371919061210d565b60405180910390f35b610394600480360381019061038f91906119ff565b610b2d565b6040516103a19190611fed565b60405180910390f35b6103b2610bb4565b6040516103bf9190611fed565b60405180910390f35b6103d0610bd8565b6040516103dd919061210d565b60405180910390f35b61040060048036038101906103fb9190611c1d565b610bfc565b60405161040d9190612128565b60405180910390f35b610430600480360381019061042b9190611ced565b610f5a565b005b61043a610f83565b6040516104479190611fed565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104c357506104c282610fa7565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661055f81611011565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c39061223c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461065a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610651906121dc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1986866040518363ffffffff1660e01b81526004016106b59291906120c9565b600060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e879a2aa856040518263ffffffff1660e01b8152600401610740919061227c565b600060405180830381600087803b15801561075a57600080fd5b505af115801561076e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2876040516107e6919061227c565b60405180910390a450505050505050565b610800826104ee565b6108118161080c61103a565b611042565b61081b83836110df565b505050565b61082861103a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c9061225c565b60405180910390fd5b61089f82826111bf565b5050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108d5816108d061103a565b611042565b6108dd6112a0565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561094d8161094861103a565b611042565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60606109a38686866000808888610bfc565b905095945050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556109e0816109db61103a565b611042565b6109e8611342565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060632e567b3660e01b86868686600087604051602001610a9b92919061214a565b604051602081830303815290604052604051602401610abe959493929190612008565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b8b5760009050610baf565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6060610c06610904565b15610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d906121fc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb906121dc565b60405180910390fd5b600080610d2485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506113e4565b915091506000815114610d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d639061221c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc6790838a6040518363ffffffff1660e01b8152600401610dc79291906120c9565b600060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a6402a7f896040518263ffffffff1660e01b8152600401610e52919061227c565b600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050506000610ebd8360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610eb88e878f8f89610a79565b611469565b9050808a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d738e60008e604051610f2293929190612092565b60405180910390a480604051602001610f3b919061227c565b6040516020818303038152906040529350505050979650505050505050565b610f63826104ee565b610f7481610f6f61103a565b611042565b610f7e83836111bf565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000731111000000000000000000000000000000001111826110339190612330565b9050919050565b600033905090565b61104c82826109eb565b6110db576110718173ffffffffffffffffffffffffffffffffffffffff16601461156d565b61107f8360001c602061156d565b604051602001611090929190611fb3565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d2919061217a565b60405180910390fd5b5050565b6110e982826109eb565b6111bb57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061116061103a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6111c982826109eb565b1561129c57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061124161103a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6112a8610904565b6112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de906121bc565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61132b61103a565b6040516113389190611fed565b60405180910390a1565b61134a610904565b1561138a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611381906121fc565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113cd61103a565b6040516113da9190611fed565b60405180910390a1565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561145d57828060200190518101906114509190611a28565b8092508193505050611464565b3391508290505b915091565b600080606473ffffffffffffffffffffffffffffffffffffffff1663928c169a85856040518363ffffffff1660e01b81526004016114a8929190612062565b602060405180830381600087803b1580156114c257600080fd5b505af11580156114d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fa9190611d52565b9050808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a688660405161155a9190612128565b60405180910390a4809150509392505050565b60606000600283600261158091906123d0565b61158a919061237a565b67ffffffffffffffff8111156115c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115fb5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611659577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106116e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261172391906123d0565b61172d919061237a565b90505b6001811115611819577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611795577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106117d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806118129061252d565b9050611730565b506000841461185d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118549061219c565b60405180910390fd5b8091505092915050565b600061187a611875846122bc565b612297565b90508281526020810184848401111561189257600080fd5b61189d8482856124eb565b509392505050565b60006118b86118b3846122bc565b612297565b9050828152602081018484840111156118d057600080fd5b6118db8482856124fa565b509392505050565b6000813590506118f28161278e565b92915050565b600081519050611907816127a5565b92915050565b60008135905061191c816127bc565b92915050565b600081359050611931816127d3565b92915050565b60008083601f84011261194957600080fd5b8235905067ffffffffffffffff81111561196257600080fd5b60208301915083600182028301111561197a57600080fd5b9250929050565b600082601f83011261199257600080fd5b81356119a2848260208601611867565b91505092915050565b600082601f8301126119bc57600080fd5b81516119cc8482602086016118a5565b91505092915050565b6000813590506119e4816127ea565b92915050565b6000815190506119f9816127ea565b92915050565b600060208284031215611a1157600080fd5b6000611a1f848285016118e3565b91505092915050565b60008060408385031215611a3b57600080fd5b6000611a49858286016118f8565b925050602083015167ffffffffffffffff811115611a6657600080fd5b611a72858286016119ab565b9150509250929050565b60008060008060008060a08789031215611a9557600080fd5b6000611aa389828a016118e3565b9650506020611ab489828a016118e3565b9550506040611ac589828a016118e3565b9450506060611ad689828a016119d5565b935050608087013567ffffffffffffffff811115611af357600080fd5b611aff89828a01611937565b92509250509295509295509295565b600080600080600060a08688031215611b2657600080fd5b6000611b34888289016118e3565b9550506020611b45888289016118e3565b9450506040611b56888289016118e3565b9350506060611b67888289016119d5565b925050608086013567ffffffffffffffff811115611b8457600080fd5b611b9088828901611981565b9150509295509295909350565b600080600080600060808688031215611bb557600080fd5b6000611bc3888289016118e3565b9550506020611bd4888289016118e3565b9450506040611be5888289016119d5565b935050606086013567ffffffffffffffff811115611c0257600080fd5b611c0e88828901611937565b92509250509295509295909350565b600080600080600080600060c0888a031215611c3857600080fd5b6000611c468a828b016118e3565b9750506020611c578a828b016118e3565b9650506040611c688a828b016119d5565b9550506060611c798a828b016119d5565b9450506080611c8a8a828b016119d5565b93505060a088013567ffffffffffffffff811115611ca757600080fd5b611cb38a828b01611937565b925092505092959891949750929550565b600060208284031215611cd657600080fd5b6000611ce48482850161190d565b91505092915050565b60008060408385031215611d0057600080fd5b6000611d0e8582860161190d565b9250506020611d1f858286016118e3565b9150509250929050565b600060208284031215611d3b57600080fd5b6000611d4984828501611922565b91505092915050565b600060208284031215611d6457600080fd5b6000611d72848285016119ea565b91505092915050565b611d848161242a565b82525050565b611d938161244e565b82525050565b611da28161245a565b82525050565b6000611db3826122ed565b611dbd8185612303565b9350611dcd8185602086016124fa565b611dd6816125e6565b840191505092915050565b611dea816124c7565b82525050565b611df9816124d9565b82525050565b6000611e0a826122f8565b611e148185612314565b9350611e248185602086016124fa565b611e2d816125e6565b840191505092915050565b6000611e43826122f8565b611e4d8185612325565b9350611e5d8185602086016124fa565b80840191505092915050565b6000611e76602083612314565b9150611e81826125f7565b602082019050919050565b6000611e99601483612314565b9150611ea482612620565b602082019050919050565b6000611ebc600d83612314565b9150611ec782612649565b602082019050919050565b6000611edf601083612314565b9150611eea82612672565b602082019050919050565b6000611f02601a83612314565b9150611f0d8261269b565b602082019050919050565b6000611f25601783612325565b9150611f30826126c4565b601782019050919050565b6000611f48601883612314565b9150611f53826126ed565b602082019050919050565b6000611f6b601183612325565b9150611f7682612716565b601182019050919050565b6000611f8e602f83612314565b9150611f998261273f565b604082019050919050565b611fad816124b0565b82525050565b6000611fbe82611f18565b9150611fca8285611e38565b9150611fd582611f5e565b9150611fe18284611e38565b91508190509392505050565b60006020820190506120026000830184611d7b565b92915050565b600060a08201905061201d6000830188611d7b565b61202a6020830187611d7b565b6120376040830186611d7b565b6120446060830185611fa4565b81810360808301526120568184611da8565b90509695505050505050565b60006040820190506120776000830185611d7b565b81810360208301526120898184611da8565b90509392505050565b60006060820190506120a76000830186611d7b565b6120b46020830185611de1565b6120c16040830184611fa4565b949350505050565b60006040820190506120de6000830185611d7b565b6120eb6020830184611fa4565b9392505050565b60006020820190506121076000830184611d8a565b92915050565b60006020820190506121226000830184611d99565b92915050565b600060208201905081810360008301526121428184611da8565b905092915050565b600060408201905061215f6000830185611df0565b81810360208301526121718184611da8565b90509392505050565b600060208201905081810360008301526121948184611dff565b905092915050565b600060208201905081810360008301526121b581611e69565b9050919050565b600060208201905081810360008301526121d581611e8c565b9050919050565b600060208201905081810360008301526121f581611eaf565b9050919050565b6000602082019050818103600083015261221581611ed2565b9050919050565b6000602082019050818103600083015261223581611ef5565b9050919050565b6000602082019050818103600083015261225581611f3b565b9050919050565b6000602082019050818103600083015261227581611f81565b9050919050565b60006020820190506122916000830184611fa4565b92915050565b60006122a16122b2565b90506122ad8282612557565b919050565b6000604051905090565b600067ffffffffffffffff8211156122d7576122d66125b7565b5b6122e0826125e6565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061233b82612490565b915061234683612490565b92508273ffffffffffffffffffffffffffffffffffffffff0382111561236f5761236e612588565b5b828201905092915050565b6000612385826124b0565b9150612390836124b0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123c5576123c4612588565b5b828201905092915050565b60006123db826124b0565b91506123e6836124b0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561241f5761241e612588565b5b828202905092915050565b600061243582612490565b9050919050565b600061244782612490565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006124d2826124b0565b9050919050565b60006124e4826124ba565b9050919050565b82818337600083830152505050565b60005b838110156125185780820151818401526020810190506124fd565b83811115612527576000848401525b50505050565b6000612538826124b0565b9150600082141561254c5761254b612588565b5b600182039050919050565b612560826125e6565b810181811067ffffffffffffffff8211171561257f5761257e6125b7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6127978161242a565b81146127a257600080fd5b50565b6127ae8161243c565b81146127b957600080fd5b50565b6127c58161245a565b81146127d057600080fd5b50565b6127dc81612464565b81146127e757600080fd5b50565b6127f3816124b0565b81146127fe57600080fd5b5056fea2646970667358221220e7f39766c7c47283c13e7ef290091dd276e0e1ea4713b469818046aa3a41baf164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80637b3a3c8b116100c3578063a7e28d481161007c578063a7e28d481461037a578063c4c0087c146103aa578063ccc57490146103c8578063d2ce7d65146103e6578063d547741f14610416578063e83d1f17146104325761014d565b80637b3a3c8b146102a45780638456cb59146102d457806391d14854146102de5780639d79bdb51461030e578063a0c76a961461032c578063a217fddf1461035c5761014d565b80632f2ff15d116101155780632f2ff15d1461020a57806336568abe146102265780633f4ba83a146102425780634adc698a1461024c5780635c975abb1461026a57806377061e4d146102885761014d565b806301ffc9a7146101525780630725667714610182578063248a9ca3146101a05780632db09c1c146101d05780632e567b36146101ee575b600080fd5b61016c60048036038101906101679190611d29565b610450565b60405161017991906120f2565b60405180910390f35b61018a6104ca565b6040516101979190611fed565b60405180910390f35b6101ba60048036038101906101b59190611cc4565b6104ee565b6040516101c7919061210d565b60405180910390f35b6101d861050d565b6040516101e59190611fed565b60405180910390f35b61020860048036038101906102039190611a7c565b610535565b005b610224600480360381019061021f9190611ced565b6107f7565b005b610240600480360381019061023b9190611ced565b610820565b005b61024a6108a3565b005b6102546108e0565b6040516102619190611fed565b60405180910390f35b610272610904565b60405161027f91906120f2565b60405180910390f35b6102a2600480360381019061029d91906119ff565b61091b565b005b6102be60048036038101906102b99190611b9d565b610991565b6040516102cb9190612128565b60405180910390f35b6102dc6109ae565b005b6102f860048036038101906102f39190611ced565b6109eb565b60405161030591906120f2565b60405180910390f35b610316610a55565b6040516103239190611fed565b60405180910390f35b61034660048036038101906103419190611b0e565b610a79565b6040516103539190612128565b60405180910390f35b610364610b26565b604051610371919061210d565b60405180910390f35b610394600480360381019061038f91906119ff565b610b2d565b6040516103a19190611fed565b60405180910390f35b6103b2610bb4565b6040516103bf9190611fed565b60405180910390f35b6103d0610bd8565b6040516103dd919061210d565b60405180910390f35b61040060048036038101906103fb9190611c1d565b610bfc565b60405161040d9190612128565b60405180910390f35b610430600480360381019061042b9190611ced565b610f5a565b005b61043a610f83565b6040516104479190611fed565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104c357506104c282610fa7565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661055f81611011565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c39061223c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461065a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610651906121dc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1986866040518363ffffffff1660e01b81526004016106b59291906120c9565b600060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e879a2aa856040518263ffffffff1660e01b8152600401610740919061227c565b600060405180830381600087803b15801561075a57600080fd5b505af115801561076e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2876040516107e6919061227c565b60405180910390a450505050505050565b610800826104ee565b6108118161080c61103a565b611042565b61081b83836110df565b505050565b61082861103a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c9061225c565b60405180910390fd5b61089f82826111bf565b5050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108d5816108d061103a565b611042565b6108dd6112a0565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561094d8161094861103a565b611042565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60606109a38686866000808888610bfc565b905095945050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556109e0816109db61103a565b611042565b6109e8611342565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060632e567b3660e01b86868686600087604051602001610a9b92919061214a565b604051602081830303815290604052604051602401610abe959493929190612008565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b8b5760009050610baf565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6060610c06610904565b15610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d906121fc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb906121dc565b60405180910390fd5b600080610d2485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506113e4565b915091506000815114610d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d639061221c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc6790838a6040518363ffffffff1660e01b8152600401610dc79291906120c9565b600060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a6402a7f896040518263ffffffff1660e01b8152600401610e52919061227c565b600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050506000610ebd8360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610eb88e878f8f89610a79565b611469565b9050808a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d738e60008e604051610f2293929190612092565b60405180910390a480604051602001610f3b919061227c565b6040516020818303038152906040529350505050979650505050505050565b610f63826104ee565b610f7481610f6f61103a565b611042565b610f7e83836111bf565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000731111000000000000000000000000000000001111826110339190612330565b9050919050565b600033905090565b61104c82826109eb565b6110db576110718173ffffffffffffffffffffffffffffffffffffffff16601461156d565b61107f8360001c602061156d565b604051602001611090929190611fb3565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d2919061217a565b60405180910390fd5b5050565b6110e982826109eb565b6111bb57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061116061103a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6111c982826109eb565b1561129c57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061124161103a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6112a8610904565b6112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de906121bc565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61132b61103a565b6040516113389190611fed565b60405180910390a1565b61134a610904565b1561138a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611381906121fc565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113cd61103a565b6040516113da9190611fed565b60405180910390a1565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561145d57828060200190518101906114509190611a28565b8092508193505050611464565b3391508290505b915091565b600080606473ffffffffffffffffffffffffffffffffffffffff1663928c169a85856040518363ffffffff1660e01b81526004016114a8929190612062565b602060405180830381600087803b1580156114c257600080fd5b505af11580156114d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fa9190611d52565b9050808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a688660405161155a9190612128565b60405180910390a4809150509392505050565b60606000600283600261158091906123d0565b61158a919061237a565b67ffffffffffffffff8111156115c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115fb5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611659577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106116e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261172391906123d0565b61172d919061237a565b90505b6001811115611819577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611795577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106117d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806118129061252d565b9050611730565b506000841461185d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118549061219c565b60405180910390fd5b8091505092915050565b600061187a611875846122bc565b612297565b90508281526020810184848401111561189257600080fd5b61189d8482856124eb565b509392505050565b60006118b86118b3846122bc565b612297565b9050828152602081018484840111156118d057600080fd5b6118db8482856124fa565b509392505050565b6000813590506118f28161278e565b92915050565b600081519050611907816127a5565b92915050565b60008135905061191c816127bc565b92915050565b600081359050611931816127d3565b92915050565b60008083601f84011261194957600080fd5b8235905067ffffffffffffffff81111561196257600080fd5b60208301915083600182028301111561197a57600080fd5b9250929050565b600082601f83011261199257600080fd5b81356119a2848260208601611867565b91505092915050565b600082601f8301126119bc57600080fd5b81516119cc8482602086016118a5565b91505092915050565b6000813590506119e4816127ea565b92915050565b6000815190506119f9816127ea565b92915050565b600060208284031215611a1157600080fd5b6000611a1f848285016118e3565b91505092915050565b60008060408385031215611a3b57600080fd5b6000611a49858286016118f8565b925050602083015167ffffffffffffffff811115611a6657600080fd5b611a72858286016119ab565b9150509250929050565b60008060008060008060a08789031215611a9557600080fd5b6000611aa389828a016118e3565b9650506020611ab489828a016118e3565b9550506040611ac589828a016118e3565b9450506060611ad689828a016119d5565b935050608087013567ffffffffffffffff811115611af357600080fd5b611aff89828a01611937565b92509250509295509295509295565b600080600080600060a08688031215611b2657600080fd5b6000611b34888289016118e3565b9550506020611b45888289016118e3565b9450506040611b56888289016118e3565b9350506060611b67888289016119d5565b925050608086013567ffffffffffffffff811115611b8457600080fd5b611b9088828901611981565b9150509295509295909350565b600080600080600060808688031215611bb557600080fd5b6000611bc3888289016118e3565b9550506020611bd4888289016118e3565b9450506040611be5888289016119d5565b935050606086013567ffffffffffffffff811115611c0257600080fd5b611c0e88828901611937565b92509250509295509295909350565b600080600080600080600060c0888a031215611c3857600080fd5b6000611c468a828b016118e3565b9750506020611c578a828b016118e3565b9650506040611c688a828b016119d5565b9550506060611c798a828b016119d5565b9450506080611c8a8a828b016119d5565b93505060a088013567ffffffffffffffff811115611ca757600080fd5b611cb38a828b01611937565b925092505092959891949750929550565b600060208284031215611cd657600080fd5b6000611ce48482850161190d565b91505092915050565b60008060408385031215611d0057600080fd5b6000611d0e8582860161190d565b9250506020611d1f858286016118e3565b9150509250929050565b600060208284031215611d3b57600080fd5b6000611d4984828501611922565b91505092915050565b600060208284031215611d6457600080fd5b6000611d72848285016119ea565b91505092915050565b611d848161242a565b82525050565b611d938161244e565b82525050565b611da28161245a565b82525050565b6000611db3826122ed565b611dbd8185612303565b9350611dcd8185602086016124fa565b611dd6816125e6565b840191505092915050565b611dea816124c7565b82525050565b611df9816124d9565b82525050565b6000611e0a826122f8565b611e148185612314565b9350611e248185602086016124fa565b611e2d816125e6565b840191505092915050565b6000611e43826122f8565b611e4d8185612325565b9350611e5d8185602086016124fa565b80840191505092915050565b6000611e76602083612314565b9150611e81826125f7565b602082019050919050565b6000611e99601483612314565b9150611ea482612620565b602082019050919050565b6000611ebc600d83612314565b9150611ec782612649565b602082019050919050565b6000611edf601083612314565b9150611eea82612672565b602082019050919050565b6000611f02601a83612314565b9150611f0d8261269b565b602082019050919050565b6000611f25601783612325565b9150611f30826126c4565b601782019050919050565b6000611f48601883612314565b9150611f53826126ed565b602082019050919050565b6000611f6b601183612325565b9150611f7682612716565b601182019050919050565b6000611f8e602f83612314565b9150611f998261273f565b604082019050919050565b611fad816124b0565b82525050565b6000611fbe82611f18565b9150611fca8285611e38565b9150611fd582611f5e565b9150611fe18284611e38565b91508190509392505050565b60006020820190506120026000830184611d7b565b92915050565b600060a08201905061201d6000830188611d7b565b61202a6020830187611d7b565b6120376040830186611d7b565b6120446060830185611fa4565b81810360808301526120568184611da8565b90509695505050505050565b60006040820190506120776000830185611d7b565b81810360208301526120898184611da8565b90509392505050565b60006060820190506120a76000830186611d7b565b6120b46020830185611de1565b6120c16040830184611fa4565b949350505050565b60006040820190506120de6000830185611d7b565b6120eb6020830184611fa4565b9392505050565b60006020820190506121076000830184611d8a565b92915050565b60006020820190506121226000830184611d99565b92915050565b600060208201905081810360008301526121428184611da8565b905092915050565b600060408201905061215f6000830185611df0565b81810360208301526121718184611da8565b90509392505050565b600060208201905081810360008301526121948184611dff565b905092915050565b600060208201905081810360008301526121b581611e69565b9050919050565b600060208201905081810360008301526121d581611e8c565b9050919050565b600060208201905081810360008301526121f581611eaf565b9050919050565b6000602082019050818103600083015261221581611ed2565b9050919050565b6000602082019050818103600083015261223581611ef5565b9050919050565b6000602082019050818103600083015261225581611f3b565b9050919050565b6000602082019050818103600083015261227581611f81565b9050919050565b60006020820190506122916000830184611fa4565b92915050565b60006122a16122b2565b90506122ad8282612557565b919050565b6000604051905090565b600067ffffffffffffffff8211156122d7576122d66125b7565b5b6122e0826125e6565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061233b82612490565b915061234683612490565b92508273ffffffffffffffffffffffffffffffffffffffff0382111561236f5761236e612588565b5b828201905092915050565b6000612385826124b0565b9150612390836124b0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123c5576123c4612588565b5b828201905092915050565b60006123db826124b0565b91506123e6836124b0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561241f5761241e612588565b5b828202905092915050565b600061243582612490565b9050919050565b600061244782612490565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006124d2826124b0565b9050919050565b60006124e4826124ba565b9050919050565b82818337600083830152505050565b60005b838110156125185780820151818401526020810190506124fd565b83811115612527576000848401525b50505050565b6000612538826124b0565b9150600082141561254c5761254b612588565b5b600182039050919050565b612560826125e6565b810181811067ffffffffffffffff8211171561257f5761257e6125b7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6127978161242a565b81146127a257600080fd5b50565b6127ae8161243c565b81146127b957600080fd5b50565b6127c58161245a565b81146127d057600080fd5b50565b6127dc81612464565b81146127e757600080fd5b50565b6127f3816124b0565b81146127fe57600080fd5b5056fea2646970667358221220e7f39766c7c47283c13e7ef290091dd276e0e1ea4713b469818046aa3a41baf164736f6c63430008040033",
  "devdoc": {
    "details": "the contract can be paused by the governor which will prevent any outbound transfers but pausing the contract does not affect inbound transfers (tokens coming from L1)",
    "kind": "dev",
    "methods": {
      "finalizeInboundTransfer(address,address,address,uint256,bytes)": {
        "details": "can only accept txs coming directly from L1 LPT Gateway data param is unused because no additional data is allowed from L1",
        "params": {
          "_amount": "Amount of tokens transferred",
          "_from": "Address of the sender on L1",
          "_l1Token": "L1 Address of LPT",
          "_to": "Recepient address on L2"
        }
      },
      "getOutboundCalldata(address,address,address,uint256,bytes)": {
        "details": "encodes the target function with its params which will be called on L1 when the message is received on L1"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "outboundTransfer(address,address,uint256,bytes)": {
        "details": "no additional callhook data is allowed",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_data": "Contains sender and additional data to send to L1",
          "_l1Token": "L1 Address of LPT",
          "_to": "Recipient address on L1"
        },
        "returns": {
          "_0": "ID of the withdraw tx"
        }
      },
      "outboundTransfer(address,address,uint256,uint256,uint256,bytes)": {
        "details": "no additional callhook data is allowed",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_data": "Contains sender and additional data to send to L1",
          "_l1Token": "L1 Address of LPT",
          "_to": "Recipient address on L1"
        },
        "returns": {
          "res": "ID of the withdraw tx"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setCounterpart(address)": {
        "details": "Only address with the governor role is allowed to change the value of l1Counterpart",
        "params": {
          "_l1Counterpart": "L1 Address of the counterpart"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "L1LPTGateway",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateL2TokenAddress(address)": {
        "notice": "returns address of L2 version of LPT"
      },
      "counterpartGateway()": {
        "notice": "returns address of L1 LPT Gateway"
      },
      "finalizeInboundTransfer(address,address,address,uint256,bytes)": {
        "notice": "Receives token amount from L1 and mints the equivalent tokens to the receiving address"
      },
      "getOutboundCalldata(address,address,address,uint256,bytes)": {
        "notice": "Creates calldata required to send tx to L1"
      },
      "outboundTransfer(address,address,uint256,bytes)": {
        "notice": "Burns L2 tokens and sends a message to L1 The tokens will be received on L1 only after the wait period (7 days) is over"
      },
      "outboundTransfer(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "Burns L2 tokens and sends a message to L1 The tokens will be received on L1 only after the wait period (7 days) is over"
      },
      "setCounterpart(address)": {
        "notice": "Sets address of companion L1LPTGateway"
      }
    },
    "notice": "Manages inbound and outbound transfers of LPT between Arbitrum Rollup and L1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 343,
        "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)338_storage)"
      },
      {
        "astId": 900,
        "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3701,
        "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
        "label": "l1Counterpart",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)338_storage"
      },
      "t_struct(RoleData)338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 337,
            "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}