{
  "address": "0xcC7E99a650ED63f061AC26660f2bb71570e571b2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondingManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticketBrokerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2MigratorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateDelegatorInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateSenderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateUnbondingLocksInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bondingManagerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        }
      ],
      "name": "getMigrateDelegatorParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        }
      ],
      "name": "getMigrateSenderParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        }
      ],
      "name": "getMigrateUnbondingLocksParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MigratorAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateDelegator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateSender",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateUnbondingLocks",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBrokerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc425593335061b5bb18bf01cd08d8cbcca1dec6007d8f6eca91051a3cbc0bd69",
  "receipt": {
    "to": null,
    "from": "0xC96f6B72843Af1988C98F78eAB3E47673af63eA1",
    "contractAddress": "0xcC7E99a650ED63f061AC26660f2bb71570e571b2",
    "transactionIndex": 45,
    "gasUsed": "2343440",
    "logsBloom": "0x
    "blockHash": "0x65c6a4785e35252b0ef248e0699c040eb1de23612a8238fd471387f8355c1f67",
    "transactionHash": "0xc425593335061b5bb18bf01cd08d8cbcca1dec6007d8f6eca91051a3cbc0bd69",
    "logs": [],
    "blockNumber": 9883200,
    "cumulativeGasUsed": "15941191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x578BAde599406A8fE3d24Fd7f7211c0911F5B29e",
    "0xf71b1fb1bd297ddb4e92c9ab89d5f57ffcc899f9",
    "0x940D5630bBc300cCCF4BEaBAFfC300F7787d5b1f",
    "0x4547918C363f5d6452b77c6233c70F31Ae41b613"
  ],
  "solcInputHash": "182aeea627bf4c7935fdc9302b192bd9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketBrokerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2MigratorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateDelegatorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateSenderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateUnbondingLocksInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bondingManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"}],\"name\":\"getMigrateDelegatorParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"}],\"name\":\"getMigrateSenderParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"}],\"name\":\"getMigrateUnbondingLocksParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MigratorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateDelegator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateSender\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateUnbondingLocks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBrokerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/gateway/L1Migrator.sol\":\"L1Migrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBridge} from \\\"../../arbitrum/IBridge.sol\\\";\\nimport {IInbox} from \\\"../../arbitrum/IInbox.sol\\\";\\nimport {IOutbox} from \\\"../../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1ArbitrumMessenger {\\n    IInbox public immutable inbox;\\n\\n    event TxToL2(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed seqNum,\\n        bytes data\\n    );\\n\\n    constructor(address _inbox) {\\n        inbox = IInbox(_inbox);\\n    }\\n\\n    modifier onlyL2Counterpart(address l2Counterpart) {\\n        // a message coming from the counterpart gateway was executed by the bridge\\n        address bridge = inbox.bridge();\\n        require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\\n            .l2ToL1Sender();\\n        require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address user,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        uint256 seqNum = inbox.createRetryableTicket{value: msg.value}(\\n            target,\\n            0, // we always assume that l2CallValue = 0\\n            maxSubmissionCost,\\n            user,\\n            user,\\n            maxGas,\\n            gasPriceBid,\\n            data\\n        );\\n        emit TxToL2(user, target, seqNum, data);\\n        return seqNum;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b1123e920abe7b622858fd2666dadcbeef3b26f2bb94cb2a8df172dea3e0cd\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {L1ArbitrumMessenger} from \\\"./L1ArbitrumMessenger.sol\\\";\\nimport {IMigrator} from \\\"../../interfaces/IMigrator.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\ninterface IBondingManager {\\n    function isRegisteredTranscoder(address _addr) external view returns (bool);\\n\\n    function pendingStake(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pendingFees(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDelegator(address _addr)\\n        external\\n        view\\n        returns (\\n            uint256 bondedAmount,\\n            uint256 fees,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            uint256 startRound,\\n            uint256 lastClaimRound,\\n            uint256 nextUnbondingLockId\\n        );\\n\\n    function getDelegatorUnbondingLock(address _addr, uint256 _unbondingLockId)\\n        external\\n        view\\n        returns (uint256 amount, uint256 withdrawRound);\\n}\\n\\ninterface ITicketBroker {\\n    struct Sender {\\n        uint256 deposit;\\n        uint256 withdrawRound;\\n    }\\n\\n    struct ReserveInfo {\\n        uint256 fundsRemaining;\\n        uint256 claimedInCurrentRound;\\n    }\\n\\n    function getSenderInfo(address _addr)\\n        external\\n        view\\n        returns (Sender memory sender, ReserveInfo memory reserve);\\n}\\n\\ninterface IL2Migrator is IMigrator {\\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params)\\n        external;\\n\\n    function finalizeMigrateUnbondingLocks(\\n        MigrateUnbondingLocksParams memory _params\\n    ) external;\\n\\n    function finalizeMigrateSender(MigrateSenderParams memory _params) external;\\n}\\n\\ncontract L1Migrator is L1ArbitrumMessenger, IMigrator, EIP712 {\\n    address public immutable bondingManagerAddr;\\n    address public immutable ticketBrokerAddr;\\n    address public immutable l2MigratorAddr;\\n\\n    event MigrateDelegatorInitiated(\\n        uint256 indexed seqNo,\\n        MigrateDelegatorParams params\\n    );\\n\\n    event MigrateUnbondingLocksInitiated(\\n        uint256 indexed seqNo,\\n        MigrateUnbondingLocksParams params\\n    );\\n\\n    event MigrateSenderInitiated(\\n        uint256 indexed seqNo,\\n        MigrateSenderParams params\\n    );\\n\\n    bytes32 private constant MIGRATE_DELEGATOR_TYPE_HASH =\\n        keccak256(\\\"MigrateDelegator(address l1Addr,address l2Addr)\\\");\\n\\n    bytes32 private constant MIGRATE_UNBONDING_LOCKS_TYPE_HASH =\\n        keccak256(\\n            \\\"MigrateUnbondingLocks(address l1Addr,address l2Addr,uint256[] unbondingLockIds)\\\"\\n        );\\n\\n    bytes32 private constant MIGRATE_SENDER_TYPE_HASH =\\n        keccak256(\\\"MigrateSender(address l1Addr,address l2Addr)\\\");\\n\\n    constructor(\\n        address _inbox,\\n        address _bondingManagerAddr,\\n        address _ticketBrokerAddr,\\n        address _l2MigratorAddr\\n    ) L1ArbitrumMessenger(_inbox) EIP712(\\\"Livepeer L1Migrator\\\", \\\"1\\\") {\\n        bondingManagerAddr = _bondingManagerAddr;\\n        ticketBrokerAddr = _ticketBrokerAddr;\\n        l2MigratorAddr = _l2MigratorAddr;\\n    }\\n\\n    function migrateDelegator(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable {\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(\\n                abi.encode(MIGRATE_DELEGATOR_TYPE_HASH, _l1Addr, _l2Addr)\\n            ),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateDelegatorParams memory params\\n        ) = getMigrateDelegatorParams(_l1Addr, _l2Addr);\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refunds to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateDelegatorInitiated(seqNo, params);\\n    }\\n\\n    function migrateUnbondingLocks(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] calldata _unbondingLockIds,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable {\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(\\n                abi.encode(\\n                    MIGRATE_UNBONDING_LOCKS_TYPE_HASH,\\n                    _l1Addr,\\n                    _l2Addr,\\n                    keccak256(abi.encodePacked(_unbondingLockIds))\\n                )\\n            ),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateUnbondingLocksParams memory params\\n        ) = getMigrateUnbondingLocksParams(_l1Addr, _l2Addr, _unbondingLockIds);\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateUnbondingLocksInitiated(seqNo, params);\\n    }\\n\\n    function migrateSender(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable {\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(abi.encode(MIGRATE_SENDER_TYPE_HASH, _l1Addr, _l2Addr)),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateSenderParams memory params\\n        ) = getMigrateSenderParams(_l1Addr, _l2Addr);\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateSenderInitiated(seqNo, params);\\n    }\\n\\n    function getMigrateDelegatorParams(address _l1Addr, address _l2Addr)\\n        public\\n        view\\n        returns (bytes memory data, MigrateDelegatorParams memory params)\\n    {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        // pendingStake() ignores the _endRound arg\\n        uint256 stake = bondingManager.pendingStake(_l1Addr, 0);\\n        // pendingFees() ignores the _endRound arg\\n        uint256 fees = bondingManager.pendingFees(_l1Addr, 0);\\n        (\\n            ,\\n            ,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            ,\\n            ,\\n\\n        ) = bondingManager.getDelegator(_l1Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        // Call finalizeMigrateDelegator() on L2Migrator\\n        params = MigrateDelegatorParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            stake: stake,\\n            delegatedStake: delegatedAmount,\\n            fees: fees,\\n            delegate: delegateAddress\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateDelegator.selector,\\n            params\\n        );\\n    }\\n\\n    function getMigrateSenderParams(address _l1Addr, address _l2Addr)\\n        public\\n        view\\n        returns (bytes memory data, MigrateSenderParams memory params)\\n    {\\n        ITicketBroker ticketBroker = ITicketBroker(ticketBrokerAddr);\\n\\n        (\\n            ITicketBroker.Sender memory sender,\\n            ITicketBroker.ReserveInfo memory reserveInfo\\n        ) = ticketBroker.getSenderInfo(_l1Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        // Call finalizeMigrateSender() on L2Migrator\\n        params = MigrateSenderParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            deposit: sender.deposit,\\n            reserve: reserveInfo.fundsRemaining\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateSender.selector,\\n            params\\n        );\\n    }\\n\\n    function getMigrateUnbondingLocksParams(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] memory _unbondingLockIds\\n    )\\n        public\\n        view\\n        returns (bytes memory data, MigrateUnbondingLocksParams memory params)\\n    {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _unbondingLockIds.length; i++) {\\n            (uint256 amount, ) = bondingManager.getDelegatorUnbondingLock(\\n                _l1Addr,\\n                _unbondingLockIds[i]\\n            );\\n\\n            total += amount;\\n        }\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        // Call finalizeMigrateUnbondingLocks() on L2Migrator\\n        params = MigrateUnbondingLocksParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            total: total,\\n            unbondingLockIds: _unbondingLockIds\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateUnbondingLocks.selector,\\n            params\\n        );\\n    }\\n\\n    function requireValidMigration(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes32 _structHash,\\n        bytes memory _sig\\n    ) internal view {\\n        require(\\n            _l2Addr != address(0),\\n            \\\"L1Migrator#requireValidMigration: INVALID_L2_ADDR\\\"\\n        );\\n        require(\\n            msg.sender == _l1Addr ||\\n                recoverSigner(_structHash, _sig) == _l1Addr,\\n            \\\"L1Migrator#requireValidMigration: FAIL_AUTH\\\"\\n        );\\n    }\\n\\n    function recoverSigner(bytes32 _structHash, bytes memory _sig)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (_sig.length == 0) {\\n            return address(0);\\n        }\\n\\n        bytes32 hash = _hashTypedDataV4(_structHash);\\n        return ECDSA.recover(hash, _sig);\\n    }\\n}\\n\",\"keccak256\":\"0x84488434cdd033df2fb238c76a87643506eabe438edfe2487df3301a7d150f54\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x074790dd28b5e4702a50d11a6659de3d72a0e45c868fce801e94eeb5e225770f\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x12f048f1f8cb2c80576e474237e82c86e78de1c7c290f5ac5478e10df1501f74\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x415dddb95232da1302a97721281c362f0003046ad227c6eea998702dd0c2c8fd\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths\\n    ) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6a18a8da62224137abd565e56d3aac1331ee6634c0cbd06e05738d5e18fd53a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMigrator {\\n    struct MigrateDelegatorParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Stake of l1Addr on L1\\n        uint256 stake;\\n        // Delegated stake of l1Addr on L1\\n        uint256 delegatedStake;\\n        // Fees of l1Addr on L1\\n        uint256 fees;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateUnbondingLocksParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Total tokens in unbonding locks\\n        uint256 total;\\n        // IDs of unbonding locks being migrated\\n        uint256[] unbondingLockIds;\\n    }\\n\\n    struct MigrateSenderParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Deposit of l1Addr on L1\\n        uint256 deposit;\\n        // Reserve of l1Addr on L1\\n        uint256 reserve;\\n    }\\n}\",\"keccak256\":\"0xf32fc9dc8abaa4e5005060d0dfcedba1d50df662e0c2b6b6cfa51879ed917292\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b5060405162002dc038038062002dc0833981810160405281019062000038919062000260565b6040518060400160405280601381526020017f4c69766570656572204c314d69677261746f72000000000000000000000000008152506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660c08181525050620001468184846200020d60201b60201c565b60a0818152505080610120818152505050505050508273ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff166101808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050620003be565b600083838346306040516020016200022a959493929190620002ff565b6040516020818303038152906040528051906020012090509392505050565b6000815190506200025a81620003a4565b92915050565b600080600080608085870312156200027757600080fd5b6000620002878782880162000249565b94505060206200029a8782880162000249565b9350506040620002ad8782880162000249565b9250506060620002c08782880162000249565b91505092959194509250565b620002d7816200035c565b82525050565b620002e88162000370565b82525050565b620002f9816200039a565b82525050565b600060a082019050620003166000830188620002dd565b620003256020830187620002dd565b620003346040830186620002dd565b620003436060830185620002ee565b620003526080830184620002cc565b9695505050505050565b600062000369826200037a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620003af816200035c565b8114620003bb57600080fd5b50565b60805160601c60a05160c05160e05161010051610120516101405160601c6101605160601c6101805160601c6129546200046c6000396000818161032a015281816108e001528181610b0c0152610b9c01526000818161095001526109800152600081816103a8015281816106810152610c0c01526000610f7601526000610fb801526000610f9701526000610f2301526000610f4b015260008181610c300152610d7a01526129546000f3fe6080604052600436106100915760003560e01c80639ca228bc116100595780639ca228bc14610175578063de1ec2d6146101b3578063e40309ca146101de578063e89320e5146101fa578063fb0e722b1461022557610091565b806328293d5114610096578063329b114e146100b257806336e9feb9146100f057806378da35741461012e5780638f2c17ed1461014a575b600080fd5b6100b060048036038101906100ab919061190e565b610250565b005b3480156100be57600080fd5b506100d960048036038101906100d491906118d2565b61039a565b6040516100e792919061225d565b60405180910390f35b3480156100fc57600080fd5b50610117600480360381019061011291906119e0565b610673565b6040516101259291906122bd565b60405180910390f35b61014860048036038101906101439190611a47565b610872565b005b34801561015657600080fd5b5061015f61094e565b60405161016c9190612035565b60405180910390f35b34801561018157600080fd5b5061019c600480360381019061019791906118d2565b610972565b6040516101aa92919061228d565b60405180910390f35b3480156101bf57600080fd5b506101c8610b0a565b6040516101d59190612035565b60405180910390f35b6101f860048036038101906101f39190611a47565b610b2e565b005b34801561020657600080fd5b5061020f610c0a565b60405161021c9190612035565b60405180910390f35b34801561023157600080fd5b5061023a610c2e565b60405161024791906122f4565b60405180910390f35b6102d088887f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f7116978b8b8b8b60405160200161028b929190611fe5565b604051602081830303815290604052805190602001206040516020016102b4949392919061215e565b6040516020818303038152906040528051906020012087610c52565b60008061031f8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050610673565b9150915060006103537f00000000000000000000000000000000000000000000000000000000000000008b86898988610d75565b9050807f866b95b17eb8769a4c75462bd9ce7c2f12ba80be2b0d459669a7a2a624e06444836040516103859190612405565b60405180910390a25050505050505050505050565b60606103a461157e565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a8760006040518363ffffffff1660e01b8152600401610407929190612050565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190611b24565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc8860006040518363ffffffff1660e01b8152600401610497929190612050565b60206040518083038186803b1580156104af57600080fd5b505afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190611b24565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958a6040518263ffffffff1660e01b81526004016105259190612035565b60e06040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190611b89565b5050509350935050506040518060c001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018281526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152509550631a0725d860e01b8660405160240161060891906123cf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050965050505050509250929050565b606061067d6115f6565b60007f000000000000000000000000000000000000000000000000000000000000000090506000805b85518110156107a05760008373ffffffffffffffffffffffffffffffffffffffff1663412f83b68a898581518110610707577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161072c9291906120fe565b604080518083038186803b15801561074357600080fd5b505afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611b4d565b509050808361078a9190612525565b925050808061079890612677565b9150506106a6565b5060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001828152602001868152509250637164394560e01b836040516024016108099190612405565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093505050935093915050565b6108c886867f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f89896040516020016108ac93929190612127565b6040516020818303038152906040528051906020012087610c52565b6000806108d5888861039a565b9150915060006109097f00000000000000000000000000000000000000000000000000000000000000008986898988610d75565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb8360405161093b91906123cf565b60405180910390a2505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061097c61164a565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da886040518263ffffffff1660e01b81526004016109dd9190612035565b60806040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611ae8565b9150915060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001836000015181526020018260000151815250935063b3f5ccae60e01b84604051602401610aa191906123ea565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610b8486867f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f8989604051602001610b6893929190612127565b6040516020818303038152906040528051906020012087610c52565b600080610b918888610972565b915091506000610bc57f00000000000000000000000000000000000000000000000000000000000000008986898988610d75565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b383604051610bf791906123ea565b60405180910390a2505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb99061234f565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d3057508373ffffffffffffffffffffffffffffffffffffffff16610d188383610ea9565b73ffffffffffffffffffffffffffffffffffffffff16145b610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d669061238f565b60405180910390fd5b50505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b8152600401610de1989796959493929190612079565b6020604051808303818588803b158015610dfa57600080fd5b505af1158015610e0e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610e339190611b24565b9050808873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051610e93919061223b565b60405180910390a4809150509695505050505050565b60008082511415610ebd5760009050610ed8565b6000610ec884610ede565b9050610ed48184610ef8565b9150505b92915050565b6000610ef1610eeb610f1f565b83610fe2565b9050919050565b6000806000610f078585611015565b91509150610f1481611098565b819250505092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610f71577f00000000000000000000000000000000000000000000000000000000000000009050610fdf565b610fdc7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006113e9565b90505b90565b60008282604051602001610ff7929190611ffe565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156110575760008060006020860151925060408601519150606086015160001a905061104b87828585611423565b94509450505050611091565b60408351141561108857600080602085015191506040850151905061107d868383611530565b935093505050611091565b60006002915091505b9250929050565b600060048111156110d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561110b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611116576113e6565b60016004811115611150577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611189577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156111ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c19061230f565b60405180910390fd5b60026004811115611204577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561123d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561127e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112759061232f565b60405180910390fd5b600360048111156112b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156112f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611332576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113299061236f565b60405180910390fd5b60048081111561136b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156113a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156113e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dc906123af565b60405180910390fd5b5b50565b600083838346306040516020016114049594939291906121a3565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561145e576000600391509150611527565b601b8560ff16141580156114765750601c8560ff1614155b15611488576000600491509150611527565b6000600187878787604051600081526020016040526040516114ad94939291906121f6565b6020604051602081039080840390855afa1580156114cf573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561151e57600060019250925050611527565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061157087828885611423565b935093505050935093915050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60006116b16116ac8461244c565b612427565b905080838252602082019050828560208602820111156116d057600080fd5b60005b8581101561170057816116e688826118a8565b8452602084019350602083019250506001810190506116d3565b5050509392505050565b600061171d61171884612478565b612427565b90508281526020810184848401111561173557600080fd5b611740848285612604565b509392505050565b600081359050611757816128f0565b92915050565b60008151905061176c816128f0565b92915050565b60008083601f84011261178457600080fd5b8235905067ffffffffffffffff81111561179d57600080fd5b6020830191508360208202830111156117b557600080fd5b9250929050565b600082601f8301126117cd57600080fd5b81356117dd84826020860161169e565b91505092915050565b600082601f8301126117f757600080fd5b813561180784826020860161170a565b91505092915050565b60006040828403121561182257600080fd5b61182c6040612427565b9050600061183c848285016118bd565b6000830152506020611850848285016118bd565b60208301525092915050565b60006040828403121561186e57600080fd5b6118786040612427565b90506000611888848285016118bd565b600083015250602061189c848285016118bd565b60208301525092915050565b6000813590506118b781612907565b92915050565b6000815190506118cc81612907565b92915050565b600080604083850312156118e557600080fd5b60006118f385828601611748565b925050602061190485828601611748565b9150509250929050565b60008060008060008060008060e0898b03121561192a57600080fd5b60006119388b828c01611748565b98505060206119498b828c01611748565b975050604089013567ffffffffffffffff81111561196657600080fd5b6119728b828c01611772565b9650965050606089013567ffffffffffffffff81111561199157600080fd5b61199d8b828c016117e6565b94505060806119ae8b828c016118a8565b93505060a06119bf8b828c016118a8565b92505060c06119d08b828c016118a8565b9150509295985092959890939650565b6000806000606084860312156119f557600080fd5b6000611a0386828701611748565b9350506020611a1486828701611748565b925050604084013567ffffffffffffffff811115611a3157600080fd5b611a3d868287016117bc565b9150509250925092565b60008060008060008060c08789031215611a6057600080fd5b6000611a6e89828a01611748565b9650506020611a7f89828a01611748565b955050604087013567ffffffffffffffff811115611a9c57600080fd5b611aa889828a016117e6565b9450506060611ab989828a016118a8565b9350506080611aca89828a016118a8565b92505060a0611adb89828a016118a8565b9150509295509295509295565b60008060808385031215611afb57600080fd5b6000611b098582860161185c565b9250506040611b1a85828601611810565b9150509250929050565b600060208284031215611b3657600080fd5b6000611b44848285016118bd565b91505092915050565b60008060408385031215611b6057600080fd5b6000611b6e858286016118bd565b9250506020611b7f858286016118bd565b9150509250929050565b600080600080600080600060e0888a031215611ba457600080fd5b6000611bb28a828b016118bd565b9750506020611bc38a828b016118bd565b9650506040611bd48a828b0161175d565b9550506060611be58a828b016118bd565b9450506080611bf68a828b016118bd565b93505060a0611c078a828b016118bd565b92505060c0611c188a828b016118bd565b91505092959891949750929550565b6000611c338383611fb8565b60208301905092915050565b611c488161257b565b82525050565b611c578161257b565b82525050565b6000611c6983856124ed565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611c9857600080fd5b602083029250611ca9838584612604565b82840190509392505050565b6000611cc0826124b9565b611cca81856124dc565b9350611cd5836124a9565b8060005b83811015611d06578151611ced8882611c27565b9750611cf8836124cf565b925050600181019050611cd9565b5085935050505092915050565b611d1c8161258d565b82525050565b611d33611d2e8261258d565b6126c0565b82525050565b6000611d44826124c4565b611d4e81856124f8565b9350611d5e818560208601612613565b611d6781612728565b840191505092915050565b611d7b816125ce565b82525050565b611d8a816125f2565b82525050565b6000611d9d601883612509565b9150611da882612739565b602082019050919050565b6000611dc0601f83612509565b9150611dcb82612762565b602082019050919050565b6000611de3603183612509565b9150611dee8261278b565b604082019050919050565b6000611e0660028361251a565b9150611e11826127da565b600282019050919050565b6000611e29602283612509565b9150611e3482612803565b604082019050919050565b6000611e4c602b83612509565b9150611e5782612852565b604082019050919050565b6000611e6f602283612509565b9150611e7a826128a1565b604082019050919050565b60c082016000820151611e9b6000850182611c3f565b506020820151611eae6020850182611c3f565b506040820151611ec16040850182611fb8565b506060820151611ed46060850182611fb8565b506080820151611ee76080850182611fb8565b5060a0820151611efa60a0850182611c3f565b50505050565b608082016000820151611f166000850182611c3f565b506020820151611f296020850182611c3f565b506040820151611f3c6040850182611fb8565b506060820151611f4f6060850182611fb8565b50505050565b6000608083016000830151611f6d6000860182611c3f565b506020830151611f806020860182611c3f565b506040830151611f936040860182611fb8565b5060608301518482036060860152611fab8282611cb5565b9150508091505092915050565b611fc1816125b7565b82525050565b611fd0816125b7565b82525050565b611fdf816125c1565b82525050565b6000611ff2828486611c5d565b91508190509392505050565b600061200982611df9565b91506120158285611d22565b6020820191506120258284611d22565b6020820191508190509392505050565b600060208201905061204a6000830184611c4e565b92915050565b60006040820190506120656000830185611c4e565b6120726020830184611d81565b9392505050565b60006101008201905061208f600083018b611c4e565b61209c602083018a611d81565b6120a96040830189611fc7565b6120b66060830188611c4e565b6120c36080830187611c4e565b6120d060a0830186611fc7565b6120dd60c0830185611fc7565b81810360e08301526120ef8184611d39565b90509998505050505050505050565b60006040820190506121136000830185611c4e565b6121206020830184611fc7565b9392505050565b600060608201905061213c6000830186611d13565b6121496020830185611c4e565b6121566040830184611c4e565b949350505050565b60006080820190506121736000830187611d13565b6121806020830186611c4e565b61218d6040830185611c4e565b61219a6060830184611d13565b95945050505050565b600060a0820190506121b86000830188611d13565b6121c56020830187611d13565b6121d26040830186611d13565b6121df6060830185611fc7565b6121ec6080830184611c4e565b9695505050505050565b600060808201905061220b6000830187611d13565b6122186020830186611fd6565b6122256040830185611d13565b6122326060830184611d13565b95945050505050565b600060208201905081810360008301526122558184611d39565b905092915050565b600060e08201905081810360008301526122778185611d39565b90506122866020830184611e85565b9392505050565b600060a08201905081810360008301526122a78185611d39565b90506122b66020830184611f00565b9392505050565b600060408201905081810360008301526122d78185611d39565b905081810360208301526122eb8184611f55565b90509392505050565b60006020820190506123096000830184611d72565b92915050565b6000602082019050818103600083015261232881611d90565b9050919050565b6000602082019050818103600083015261234881611db3565b9050919050565b6000602082019050818103600083015261236881611dd6565b9050919050565b6000602082019050818103600083015261238881611e1c565b9050919050565b600060208201905081810360008301526123a881611e3f565b9050919050565b600060208201905081810360008301526123c881611e62565b9050919050565b600060c0820190506123e46000830184611e85565b92915050565b60006080820190506123ff6000830184611f00565b92915050565b6000602082019050818103600083015261241f8184611f55565b905092915050565b6000612431612442565b905061243d8282612646565b919050565b6000604051905090565b600067ffffffffffffffff821115612467576124666126f9565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612493576124926126f9565b5b61249c82612728565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612530826125b7565b915061253b836125b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156125705761256f6126ca565b5b828201905092915050565b600061258682612597565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006125d9826125e0565b9050919050565b60006125eb82612597565b9050919050565b60006125fd826125b7565b9050919050565b82818337600083830152505050565b60005b83811015612631578082015181840152602081019050612616565b83811115612640576000848401525b50505050565b61264f82612728565b810181811067ffffffffffffffff8211171561266e5761266d6126f9565b5b80604052505050565b6000612682826125b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156126b5576126b46126ca565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a20494e56414c49445f4c325f41444452000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a204641494c5f41555448000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6128f98161257b565b811461290457600080fd5b50565b612910816125b7565b811461291b57600080fd5b5056fea2646970667358221220790eda0ef8abba0a5905d2712e35e67ff869d199b3ed5024a8786f02708ed27e64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80639ca228bc116100595780639ca228bc14610175578063de1ec2d6146101b3578063e40309ca146101de578063e89320e5146101fa578063fb0e722b1461022557610091565b806328293d5114610096578063329b114e146100b257806336e9feb9146100f057806378da35741461012e5780638f2c17ed1461014a575b600080fd5b6100b060048036038101906100ab919061190e565b610250565b005b3480156100be57600080fd5b506100d960048036038101906100d491906118d2565b61039a565b6040516100e792919061225d565b60405180910390f35b3480156100fc57600080fd5b50610117600480360381019061011291906119e0565b610673565b6040516101259291906122bd565b60405180910390f35b61014860048036038101906101439190611a47565b610872565b005b34801561015657600080fd5b5061015f61094e565b60405161016c9190612035565b60405180910390f35b34801561018157600080fd5b5061019c600480360381019061019791906118d2565b610972565b6040516101aa92919061228d565b60405180910390f35b3480156101bf57600080fd5b506101c8610b0a565b6040516101d59190612035565b60405180910390f35b6101f860048036038101906101f39190611a47565b610b2e565b005b34801561020657600080fd5b5061020f610c0a565b60405161021c9190612035565b60405180910390f35b34801561023157600080fd5b5061023a610c2e565b60405161024791906122f4565b60405180910390f35b6102d088887f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f7116978b8b8b8b60405160200161028b929190611fe5565b604051602081830303815290604052805190602001206040516020016102b4949392919061215e565b6040516020818303038152906040528051906020012087610c52565b60008061031f8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050610673565b9150915060006103537f00000000000000000000000000000000000000000000000000000000000000008b86898988610d75565b9050807f866b95b17eb8769a4c75462bd9ce7c2f12ba80be2b0d459669a7a2a624e06444836040516103859190612405565b60405180910390a25050505050505050505050565b60606103a461157e565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a8760006040518363ffffffff1660e01b8152600401610407929190612050565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190611b24565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc8860006040518363ffffffff1660e01b8152600401610497929190612050565b60206040518083038186803b1580156104af57600080fd5b505afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190611b24565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958a6040518263ffffffff1660e01b81526004016105259190612035565b60e06040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190611b89565b5050509350935050506040518060c001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018281526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152509550631a0725d860e01b8660405160240161060891906123cf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050965050505050509250929050565b606061067d6115f6565b60007f000000000000000000000000000000000000000000000000000000000000000090506000805b85518110156107a05760008373ffffffffffffffffffffffffffffffffffffffff1663412f83b68a898581518110610707577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161072c9291906120fe565b604080518083038186803b15801561074357600080fd5b505afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611b4d565b509050808361078a9190612525565b925050808061079890612677565b9150506106a6565b5060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001828152602001868152509250637164394560e01b836040516024016108099190612405565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093505050935093915050565b6108c886867f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f89896040516020016108ac93929190612127565b6040516020818303038152906040528051906020012087610c52565b6000806108d5888861039a565b9150915060006109097f00000000000000000000000000000000000000000000000000000000000000008986898988610d75565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb8360405161093b91906123cf565b60405180910390a2505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061097c61164a565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da886040518263ffffffff1660e01b81526004016109dd9190612035565b60806040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611ae8565b9150915060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001836000015181526020018260000151815250935063b3f5ccae60e01b84604051602401610aa191906123ea565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610b8486867f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f8989604051602001610b6893929190612127565b6040516020818303038152906040528051906020012087610c52565b600080610b918888610972565b915091506000610bc57f00000000000000000000000000000000000000000000000000000000000000008986898988610d75565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b383604051610bf791906123ea565b60405180910390a2505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb99061234f565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d3057508373ffffffffffffffffffffffffffffffffffffffff16610d188383610ea9565b73ffffffffffffffffffffffffffffffffffffffff16145b610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d669061238f565b60405180910390fd5b50505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b8152600401610de1989796959493929190612079565b6020604051808303818588803b158015610dfa57600080fd5b505af1158015610e0e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610e339190611b24565b9050808873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051610e93919061223b565b60405180910390a4809150509695505050505050565b60008082511415610ebd5760009050610ed8565b6000610ec884610ede565b9050610ed48184610ef8565b9150505b92915050565b6000610ef1610eeb610f1f565b83610fe2565b9050919050565b6000806000610f078585611015565b91509150610f1481611098565b819250505092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610f71577f00000000000000000000000000000000000000000000000000000000000000009050610fdf565b610fdc7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006113e9565b90505b90565b60008282604051602001610ff7929190611ffe565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156110575760008060006020860151925060408601519150606086015160001a905061104b87828585611423565b94509450505050611091565b60408351141561108857600080602085015191506040850151905061107d868383611530565b935093505050611091565b60006002915091505b9250929050565b600060048111156110d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561110b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611116576113e6565b60016004811115611150577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611189577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156111ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c19061230f565b60405180910390fd5b60026004811115611204577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561123d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561127e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112759061232f565b60405180910390fd5b600360048111156112b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156112f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611332576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113299061236f565b60405180910390fd5b60048081111561136b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156113a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156113e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dc906123af565b60405180910390fd5b5b50565b600083838346306040516020016114049594939291906121a3565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561145e576000600391509150611527565b601b8560ff16141580156114765750601c8560ff1614155b15611488576000600491509150611527565b6000600187878787604051600081526020016040526040516114ad94939291906121f6565b6020604051602081039080840390855afa1580156114cf573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561151e57600060019250925050611527565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061157087828885611423565b935093505050935093915050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60006116b16116ac8461244c565b612427565b905080838252602082019050828560208602820111156116d057600080fd5b60005b8581101561170057816116e688826118a8565b8452602084019350602083019250506001810190506116d3565b5050509392505050565b600061171d61171884612478565b612427565b90508281526020810184848401111561173557600080fd5b611740848285612604565b509392505050565b600081359050611757816128f0565b92915050565b60008151905061176c816128f0565b92915050565b60008083601f84011261178457600080fd5b8235905067ffffffffffffffff81111561179d57600080fd5b6020830191508360208202830111156117b557600080fd5b9250929050565b600082601f8301126117cd57600080fd5b81356117dd84826020860161169e565b91505092915050565b600082601f8301126117f757600080fd5b813561180784826020860161170a565b91505092915050565b60006040828403121561182257600080fd5b61182c6040612427565b9050600061183c848285016118bd565b6000830152506020611850848285016118bd565b60208301525092915050565b60006040828403121561186e57600080fd5b6118786040612427565b90506000611888848285016118bd565b600083015250602061189c848285016118bd565b60208301525092915050565b6000813590506118b781612907565b92915050565b6000815190506118cc81612907565b92915050565b600080604083850312156118e557600080fd5b60006118f385828601611748565b925050602061190485828601611748565b9150509250929050565b60008060008060008060008060e0898b03121561192a57600080fd5b60006119388b828c01611748565b98505060206119498b828c01611748565b975050604089013567ffffffffffffffff81111561196657600080fd5b6119728b828c01611772565b9650965050606089013567ffffffffffffffff81111561199157600080fd5b61199d8b828c016117e6565b94505060806119ae8b828c016118a8565b93505060a06119bf8b828c016118a8565b92505060c06119d08b828c016118a8565b9150509295985092959890939650565b6000806000606084860312156119f557600080fd5b6000611a0386828701611748565b9350506020611a1486828701611748565b925050604084013567ffffffffffffffff811115611a3157600080fd5b611a3d868287016117bc565b9150509250925092565b60008060008060008060c08789031215611a6057600080fd5b6000611a6e89828a01611748565b9650506020611a7f89828a01611748565b955050604087013567ffffffffffffffff811115611a9c57600080fd5b611aa889828a016117e6565b9450506060611ab989828a016118a8565b9350506080611aca89828a016118a8565b92505060a0611adb89828a016118a8565b9150509295509295509295565b60008060808385031215611afb57600080fd5b6000611b098582860161185c565b9250506040611b1a85828601611810565b9150509250929050565b600060208284031215611b3657600080fd5b6000611b44848285016118bd565b91505092915050565b60008060408385031215611b6057600080fd5b6000611b6e858286016118bd565b9250506020611b7f858286016118bd565b9150509250929050565b600080600080600080600060e0888a031215611ba457600080fd5b6000611bb28a828b016118bd565b9750506020611bc38a828b016118bd565b9650506040611bd48a828b0161175d565b9550506060611be58a828b016118bd565b9450506080611bf68a828b016118bd565b93505060a0611c078a828b016118bd565b92505060c0611c188a828b016118bd565b91505092959891949750929550565b6000611c338383611fb8565b60208301905092915050565b611c488161257b565b82525050565b611c578161257b565b82525050565b6000611c6983856124ed565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611c9857600080fd5b602083029250611ca9838584612604565b82840190509392505050565b6000611cc0826124b9565b611cca81856124dc565b9350611cd5836124a9565b8060005b83811015611d06578151611ced8882611c27565b9750611cf8836124cf565b925050600181019050611cd9565b5085935050505092915050565b611d1c8161258d565b82525050565b611d33611d2e8261258d565b6126c0565b82525050565b6000611d44826124c4565b611d4e81856124f8565b9350611d5e818560208601612613565b611d6781612728565b840191505092915050565b611d7b816125ce565b82525050565b611d8a816125f2565b82525050565b6000611d9d601883612509565b9150611da882612739565b602082019050919050565b6000611dc0601f83612509565b9150611dcb82612762565b602082019050919050565b6000611de3603183612509565b9150611dee8261278b565b604082019050919050565b6000611e0660028361251a565b9150611e11826127da565b600282019050919050565b6000611e29602283612509565b9150611e3482612803565b604082019050919050565b6000611e4c602b83612509565b9150611e5782612852565b604082019050919050565b6000611e6f602283612509565b9150611e7a826128a1565b604082019050919050565b60c082016000820151611e9b6000850182611c3f565b506020820151611eae6020850182611c3f565b506040820151611ec16040850182611fb8565b506060820151611ed46060850182611fb8565b506080820151611ee76080850182611fb8565b5060a0820151611efa60a0850182611c3f565b50505050565b608082016000820151611f166000850182611c3f565b506020820151611f296020850182611c3f565b506040820151611f3c6040850182611fb8565b506060820151611f4f6060850182611fb8565b50505050565b6000608083016000830151611f6d6000860182611c3f565b506020830151611f806020860182611c3f565b506040830151611f936040860182611fb8565b5060608301518482036060860152611fab8282611cb5565b9150508091505092915050565b611fc1816125b7565b82525050565b611fd0816125b7565b82525050565b611fdf816125c1565b82525050565b6000611ff2828486611c5d565b91508190509392505050565b600061200982611df9565b91506120158285611d22565b6020820191506120258284611d22565b6020820191508190509392505050565b600060208201905061204a6000830184611c4e565b92915050565b60006040820190506120656000830185611c4e565b6120726020830184611d81565b9392505050565b60006101008201905061208f600083018b611c4e565b61209c602083018a611d81565b6120a96040830189611fc7565b6120b66060830188611c4e565b6120c36080830187611c4e565b6120d060a0830186611fc7565b6120dd60c0830185611fc7565b81810360e08301526120ef8184611d39565b90509998505050505050505050565b60006040820190506121136000830185611c4e565b6121206020830184611fc7565b9392505050565b600060608201905061213c6000830186611d13565b6121496020830185611c4e565b6121566040830184611c4e565b949350505050565b60006080820190506121736000830187611d13565b6121806020830186611c4e565b61218d6040830185611c4e565b61219a6060830184611d13565b95945050505050565b600060a0820190506121b86000830188611d13565b6121c56020830187611d13565b6121d26040830186611d13565b6121df6060830185611fc7565b6121ec6080830184611c4e565b9695505050505050565b600060808201905061220b6000830187611d13565b6122186020830186611fd6565b6122256040830185611d13565b6122326060830184611d13565b95945050505050565b600060208201905081810360008301526122558184611d39565b905092915050565b600060e08201905081810360008301526122778185611d39565b90506122866020830184611e85565b9392505050565b600060a08201905081810360008301526122a78185611d39565b90506122b66020830184611f00565b9392505050565b600060408201905081810360008301526122d78185611d39565b905081810360208301526122eb8184611f55565b90509392505050565b60006020820190506123096000830184611d72565b92915050565b6000602082019050818103600083015261232881611d90565b9050919050565b6000602082019050818103600083015261234881611db3565b9050919050565b6000602082019050818103600083015261236881611dd6565b9050919050565b6000602082019050818103600083015261238881611e1c565b9050919050565b600060208201905081810360008301526123a881611e3f565b9050919050565b600060208201905081810360008301526123c881611e62565b9050919050565b600060c0820190506123e46000830184611e85565b92915050565b60006080820190506123ff6000830184611f00565b92915050565b6000602082019050818103600083015261241f8184611f55565b905092915050565b6000612431612442565b905061243d8282612646565b919050565b6000604051905090565b600067ffffffffffffffff821115612467576124666126f9565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612493576124926126f9565b5b61249c82612728565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612530826125b7565b915061253b836125b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156125705761256f6126ca565b5b828201905092915050565b600061258682612597565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006125d9826125e0565b9050919050565b60006125eb82612597565b9050919050565b60006125fd826125b7565b9050919050565b82818337600083830152505050565b60005b83811015612631578082015181840152602081019050612616565b83811115612640576000848401525b50505050565b61264f82612728565b810181811067ffffffffffffffff8211171561266e5761266d6126f9565b5b80604052505050565b6000612682826125b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156126b5576126b46126ca565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a20494e56414c49445f4c325f41444452000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a204641494c5f41555448000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6128f98161257b565b811461290457600080fd5b50565b612910816125b7565b811461291b57600080fd5b5056fea2646970667358221220790eda0ef8abba0a5905d2712e35e67ff869d199b3ed5024a8786f02708ed27e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}