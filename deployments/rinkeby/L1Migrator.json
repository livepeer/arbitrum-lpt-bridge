{
  "address": "0x743b8469e5f54cD765F1954604cD4dfA67b64bF6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondingManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticketBrokerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeMinterAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1LPTGatewayAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2MigratorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Migrator",
          "type": "address"
        }
      ],
      "name": "L2MigratorUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateDelegatorInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateSenderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateUnbondingLocksInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondingManagerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeMinterAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        }
      ],
      "name": "getMigrateDelegatorParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        }
      ],
      "name": "getMigrateSenderParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        }
      ],
      "name": "getMigrateUnbondingLocksParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1LPTGatewayAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MigratorAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateDelegator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateLPT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateSender",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateUnbondingLocks",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2MigratorAddr",
          "type": "address"
        }
      ],
      "name": "setL2Migrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBrokerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4ee4d451a74e0c4a349a0c3cfc1467231ef3b5f23354ab872b74492a6baa7372",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0x743b8469e5f54cD765F1954604cD4dfA67b64bF6",
    "transactionIndex": 12,
    "gasUsed": "3855895",
    "logsBloom": "0x
    "blockHash": "0x72c4aec28a7ee67fb53fd0c853977eb148cb40069ae83ebbfb1abbb302782824",
    "transactionHash": "0x4ee4d451a74e0c4a349a0c3cfc1467231ef3b5f23354ab872b74492a6baa7372",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10135996,
        "transactionHash": "0x4ee4d451a74e0c4a349a0c3cfc1467231ef3b5f23354ab872b74492a6baa7372",
        "address": "0x743b8469e5f54cD765F1954604cD4dfA67b64bF6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x72c4aec28a7ee67fb53fd0c853977eb148cb40069ae83ebbfb1abbb302782824"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10135996,
        "transactionHash": "0x4ee4d451a74e0c4a349a0c3cfc1467231ef3b5f23354ab872b74492a6baa7372",
        "address": "0x743b8469e5f54cD765F1954604cD4dfA67b64bF6",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
        "logIndex": 14,
        "blockHash": "0x72c4aec28a7ee67fb53fd0c853977eb148cb40069ae83ebbfb1abbb302782824"
      }
    ],
    "blockNumber": 10135996,
    "cumulativeGasUsed": "15886311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x578BAde599406A8fE3d24Fd7f7211c0911F5B29e",
    "0xC40df4db2f99e7e235780A93B192F1a934f0c45b",
    "0x242f1361CCdaAe8CCdf8539DE183Cb518856254f",
    "0x187E962A5a1CD2cE2D133e80182A82f0eBd29Ef5",
    "0xEf5F154eb0261CB0331a28BC0fB60CA73E716617",
    "0x831C51Cd8A38C3E42D98Acd77F06BF537D29800e",
    "0x4b42a3CA60dd41F0E5a5eD8cf13F4e5a866EcD99"
  ],
  "solcInputHash": "e78bf2dfcc116e09f75a0a66441e256b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketBrokerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeMinterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1LPTGatewayAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2MigratorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Migrator\",\"type\":\"address\"}],\"name\":\"L2MigratorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateDelegatorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateSenderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateUnbondingLocksInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeMinterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"}],\"name\":\"getMigrateDelegatorParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"}],\"name\":\"getMigrateSenderParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"}],\"name\":\"getMigrateUnbondingLocksParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1LPTGatewayAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MigratorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateDelegator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateLPT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateSender\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateUnbondingLocks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2MigratorAddr\",\"type\":\"address\"}],\"name\":\"setL2Migrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBrokerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMigrateDelegatorParams(address,address)\":{\"params\":{\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\"},\"returns\":{\"data\":\"L2 calldata for finalizeMigrateDelegator() in L2Migrator\",\"params\":\"MigrateDelegatorParams to use for finalizeMigrateDelegator() in L2Migrator\"}},\"getMigrateSenderParams(address,address)\":{\"params\":{\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\"},\"returns\":{\"data\":\"L2 calldata for finalizeMigrateSender() in L2Migrator\",\"params\":\"MigrateSenderParams to use for finalizeMigrateSender() in L2Migrator\"}},\"getMigrateUnbondingLocksParams(address,address,uint256[])\":{\"params\":{\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_unbondingLockIds\":\"IDs of unbonding locks in L1 BondingManager to migrate\"},\"returns\":{\"data\":\"L2 calldata for finalizeMigrateUnbondingLocks() in L2Migrator\",\"params\":\"MigrateUnbondingLocksParams to use for finalizeMigrateUnbondingLocks() in L2Migrator\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateDelegator(address,address,bytes,uint256,uint256,uint256)\":{\"details\":\"The term \\\"delegator\\\" here can refer to both a transcoder (self-delegated delegator) and delegator.\",\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\",\"_sig\":\"Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\"}},\"migrateETH(uint256,uint256,uint256)\":{\"details\":\"Anyone can call this function.\",\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\"}},\"migrateLPT(uint256,uint256,uint256)\":{\"details\":\"Anyone can call this function.\",\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\"}},\"migrateSender(address,address,bytes,uint256,uint256,uint256)\":{\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\",\"_sig\":\"Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\"}},\"migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)\":{\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\",\"_sig\":\"Optional EIP-712 signature over a payload that includes _l1Addr, _l2Addr and _unbondingLockIds\",\"_unbondingLockIds\":\"IDs of unbonding locks in the L1 BondingManager to migrate\"}},\"pause()\":{\"details\":\"Only callable by addresses with governor role\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setL2Migrator(address)\":{\"params\":{\"_l2MigratorAddr\":\"L2Migrator address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Only callable by addresses with governor role\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMigrateDelegatorParams(address,address)\":{\"notice\":\"Return L2 calldata and MigrateDelegatorParams to use for a L2 call on L2Migrator\"},\"getMigrateSenderParams(address,address)\":{\"notice\":\"Return L2 calldata and MigrateSenderParams to use for a L2 call on L2Migrator\"},\"getMigrateUnbondingLocksParams(address,address,uint256[])\":{\"notice\":\"Return L2 calldata and MigrateUnbondingLocksParams to use for a L2 call on L2Migrator\"},\"migrateDelegator(address,address,bytes,uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to L2Migrator to migrate transcoder/delegator state from the L1 BondingManager.\"},\"migrateETH(uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to send ETH from the L1BridgeMinter to the L2Migrator.\"},\"migrateLPT(uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to send LPT from the L1BridgeMinter to the L2Migrator.\"},\"migrateSender(address,address,bytes,uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to L2Migrator to migrate sender deposit/reserve state from the L1 TicketBroker.\"},\"migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to L2Migrator to migrate unbonding locks state from the L1 BondingManager.\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setL2Migrator(address)\":{\"notice\":\"Sets L2Migrator\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/gateway/L1Migrator.sol\":\"L1Migrator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/L1/gateway/IL1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\ninterface IL1LPTGateway {\\n    event DepositInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _sequenceNumber,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalFinalized(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42ac495212a81294511143d4850ab870f38315c9344460f5202465f543d54b7f\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport {IBridge} from \\\"../../arbitrum/IBridge.sol\\\";\\nimport {IInbox} from \\\"../../arbitrum/IInbox.sol\\\";\\nimport {IOutbox} from \\\"../../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1ArbitrumMessenger {\\n    IInbox public immutable inbox;\\n\\n    event TxToL2(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed seqNum,\\n        bytes data\\n    );\\n\\n    constructor(address _inbox) {\\n        inbox = IInbox(_inbox);\\n    }\\n\\n    modifier onlyL2Counterpart(address l2Counterpart) {\\n        // a message coming from the counterpart gateway was executed by the bridge\\n        address bridge = inbox.bridge();\\n        require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\\n            .l2ToL1Sender();\\n        require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address from,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        return\\n            sendTxToL2(\\n                target,\\n                from,\\n                msg.value,\\n                0, // we always assume that l2CallValue = 0\\n                maxSubmissionCost,\\n                maxGas,\\n                gasPriceBid,\\n                data\\n            );\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address from,\\n        uint256 _l1CallValue,\\n        uint256 _l2CallValue,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        uint256 seqNum = inbox.createRetryableTicket{value: _l1CallValue}(\\n            target,\\n            _l2CallValue,\\n            maxSubmissionCost,\\n            from,\\n            from,\\n            maxGas,\\n            gasPriceBid,\\n            data\\n        );\\n        emit TxToL2(from, target, seqNum, data);\\n        return seqNum;\\n    }\\n}\\n\",\"keccak256\":\"0x4bda09579c7775395e15b5dbae4adee4da7bc9b0cbf339ff2ed3063b034dbd3e\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport {L1ArbitrumMessenger} from \\\"./L1ArbitrumMessenger.sol\\\";\\nimport {IL1LPTGateway} from \\\"./IL1LPTGateway.sol\\\";\\nimport {IMigrator} from \\\"../../interfaces/IMigrator.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IBondingManager {\\n    function isRegisteredTranscoder(address _addr) external view returns (bool);\\n\\n    function pendingStake(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pendingFees(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDelegator(address _addr)\\n        external\\n        view\\n        returns (\\n            uint256 bondedAmount,\\n            uint256 fees,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            uint256 startRound,\\n            uint256 lastClaimRound,\\n            uint256 nextUnbondingLockId\\n        );\\n\\n    function getDelegatorUnbondingLock(address _addr, uint256 _unbondingLockId)\\n        external\\n        view\\n        returns (uint256 amount, uint256 withdrawRound);\\n}\\n\\ninterface ITicketBroker {\\n    struct Sender {\\n        uint256 deposit;\\n        uint256 withdrawRound;\\n    }\\n\\n    struct ReserveInfo {\\n        uint256 fundsRemaining;\\n        uint256 claimedInCurrentRound;\\n    }\\n\\n    function getSenderInfo(address _addr)\\n        external\\n        view\\n        returns (Sender memory sender, ReserveInfo memory reserve);\\n}\\n\\ninterface IBridgeMinter {\\n    function withdrawETHToL1Migrator() external returns (uint256);\\n\\n    function withdrawLPTToL1Migrator() external returns (uint256);\\n}\\n\\ninterface ApproveLike {\\n    function approve(address _addr, uint256 _amount) external;\\n}\\n\\ninterface IL2Migrator is IMigrator {\\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params)\\n        external;\\n\\n    function finalizeMigrateUnbondingLocks(\\n        MigrateUnbondingLocksParams memory _params\\n    ) external;\\n\\n    function finalizeMigrateSender(MigrateSenderParams memory _params) external;\\n}\\n\\ncontract L1Migrator is\\n    L1ArbitrumMessenger,\\n    IMigrator,\\n    EIP712,\\n    AccessControl,\\n    Pausable\\n{\\n    address public immutable bondingManagerAddr;\\n    address public immutable ticketBrokerAddr;\\n    address public immutable bridgeMinterAddr;\\n    address public immutable tokenAddr;\\n    address public immutable l1LPTGatewayAddr;\\n    address public l2MigratorAddr;\\n\\n    event MigrateDelegatorInitiated(\\n        uint256 indexed seqNo,\\n        MigrateDelegatorParams params\\n    );\\n\\n    event MigrateUnbondingLocksInitiated(\\n        uint256 indexed seqNo,\\n        MigrateUnbondingLocksParams params\\n    );\\n\\n    event MigrateSenderInitiated(\\n        uint256 indexed seqNo,\\n        MigrateSenderParams params\\n    );\\n\\n    event L2MigratorUpdate(address l2Migrator);\\n\\n    bytes32 private immutable MIGRATE_DELEGATOR_TYPE_HASH =\\n        keccak256(\\\"MigrateDelegator(address l1Addr,address l2Addr)\\\");\\n\\n    bytes32 private immutable MIGRATE_UNBONDING_LOCKS_TYPE_HASH =\\n        keccak256(\\n            \\\"MigrateUnbondingLocks(address l1Addr,address l2Addr,uint256[] unbondingLockIds)\\\"\\n        );\\n\\n    bytes32 private immutable MIGRATE_SENDER_TYPE_HASH =\\n        keccak256(\\\"MigrateSender(address l1Addr,address l2Addr)\\\");\\n\\n    constructor(\\n        address _inbox,\\n        address _bondingManagerAddr,\\n        address _ticketBrokerAddr,\\n        address _bridgeMinterAddr,\\n        address _tokenAddr,\\n        address _l1LPTGatewayAddr,\\n        address _l2MigratorAddr\\n    ) L1ArbitrumMessenger(_inbox) EIP712(\\\"Livepeer L1Migrator\\\", \\\"1\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        bondingManagerAddr = _bondingManagerAddr;\\n        ticketBrokerAddr = _ticketBrokerAddr;\\n        bridgeMinterAddr = _bridgeMinterAddr;\\n        tokenAddr = _tokenAddr;\\n        l1LPTGatewayAddr = _l1LPTGatewayAddr;\\n        l2MigratorAddr = _l2MigratorAddr;\\n\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Sets L2Migrator\\n     * @param _l2MigratorAddr L2Migrator address\\n     */\\n    function setL2Migrator(address _l2MigratorAddr)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        l2MigratorAddr = _l2MigratorAddr;\\n        emit L2MigratorUpdate(_l2MigratorAddr);\\n    }\\n\\n    /**\\n     * @notice Receive ETH when there is no msg.data\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Executes a L2 call to L2Migrator to migrate transcoder/delegator state from the L1 BondingManager.\\n     * @dev The term \\\"delegator\\\" here can refer to both a transcoder (self-delegated delegator) and delegator.\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _sig Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateDelegator(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes calldata _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        // Authorization\\n        // Either msg.sender == _l1Addr OR signer for _sig == _l1Addr\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(\\n                abi.encode(MIGRATE_DELEGATOR_TYPE_HASH, _l1Addr, _l2Addr)\\n            ),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateDelegatorParams memory params\\n        ) = getMigrateDelegatorParams(_l1Addr, _l2Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refunds to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateDelegatorInitiated(seqNo, params);\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to L2Migrator to migrate unbonding locks state from the L1 BondingManager.\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _unbondingLockIds IDs of unbonding locks in the L1 BondingManager to migrate\\n     * @param _sig Optional EIP-712 signature over a payload that includes _l1Addr, _l2Addr and _unbondingLockIds\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateUnbondingLocks(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] calldata _unbondingLockIds,\\n        bytes calldata _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        // Authorization\\n        // Either msg.sender == _l1Addr OR signer for _sig == _l1Addr\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(\\n                abi.encode(\\n                    MIGRATE_UNBONDING_LOCKS_TYPE_HASH,\\n                    _l1Addr,\\n                    _l2Addr,\\n                    keccak256(abi.encodePacked(_unbondingLockIds))\\n                )\\n            ),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateUnbondingLocksParams memory params\\n        ) = getMigrateUnbondingLocksParams(_l1Addr, _l2Addr, _unbondingLockIds);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateUnbondingLocksInitiated(seqNo, params);\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to L2Migrator to migrate sender deposit/reserve state from the L1 TicketBroker.\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _sig Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateSender(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes calldata _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        // Authorization\\n        // Either msg.sender == _l1Addr OR signer for _sig == _l1Addr\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(abi.encode(MIGRATE_SENDER_TYPE_HASH, _l1Addr, _l2Addr)),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateSenderParams memory params\\n        ) = getMigrateSenderParams(_l1Addr, _l2Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateSenderInitiated(seqNo, params);\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to send ETH from the L1BridgeMinter to the L2Migrator.\\n     * @dev Anyone can call this function.\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateETH(\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        uint256 amount = IBridgeMinter(bridgeMinterAddr)\\n            .withdrawETHToL1Migrator();\\n\\n        // Any ETH refunded to the L2 alias of this contract can be used for\\n        // other cross-chain txs sent by this contract.\\n        // The retryable ticket created will not be cancellable since this contract\\n        // currently does not support cross-chain txs to call ArbRetryableTx.cancel().\\n        // Regarding the comment below on this contract receiving refunds:\\n        // msg.sender also cannot be the address to receive refunds as beneficiary because otherwise\\n        // msg.sender could cancel the ticket before it is executed on L2 to receive the L2 call value.\\n        sendTxToL2(\\n            l2MigratorAddr,\\n            address(this), // L2 alias of this contract will receive refunds\\n            msg.value + amount,\\n            amount,\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to send LPT from the L1BridgeMinter to the L2Migrator.\\n     * @dev Anyone can call this function.\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateLPT(\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 amount = IBridgeMinter(bridgeMinterAddr)\\n            .withdrawLPTToL1Migrator();\\n\\n        // Approve L1LPTGateway to pull tokens\\n        ApproveLike(tokenAddr).approve(l1LPTGatewayAddr, amount);\\n        // Trigger cross-chain transfer with L1LPTGateway which will pull and escrow tokens\\n        // Forward msg.value to outboundTransfer() to be used for cross-chain tx\\n        IL1LPTGateway(l1LPTGatewayAddr).outboundTransfer{value: msg.value}(\\n            tokenAddr,\\n            l2MigratorAddr,\\n            amount,\\n            _maxGas,\\n            _gasPriceBid,\\n            abi.encode(_maxSubmissionCost, \\\"\\\")\\n        );\\n    }\\n\\n    /**\\n     * @notice Pause the contract\\n     * @dev Only callable by addresses with governor role\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract\\n     * @dev Only callable by addresses with governor role\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Return L2 calldata and MigrateDelegatorParams to use for a L2 call on L2Migrator\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @return data L2 calldata for finalizeMigrateDelegator() in L2Migrator\\n     * @return params MigrateDelegatorParams to use for finalizeMigrateDelegator() in L2Migrator\\n     */\\n    function getMigrateDelegatorParams(address _l1Addr, address _l2Addr)\\n        public\\n        view\\n        returns (bytes memory data, MigrateDelegatorParams memory params)\\n    {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        // pendingStake() will use current round if _endRound >= LIP-36 round\\n        // Using max uint256 guarantees that\\n        uint256 stake = bondingManager.pendingStake(_l1Addr, type(uint256).max);\\n        // pendingFees() will use current round if _endRound >= LIP-36 round\\n        // Using max uint256 guarantees that\\n        uint256 fees = bondingManager.pendingFees(_l1Addr, type(uint256).max);\\n        (\\n            ,\\n            ,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            ,\\n            ,\\n\\n        ) = bondingManager.getDelegator(_l1Addr);\\n\\n        // Construct params and L2 calldata for finalizeMigrateDelegator() on L2Migrator\\n        params = MigrateDelegatorParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            stake: stake,\\n            delegatedStake: delegatedAmount,\\n            fees: fees,\\n            delegate: delegateAddress\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateDelegator.selector,\\n            params\\n        );\\n    }\\n\\n    /**\\n     * @notice Return L2 calldata and MigrateSenderParams to use for a L2 call on L2Migrator\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @return data L2 calldata for finalizeMigrateSender() in L2Migrator\\n     * @return params MigrateSenderParams to use for finalizeMigrateSender() in L2Migrator\\n     */\\n    function getMigrateSenderParams(address _l1Addr, address _l2Addr)\\n        public\\n        view\\n        returns (bytes memory data, MigrateSenderParams memory params)\\n    {\\n        ITicketBroker ticketBroker = ITicketBroker(ticketBrokerAddr);\\n\\n        (\\n            ITicketBroker.Sender memory sender,\\n            ITicketBroker.ReserveInfo memory reserveInfo\\n        ) = ticketBroker.getSenderInfo(_l1Addr);\\n\\n        // Construct params and L2 calldata for finalizeMigrateSender() on L2Migrator\\n        params = MigrateSenderParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            deposit: sender.deposit,\\n            reserve: reserveInfo.fundsRemaining\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateSender.selector,\\n            params\\n        );\\n    }\\n\\n    /**\\n     * @notice Return L2 calldata and MigrateUnbondingLocksParams to use for a L2 call on L2Migrator\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _unbondingLockIds IDs of unbonding locks in L1 BondingManager to migrate\\n     * @return data L2 calldata for finalizeMigrateUnbondingLocks() in L2Migrator\\n     * @return params MigrateUnbondingLocksParams to use for finalizeMigrateUnbondingLocks() in L2Migrator\\n     */\\n    function getMigrateUnbondingLocksParams(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] memory _unbondingLockIds\\n    )\\n        public\\n        view\\n        returns (bytes memory data, MigrateUnbondingLocksParams memory params)\\n    {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        uint256 total;\\n        uint256 unbondingLockIdsLen = _unbondingLockIds.length;\\n        for (uint256 i; i < unbondingLockIdsLen; i++) {\\n            (uint256 amount, ) = bondingManager.getDelegatorUnbondingLock(\\n                _l1Addr,\\n                _unbondingLockIds[i]\\n            );\\n\\n            total += amount;\\n        }\\n\\n        (, , address delegateAddress, , , , ) = bondingManager.getDelegator(\\n            _l1Addr\\n        );\\n\\n        // Construct params and L2 calldata for finalizeMigrateUnbondingLocks() on L2Migrator\\n        params = MigrateUnbondingLocksParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            total: total,\\n            unbondingLockIds: _unbondingLockIds,\\n            delegate: delegateAddress\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateUnbondingLocks.selector,\\n            params\\n        );\\n    }\\n\\n    function requireValidMigration(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes32 _structHash,\\n        bytes memory _sig\\n    ) private view {\\n        require(_l2Addr != address(0), \\\"INVALID_L2_ADDR\\\");\\n        require(\\n            msg.sender == _l1Addr ||\\n                recoverSigner(_structHash, _sig) == _l1Addr,\\n            \\\"FAIL_AUTH\\\"\\n        );\\n    }\\n\\n    function recoverSigner(bytes32 _structHash, bytes memory _sig)\\n        private\\n        view\\n        returns (address)\\n    {\\n        bytes32 hash = _hashTypedDataV4(_structHash);\\n        return ECDSA.recover(hash, _sig);\\n    }\\n}\\n\",\"keccak256\":\"0xfdde767c7dfd96f85763f52efc3c4a3c46ad45b15077e23a1852d9e5b16e9322\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.8;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x87f169e1322a381c270197b1dee363de9824a7db88469443a5bef81d234ea8a1\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.8;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x60bf19e9cd032d055458f984a10c6b8e498ddef8efb8732198f889e9a033cc5e\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.8;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0xc8cbdd7ca6198796e44f2bb30f5acc9f254ead1f32c99ee16a1b99ab42d03520\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.8;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths\\n    ) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x793f70e523a2bbfa704d6b06852a7f140ab5a9ce84e6bd41e8271bc972c67d7a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\ninterface IMigrator {\\n    struct MigrateDelegatorParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Stake of l1Addr on L1\\n        uint256 stake;\\n        // Delegated stake of l1Addr on L1\\n        uint256 delegatedStake;\\n        // Fees of l1Addr on L1\\n        uint256 fees;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateUnbondingLocksParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Total tokens in unbonding locks\\n        uint256 total;\\n        // IDs of unbonding locks being migrated\\n        uint256[] unbondingLockIds;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateSenderParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Deposit of l1Addr on L1\\n        uint256 deposit;\\n        // Reserve of l1Addr on L1\\n        uint256 reserve;\\n    }\\n}\\n\",\"keccak256\":\"0x1502c88d248ceca64cb2e2003fd522128e4ffeef1ac89484fc5268f34ebb57ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102606040527f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f610200908152507f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f711697610220908152507f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f610240908152503480156200008a57600080fd5b5060405162004d1138038062004d118339818101604052810190620000b0919062000687565b6040518060400160405280601381526020017f4c69766570656572204c314d69677261746f72000000000000000000000000008152506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250888073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508261010081815250508161012081815250504660c08181525050620001bf818484620003b060201b60201c565b60a081815250503073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080610140818152505050505050506000600160006101000a81548160ff0219169083151502179055506200023b6000801b33620003ec60201b60201c565b8573ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1660601b815250508473ffffffffffffffffffffffffffffffffffffffff166101808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508373ffffffffffffffffffffffffffffffffffffffff166101a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff166101e08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003a3620004dd60201b60201c565b505050505050506200087e565b60008383834630604051602001620003cd95949392919062000781565b6040516020818303038152906040528051906020012090509392505050565b620003fe82826200059460201b60201c565b620004d957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200047e620005fe60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b620004ed6200060660201b60201c565b1562000530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000527906200083f565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586200057b620005fe60201b60201c565b6040516200058a919062000861565b60405180910390a1565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000600160009054906101000a900460ff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200064f8262000622565b9050919050565b620006618162000642565b81146200066d57600080fd5b50565b600081519050620006818162000656565b92915050565b600080600080600080600060e0888a031215620006a957620006a86200061d565b5b6000620006b98a828b0162000670565b9750506020620006cc8a828b0162000670565b9650506040620006df8a828b0162000670565b9550506060620006f28a828b0162000670565b9450506080620007058a828b0162000670565b93505060a0620007188a828b0162000670565b92505060c06200072b8a828b0162000670565b91505092959891949750929550565b6000819050919050565b6200074f816200073a565b82525050565b6000819050919050565b6200076a8162000755565b82525050565b6200077b8162000642565b82525050565b600060a08201905062000798600083018862000744565b620007a7602083018762000744565b620007b6604083018662000744565b620007c560608301856200075f565b620007d4608083018462000770565b9695505050505050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600062000827601083620007de565b91506200083482620007ef565b602082019050919050565b600060208201905081810360008301526200085a8162000818565b9050919050565b600060208201905062000878600083018462000770565b92915050565b60805160601c60a05160c05160e05160601c6101005161012051610140516101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c6102005161022051610240516143856200098c6000396000611836015260006106ef015260006110d40152600081816110280152818161157a01526115eb0152600081816110630152818161153e015261162801526000818161065f01528181610f35015261149c01526000818161121001526112aa0152600081816108ae01528181610c4801526119520152600061236f015260006123b101526000612390015260006122c50152600061231b015260006123440152600081816119760152611e5101526143856000f3fe6080604052600436106101855760003560e01c806378da3574116100d1578063a375fa521161008a578063de1ec2d611610064578063de1ec2d614610546578063e40309ca14610571578063e89320e51461058d578063fb0e722b146105b85761018c565b8063a375fa52146104d8578063d547741f146104f4578063d98ef0701461051d5761018c565b806378da3574146103d45780638456cb59146103f05780638f2c17ed1461040757806391d14854146104325780639ca228bc1461046f578063a217fddf146104ad5761018c565b806336568abe1161013e578063518fe44611610118578063518fe4461461033757806359d95915146103535780635c975abb1461037e5780635fbe4d1d146103a95761018c565b806336568abe146102b957806336e9feb9146102e25780633f4ba83a146103205761018c565b806301ffc9a714610191578063236cc70c146101ce578063248a9ca3146101f957806328293d51146102365780632f2ff15d14610252578063329b114e1461027b5761018c565b3661018c57005b600080fd5b34801561019d57600080fd5b506101b860048036038101906101b391906129a4565b6105e3565b6040516101c591906129ec565b60405180910390f35b3480156101da57600080fd5b506101e361065d565b6040516101f09190612a48565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190612a99565b610681565b60405161022d9190612ad5565b60405180910390f35b610250600480360381019061024b9190612c0d565b6106a0565b005b34801561025e57600080fd5b5061027960048036038101906102749190612cef565b610877565b005b34801561028757600080fd5b506102a2600480360381019061029d9190612d2f565b6108a0565b6040516102b0929190612ea1565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190612cef565b610bb7565b005b3480156102ee57600080fd5b506103096004803603810190610304919061300f565b610c3a565b6040516103179291906131a3565b60405180910390f35b34801561032c57600080fd5b50610335610ec9565b005b610351600480360381019061034c91906131da565b610ee9565b005b34801561035f57600080fd5b50610368611026565b6040516103759190612a48565b60405180910390f35b34801561038a57600080fd5b5061039361104a565b6040516103a091906129ec565b60405180910390f35b3480156103b557600080fd5b506103be611061565b6040516103cb9190612a48565b60405180910390f35b6103ee60048036038101906103e9919061322d565b611085565b005b3480156103fc57600080fd5b506104056111ee565b005b34801561041357600080fd5b5061041c61120e565b6040516104299190612a48565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190612cef565b611232565b60405161046691906129ec565b60405180910390f35b34801561047b57600080fd5b5061049660048036038101906104919190612d2f565b61129c565b6040516104a4929190613331565b60405180910390f35b3480156104b957600080fd5b506104c2611434565b6040516104cf9190612ad5565b60405180910390f35b6104f260048036038101906104ed91906131da565b61143b565b005b34801561050057600080fd5b5061051b60048036038101906105169190612cef565b61170b565b005b34801561052957600080fd5b50610544600480360381019061053f9190613361565b611734565b005b34801561055257600080fd5b5061055b6117c3565b6040516105689190612a48565b60405180910390f35b61058b6004803603810190610586919061322d565b6117e7565b005b34801561059957600080fd5b506105a2611950565b6040516105af9190612a48565b60405180910390f35b3480156105c457600080fd5b506105cd611974565b6040516105da91906133ed565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610656575061065582611998565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b6106a861104a565b156106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df90613465565b60405180910390fd5b6107ac89897f00000000000000000000000000000000000000000000000000000000000000008c8c8c8c604051602001610723929190613500565b6040516020818303038152906040528051906020012060405160200161074c9493929190613519565b6040516020818303038152906040528051906020012088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611a02565b6000806107fb8b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050610c3a565b91509150600061082f60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c86898988611b25565b9050807f68d9b81e798c334d0daecab33df19f49cbc17c77cc19f4bcb772318e1931659583604051610861919061355e565b60405180910390a2505050505050505050505050565b61088082610681565b6108918161088c611b44565b611b4c565b61089b8383611be9565b505050565b60606108aa6127fb565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161092c92919061358f565b60206040518083038186803b15801561094457600080fd5b505afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c91906135cd565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109db92919061358f565b60206040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b91906135cd565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958a6040518263ffffffff1660e01b8152600401610a699190612a48565b60e06040518083038186803b158015610a8157600080fd5b505afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab9919061360f565b5050509350935050506040518060c001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018281526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152509550631a0725d860e01b86604051602401610b4c91906136b1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050965050505050509250929050565b610bbf611b44565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c239061373e565b60405180910390fd5b610c368282611cc9565b5050565b6060610c44612873565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808551905060005b81811015610d465760008473ffffffffffffffffffffffffffffffffffffffff1663412f83b68b8a8581518110610cad57610cac61375e565b5b60200260200101516040518363ffffffff1660e01b8152600401610cd292919061358f565b604080518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d21919061378d565b5090508084610d3091906137fc565b9350508080610d3e90613852565b915050610c73565b5060008373ffffffffffffffffffffffffffffffffffffffff1663a64ad5958a6040518263ffffffff1660e01b8152600401610d829190612a48565b60e06040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd2919061360f565b50505050925050506040518060a001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018881526020018273ffffffffffffffffffffffffffffffffffffffff16815250945063cc14c98860e01b85604051602401610e5e919061355e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050955050505050935093915050565b6000801b610ede81610ed9611b44565b611b4c565b610ee6611daa565b50565b610ef161104a565b15610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890613465565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa0946cd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd391906135cd565b905061101f60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630833461100691906137fc565b8486898960405180602001604052806000815250611e4c565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b61108d61104a565b156110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c490613465565b60405180910390fd5b61116787877f00000000000000000000000000000000000000000000000000000000000000008a8a6040516020016111079392919061389b565b6040516020818303038152906040528051906020012088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611a02565b60008061117489896108a0565b9150915060006111a860018054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a86898988611b25565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb836040516111da91906136b1565b60405180910390a250505050505050505050565b6000801b611203816111fe611b44565b611b4c565b61120b611f81565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606112a66128e4565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da886040518263ffffffff1660e01b81526004016113079190612a48565b60806040518083038186803b15801561131f57600080fd5b505afa158015611333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113579190613977565b9150915060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001836000015181526020018260000151815250935063b3f5ccae60e01b846040516024016113cb91906139b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050509250929050565b6000801b81565b61144361104a565b15611483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147a90613465565b60405180910390fd5b6000801b61149881611493611b44565b611b4c565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634235dfbc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561150257600080fd5b505af1158015611516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153a91906135cd565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016115b792919061358f565b600060405180830381600087803b1580156115d157600080fd5b505af11580156115e5573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2ce7d65347f000000000000000000000000000000000000000000000000000000000000000060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858a8a8a60405160200161167c91906139f8565b6040516020818303038152906040526040518863ffffffff1660e01b81526004016116ac96959493929190613a26565b6000604051808303818588803b1580156116c557600080fd5b505af11580156116d9573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906117039190613b34565b505050505050565b61171482610681565b61172581611720611b44565b611b4c565b61172f8383611cc9565b505050565b6000801b61174981611744611b44565b611b4c565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ea3e68d24bc6eb4dd4990f8ed051d3def10558c0165ac8a9a61535fdd5af390826040516117b79190612a48565b60405180910390a15050565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117ef61104a565b1561182f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182690613465565b60405180910390fd5b6118c987877f00000000000000000000000000000000000000000000000000000000000000008a8a6040516020016118699392919061389b565b6040516020818303038152906040528051906020012088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611a02565b6000806118d6898961129c565b91509150600061190a60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a86898988611b25565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b38360405161193c91906139b7565b60405180910390a250505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6990613bc9565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ae057508373ffffffffffffffffffffffffffffffffffffffff16611ac88383612023565b73ffffffffffffffffffffffffffffffffffffffff16145b611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1690613c35565b60405180910390fd5b50505050565b6000611b38878734600089898989611e4c565b90509695505050505050565b600033905090565b611b568282611232565b611be557611b7b8173ffffffffffffffffffffffffffffffffffffffff166014612044565b611b898360001c6020612044565b604051602001611b9a929190613d34565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdc9190613da7565b60405180910390fd5b5050565b611bf38282611232565b611cc557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c6a611b44565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611cd38282611232565b15611da657600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611d4b611b44565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611db261104a565b611df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de890613e15565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e35611b44565b604051611e429190612a48565b60405180910390a1565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded898c8a8a8e8f8c8c8c6040518a63ffffffff1660e01b8152600401611eb7989796959493929190613e35565b6020604051808303818588803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611f0991906135cd565b9050808a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051611f699190613eba565b60405180910390a48091505098975050505050505050565b611f8961104a565b15611fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc090613465565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861200c611b44565b6040516120199190612a48565b60405180910390a1565b60008061202f84612280565b905061203b818461229a565b91505092915050565b6060600060028360026120579190613edc565b61206191906137fc565b67ffffffffffffffff81111561207a57612079612ed1565b5b6040519080825280601f01601f1916602001820160405280156120ac5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120e4576120e361375e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106121485761214761375e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026121889190613edc565b61219291906137fc565b90505b6001811115612232577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121d4576121d361375e565b5b1a60f81b8282815181106121eb576121ea61375e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061222b90613f36565b9050612195565b5060008414612276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226d90613fac565b60405180910390fd5b8091505092915050565b600061229361228d6122c1565b836123db565b9050919050565b60008060006122a9858561240e565b915091506122b681612491565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561233d57507f000000000000000000000000000000000000000000000000000000000000000046145b1561236a577f000000000000000000000000000000000000000000000000000000000000000090506123d8565b6123d57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612666565b90505b90565b600082826040516020016123f0929190614039565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156124505760008060006020860151925060408601519150606086015160001a9050612444878285856126a0565b9450945050505061248a565b6040835114156124815760008060208501519150604085015190506124768683836127ad565b93509350505061248a565b60006002915091505b9250929050565b600060048111156124a5576124a4614070565b5b8160048111156124b8576124b7614070565b5b14156124c357612663565b600160048111156124d7576124d6614070565b5b8160048111156124ea576124e9614070565b5b141561252b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612522906140eb565b60405180910390fd5b6002600481111561253f5761253e614070565b5b81600481111561255257612551614070565b5b1415612593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258a90614157565b60405180910390fd5b600360048111156125a7576125a6614070565b5b8160048111156125ba576125b9614070565b5b14156125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f2906141e9565b60405180910390fd5b60048081111561260e5761260d614070565b5b81600481111561262157612620614070565b5b1415612662576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126599061427b565b60405180910390fd5b5b50565b6000838383463060405160200161268195949392919061429b565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156126db5760006003915091506127a4565b601b8560ff16141580156126f35750601c8560ff1614155b156127055760006004915091506127a4565b60006001878787876040516000815260200160405260405161272a949392919061430a565b6020604051602081039080840390855afa15801561274c573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561279b576000600192509250506127a4565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506127ed878288856126a0565b935093505050935093915050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6129818161294c565b811461298c57600080fd5b50565b60008135905061299e81612978565b92915050565b6000602082840312156129ba576129b9612942565b5b60006129c88482850161298f565b91505092915050565b60008115159050919050565b6129e6816129d1565b82525050565b6000602082019050612a0160008301846129dd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a3282612a07565b9050919050565b612a4281612a27565b82525050565b6000602082019050612a5d6000830184612a39565b92915050565b6000819050919050565b612a7681612a63565b8114612a8157600080fd5b50565b600081359050612a9381612a6d565b92915050565b600060208284031215612aaf57612aae612942565b5b6000612abd84828501612a84565b91505092915050565b612acf81612a63565b82525050565b6000602082019050612aea6000830184612ac6565b92915050565b612af981612a27565b8114612b0457600080fd5b50565b600081359050612b1681612af0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612b4157612b40612b1c565b5b8235905067ffffffffffffffff811115612b5e57612b5d612b21565b5b602083019150836020820283011115612b7a57612b79612b26565b5b9250929050565b60008083601f840112612b9757612b96612b1c565b5b8235905067ffffffffffffffff811115612bb457612bb3612b21565b5b602083019150836001820283011115612bd057612bcf612b26565b5b9250929050565b6000819050919050565b612bea81612bd7565b8114612bf557600080fd5b50565b600081359050612c0781612be1565b92915050565b600080600080600080600080600060e08a8c031215612c2f57612c2e612942565b5b6000612c3d8c828d01612b07565b9950506020612c4e8c828d01612b07565b98505060408a013567ffffffffffffffff811115612c6f57612c6e612947565b5b612c7b8c828d01612b2b565b975097505060608a013567ffffffffffffffff811115612c9e57612c9d612947565b5b612caa8c828d01612b81565b95509550506080612cbd8c828d01612bf8565b93505060a0612cce8c828d01612bf8565b92505060c0612cdf8c828d01612bf8565b9150509295985092959850929598565b60008060408385031215612d0657612d05612942565b5b6000612d1485828601612a84565b9250506020612d2585828601612b07565b9150509250929050565b60008060408385031215612d4657612d45612942565b5b6000612d5485828601612b07565b9250506020612d6585828601612b07565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612da9578082015181840152602081019050612d8e565b83811115612db8576000848401525b50505050565b6000601f19601f8301169050919050565b6000612dda82612d6f565b612de48185612d7a565b9350612df4818560208601612d8b565b612dfd81612dbe565b840191505092915050565b612e1181612a27565b82525050565b612e2081612bd7565b82525050565b60c082016000820151612e3c6000850182612e08565b506020820151612e4f6020850182612e08565b506040820151612e626040850182612e17565b506060820151612e756060850182612e17565b506080820151612e886080850182612e17565b5060a0820151612e9b60a0850182612e08565b50505050565b600060e0820190508181036000830152612ebb8185612dcf565b9050612eca6020830184612e26565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f0982612dbe565b810181811067ffffffffffffffff82111715612f2857612f27612ed1565b5b80604052505050565b6000612f3b612938565b9050612f478282612f00565b919050565b600067ffffffffffffffff821115612f6757612f66612ed1565b5b602082029050602081019050919050565b6000612f8b612f8684612f4c565b612f31565b90508083825260208201905060208402830185811115612fae57612fad612b26565b5b835b81811015612fd75780612fc38882612bf8565b845260208401935050602081019050612fb0565b5050509392505050565b600082601f830112612ff657612ff5612b1c565b5b8135613006848260208601612f78565b91505092915050565b60008060006060848603121561302857613027612942565b5b600061303686828701612b07565b935050602061304786828701612b07565b925050604084013567ffffffffffffffff81111561306857613067612947565b5b61307486828701612fe1565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006130b68383612e17565b60208301905092915050565b6000602082019050919050565b60006130da8261307e565b6130e48185613089565b93506130ef8361309a565b8060005b8381101561312057815161310788826130aa565b9750613112836130c2565b9250506001810190506130f3565b5085935050505092915050565b600060a0830160008301516131456000860182612e08565b5060208301516131586020860182612e08565b50604083015161316b6040860182612e17565b506060830151848203606086015261318382826130cf565b91505060808301516131986080860182612e08565b508091505092915050565b600060408201905081810360008301526131bd8185612dcf565b905081810360208301526131d1818461312d565b90509392505050565b6000806000606084860312156131f3576131f2612942565b5b600061320186828701612bf8565b935050602061321286828701612bf8565b925050604061322386828701612bf8565b9150509250925092565b600080600080600080600060c0888a03121561324c5761324b612942565b5b600061325a8a828b01612b07565b975050602061326b8a828b01612b07565b965050604088013567ffffffffffffffff81111561328c5761328b612947565b5b6132988a828b01612b81565b955095505060606132ab8a828b01612bf8565b93505060806132bc8a828b01612bf8565b92505060a06132cd8a828b01612bf8565b91505092959891949750929550565b6080820160008201516132f26000850182612e08565b5060208201516133056020850182612e08565b5060408201516133186040850182612e17565b50606082015161332b6060850182612e17565b50505050565b600060a082019050818103600083015261334b8185612dcf565b905061335a60208301846132dc565b9392505050565b60006020828403121561337757613376612942565b5b600061338584828501612b07565b91505092915050565b6000819050919050565b60006133b36133ae6133a984612a07565b61338e565b612a07565b9050919050565b60006133c582613398565b9050919050565b60006133d7826133ba565b9050919050565b6133e7816133cc565b82525050565b600060208201905061340260008301846133de565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061344f601083613408565b915061345a82613419565b602082019050919050565b6000602082019050818103600083015261347e81613442565b9050919050565b600081905092915050565b600080fd5b82818337600083830152505050565b60006134b08385613485565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156134e3576134e2613490565b5b6020830292506134f4838584613495565b82840190509392505050565b600061350d8284866134a4565b91508190509392505050565b600060808201905061352e6000830187612ac6565b61353b6020830186612a39565b6135486040830185612a39565b6135556060830184612ac6565b95945050505050565b60006020820190508181036000830152613578818461312d565b905092915050565b61358981612bd7565b82525050565b60006040820190506135a46000830185612a39565b6135b16020830184613580565b9392505050565b6000815190506135c781612be1565b92915050565b6000602082840312156135e3576135e2612942565b5b60006135f1848285016135b8565b91505092915050565b60008151905061360981612af0565b92915050565b600080600080600080600060e0888a03121561362e5761362d612942565b5b600061363c8a828b016135b8565b975050602061364d8a828b016135b8565b965050604061365e8a828b016135fa565b955050606061366f8a828b016135b8565b94505060806136808a828b016135b8565b93505060a06136918a828b016135b8565b92505060c06136a28a828b016135b8565b91505092959891949750929550565b600060c0820190506136c66000830184612e26565b92915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613728602f83613408565b9150613733826136cc565b604082019050919050565b600060208201905081810360008301526137578161371b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080604083850312156137a4576137a3612942565b5b60006137b2858286016135b8565b92505060206137c3858286016135b8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061380782612bd7565b915061381283612bd7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613847576138466137cd565b5b828201905092915050565b600061385d82612bd7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138905761388f6137cd565b5b600182019050919050565b60006060820190506138b06000830186612ac6565b6138bd6020830185612a39565b6138ca6040830184612a39565b949350505050565b600080fd5b6000604082840312156138ed576138ec6138d2565b5b6138f76040612f31565b90506000613907848285016135b8565b600083015250602061391b848285016135b8565b60208301525092915050565b60006040828403121561393d5761393c6138d2565b5b6139476040612f31565b90506000613957848285016135b8565b600083015250602061396b848285016135b8565b60208301525092915050565b6000806080838503121561398e5761398d612942565b5b600061399c858286016138d7565b92505060406139ad85828601613927565b9150509250929050565b60006080820190506139cc60008301846132dc565b92915050565b50565b60006139e2600083613408565b91506139ed826139d2565b600082019050919050565b6000604082019050613a0d6000830184613580565b8181036020830152613a1e816139d5565b905092915050565b600060c082019050613a3b6000830189612a39565b613a486020830188612a39565b613a556040830187613580565b613a626060830186613580565b613a6f6080830185613580565b81810360a0830152613a818184612dcf565b9050979650505050505050565b600080fd5b600067ffffffffffffffff821115613aae57613aad612ed1565b5b613ab782612dbe565b9050602081019050919050565b6000613ad7613ad284613a93565b612f31565b905082815260208101848484011115613af357613af2613a8e565b5b613afe848285612d8b565b509392505050565b600082601f830112613b1b57613b1a612b1c565b5b8151613b2b848260208601613ac4565b91505092915050565b600060208284031215613b4a57613b49612942565b5b600082015167ffffffffffffffff811115613b6857613b67612947565b5b613b7484828501613b06565b91505092915050565b7f494e56414c49445f4c325f414444520000000000000000000000000000000000600082015250565b6000613bb3600f83613408565b9150613bbe82613b7d565b602082019050919050565b60006020820190508181036000830152613be281613ba6565b9050919050565b7f4641494c5f415554480000000000000000000000000000000000000000000000600082015250565b6000613c1f600983613408565b9150613c2a82613be9565b602082019050919050565b60006020820190508181036000830152613c4e81613c12565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613c96601783613c55565b9150613ca182613c60565b601782019050919050565b600081519050919050565b6000613cc282613cac565b613ccc8185613c55565b9350613cdc818560208601612d8b565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613d1e601183613c55565b9150613d2982613ce8565b601182019050919050565b6000613d3f82613c89565b9150613d4b8285613cb7565b9150613d5682613d11565b9150613d628284613cb7565b91508190509392505050565b6000613d7982613cac565b613d838185613408565b9350613d93818560208601612d8b565b613d9c81612dbe565b840191505092915050565b60006020820190508181036000830152613dc18184613d6e565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613dff601483613408565b9150613e0a82613dc9565b602082019050919050565b60006020820190508181036000830152613e2e81613df2565b9050919050565b600061010082019050613e4b600083018b612a39565b613e58602083018a613580565b613e656040830189613580565b613e726060830188612a39565b613e7f6080830187612a39565b613e8c60a0830186613580565b613e9960c0830185613580565b81810360e0830152613eab8184612dcf565b90509998505050505050505050565b60006020820190508181036000830152613ed48184612dcf565b905092915050565b6000613ee782612bd7565b9150613ef283612bd7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f2b57613f2a6137cd565b5b828202905092915050565b6000613f4182612bd7565b91506000821415613f5557613f546137cd565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613f96602083613408565b9150613fa182613f60565b602082019050919050565b60006020820190508181036000830152613fc581613f89565b9050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614002600283613c55565b915061400d82613fcc565b600282019050919050565b6000819050919050565b61403361402e82612a63565b614018565b82525050565b600061404482613ff5565b91506140508285614022565b6020820191506140608284614022565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006140d5601883613408565b91506140e08261409f565b602082019050919050565b60006020820190508181036000830152614104816140c8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000614141601f83613408565b915061414c8261410b565b602082019050919050565b6000602082019050818103600083015261417081614134565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006141d3602283613408565b91506141de82614177565b604082019050919050565b60006020820190508181036000830152614202816141c6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000614265602283613408565b915061427082614209565b604082019050919050565b6000602082019050818103600083015261429481614258565b9050919050565b600060a0820190506142b06000830188612ac6565b6142bd6020830187612ac6565b6142ca6040830186612ac6565b6142d76060830185613580565b6142e46080830184612a39565b9695505050505050565b600060ff82169050919050565b614304816142ee565b82525050565b600060808201905061431f6000830187612ac6565b61432c60208301866142fb565b6143396040830185612ac6565b6143466060830184612ac6565b9594505050505056fea264697066735822122069245106ff51a5fb705abbd35635f913a39898d16b0a197e99dfbf326302aa8864736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMigrateDelegatorParams(address,address)": {
        "params": {
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2"
        },
        "returns": {
          "data": "L2 calldata for finalizeMigrateDelegator() in L2Migrator",
          "params": "MigrateDelegatorParams to use for finalizeMigrateDelegator() in L2Migrator"
        }
      },
      "getMigrateSenderParams(address,address)": {
        "params": {
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2"
        },
        "returns": {
          "data": "L2 calldata for finalizeMigrateSender() in L2Migrator",
          "params": "MigrateSenderParams to use for finalizeMigrateSender() in L2Migrator"
        }
      },
      "getMigrateUnbondingLocksParams(address,address,uint256[])": {
        "params": {
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_unbondingLockIds": "IDs of unbonding locks in L1 BondingManager to migrate"
        },
        "returns": {
          "data": "L2 calldata for finalizeMigrateUnbondingLocks() in L2Migrator",
          "params": "MigrateUnbondingLocksParams to use for finalizeMigrateUnbondingLocks() in L2Migrator"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateDelegator(address,address,bytes,uint256,uint256,uint256)": {
        "details": "The term \"delegator\" here can refer to both a transcoder (self-delegated delegator) and delegator.",
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee",
          "_sig": "Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr"
        }
      },
      "migrateETH(uint256,uint256,uint256)": {
        "details": "Anyone can call this function.",
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee"
        }
      },
      "migrateLPT(uint256,uint256,uint256)": {
        "details": "Anyone can call this function.",
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee"
        }
      },
      "migrateSender(address,address,bytes,uint256,uint256,uint256)": {
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee",
          "_sig": "Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr"
        }
      },
      "migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)": {
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee",
          "_sig": "Optional EIP-712 signature over a payload that includes _l1Addr, _l2Addr and _unbondingLockIds",
          "_unbondingLockIds": "IDs of unbonding locks in the L1 BondingManager to migrate"
        }
      },
      "pause()": {
        "details": "Only callable by addresses with governor role"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setL2Migrator(address)": {
        "params": {
          "_l2MigratorAddr": "L2Migrator address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Only callable by addresses with governor role"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getMigrateDelegatorParams(address,address)": {
        "notice": "Return L2 calldata and MigrateDelegatorParams to use for a L2 call on L2Migrator"
      },
      "getMigrateSenderParams(address,address)": {
        "notice": "Return L2 calldata and MigrateSenderParams to use for a L2 call on L2Migrator"
      },
      "getMigrateUnbondingLocksParams(address,address,uint256[])": {
        "notice": "Return L2 calldata and MigrateUnbondingLocksParams to use for a L2 call on L2Migrator"
      },
      "migrateDelegator(address,address,bytes,uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to L2Migrator to migrate transcoder/delegator state from the L1 BondingManager."
      },
      "migrateETH(uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to send ETH from the L1BridgeMinter to the L2Migrator."
      },
      "migrateLPT(uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to send LPT from the L1BridgeMinter to the L2Migrator."
      },
      "migrateSender(address,address,bytes,uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to L2Migrator to migrate sender deposit/reserve state from the L1 TicketBroker."
      },
      "migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to L2Migrator to migrate unbonding locks state from the L1 BondingManager."
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setL2Migrator(address)": {
        "notice": "Sets L2Migrator"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 343,
        "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)338_storage)"
      },
      {
        "astId": 903,
        "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3860,
        "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
        "label": "l2MigratorAddr",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)338_storage"
      },
      "t_struct(RoleData)338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 337,
            "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}