{
  "address": "0x7cfB164BDdB051da1CF6d66B1395dA0FBB18E749",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondingManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticketBrokerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2MigratorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateDelegatorInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateSenderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateUnbondingLocksInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bondingManagerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MigratorAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateUnbondingLocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBrokerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ec41edd4ad3ae0d7309c2cc2985af886262cadee584ae06e798e7c8fbf50710",
  "receipt": {
    "to": null,
    "from": "0xC96f6B72843Af1988C98F78eAB3E47673af63eA1",
    "contractAddress": "0x7cfB164BDdB051da1CF6d66B1395dA0FBB18E749",
    "transactionIndex": 44,
    "gasUsed": "2096292",
    "logsBloom": "0x
    "blockHash": "0xaee162a781237fa3b008b0082cc0fdf58b0a497e38107c3a8f322ec3cd16ef68",
    "transactionHash": "0x8ec41edd4ad3ae0d7309c2cc2985af886262cadee584ae06e798e7c8fbf50710",
    "logs": [],
    "blockNumber": 9819079,
    "cumulativeGasUsed": "12559104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x578BAde599406A8fE3d24Fd7f7211c0911F5B29e",
    "0x595ab11a0bffbca8134d2105bcf985e85732af5c",
    "0xbc10683cf0d6c1152f80e9954701bec1e7dd1648",
    "0x49a8B5Fbe9AC1ddcE947d951a36376A33f7d5c19"
  ],
  "solcInputHash": "6871bf33593674a53c637fe333e529f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketBrokerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2MigratorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateDelegatorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateSenderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateUnbondingLocksInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bondingManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MigratorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateUnbondingLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBrokerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/gateway/L1Migrator.sol\":\"L1Migrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBridge} from \\\"../../arbitrum/IBridge.sol\\\";\\nimport {IInbox} from \\\"../../arbitrum/IInbox.sol\\\";\\nimport {IOutbox} from \\\"../../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1ArbitrumMessenger {\\n    IInbox public immutable inbox;\\n\\n    event TxToL2(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed seqNum,\\n        bytes data\\n    );\\n\\n    constructor(address _inbox) {\\n        inbox = IInbox(_inbox);\\n    }\\n\\n    modifier onlyL2Counterpart(address l2Counterpart) {\\n        // a message coming from the counterpart gateway was executed by the bridge\\n        address bridge = inbox.bridge();\\n        require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\\n            .l2ToL1Sender();\\n        require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address user,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        uint256 seqNum = inbox.createRetryableTicket{value: msg.value}(\\n            target,\\n            0, // we always assume that l2CallValue = 0\\n            maxSubmissionCost,\\n            user,\\n            user,\\n            maxGas,\\n            gasPriceBid,\\n            data\\n        );\\n        emit TxToL2(user, target, seqNum, data);\\n        return seqNum;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b1123e920abe7b622858fd2666dadcbeef3b26f2bb94cb2a8df172dea3e0cd\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {L1ArbitrumMessenger} from \\\"./L1ArbitrumMessenger.sol\\\";\\nimport {IMigrator} from \\\"../../interfaces/IMigrator.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\ninterface IBondingManager {\\n    function isRegisteredTranscoder(address _addr) external view returns (bool);\\n    function pendingStake(address _addr, uint256 _endRound) external view returns (uint256);\\n    function pendingFees(address _addr, uint256 _endRound) external view returns (uint256);\\n    function getDelegator(address _addr) external view returns (\\n        uint256 bondedAmount,\\n        uint256 fees,\\n        address delegateAddress,\\n        uint256 delegatedAmount,\\n        uint256 startRound,\\n        uint256 lastClaimRound,\\n        uint256 nextUnbondingLockId\\n    );\\n    function getDelegatorUnbondingLock(\\n        address _addr,\\n        uint256 _unbondingLockId\\n    ) external view returns (uint256 amount, uint256 withdrawRound);\\n}\\n\\ninterface ITicketBroker {\\n    struct Sender {\\n        uint256 deposit;\\n        uint256 withdrawRound;\\n    }\\n\\n    struct ReserveInfo {\\n        uint256 fundsRemaining;\\n        uint256 claimedInCurrentRound;\\n    }\\n\\n    function getSenderInfo(address _addr)\\n        external\\n        view\\n        returns (\\n            Sender memory sender,\\n            ReserveInfo memory reserve\\n        );\\n}\\n\\ninterface IL2Migrator is IMigrator {\\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params) external;\\n    function finalizeMigrateUnbondingLocks(MigrateUnbondingLocksParams memory _params) external;\\n    function finalizeMigrateSender(MigrateSenderParams memory _params) external;\\n}\\n\\ncontract L1Migrator is L1ArbitrumMessenger, IMigrator, EIP712 {\\n    address public immutable bondingManagerAddr;\\n    address public immutable ticketBrokerAddr;\\n    address public immutable l2MigratorAddr;\\n\\n    event MigrateDelegatorInitiated(\\n        uint256 indexed seqNo,\\n        MigrateDelegatorParams params\\n    );\\n\\n    event MigrateUnbondingLocksInitiated(\\n        uint256 indexed seqNo,\\n        MigrateUnbondingLocksParams params\\n    );\\n\\n    event MigrateSenderInitiated(\\n        uint256 indexed seqNo,\\n        MigrateSenderParams params\\n    );\\n\\n    bytes32 private constant MIGRATE_DELEGATOR_TYPE_HASH = \\n        keccak256(\\\"MigrateDelegator(address l1Addr,address l2Addr)\\\");\\n\\n    bytes32 private constant MIGRATE_UNBONDING_LOCKS_TYPE_HASH = \\n        keccak256(\\\"MigrateUnbondingLocks(address l1Addr,address l2Addr,uint256[] unbondingLockIds)\\\");\\n\\n    bytes32 private constant MIGRATE_SENDER_TYPE_HASH = \\n        keccak256(\\\"MigrateSender(address l1Addr,address l2Addr)\\\");\\n\\n    constructor(\\n        address _inbox,\\n        address _bondingManagerAddr,\\n        address _ticketBrokerAddr,\\n        address _l2MigratorAddr\\n    ) L1ArbitrumMessenger(_inbox) EIP712(\\\"Livepeer L1Migrator\\\", \\\"1\\\") {\\n        bondingManagerAddr = _bondingManagerAddr;\\n        ticketBrokerAddr = _ticketBrokerAddr;\\n        l2MigratorAddr = _l2MigratorAddr;\\n    }\\n\\n    function migrateDelegator(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    )\\n        external\\n    {\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(abi.encode(\\n                MIGRATE_DELEGATOR_TYPE_HASH,\\n                _l1Addr,\\n                _l2Addr\\n            )),\\n            _sig\\n        );\\n\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        // pendingStake() ignores the _endRound arg\\n        uint256 stake = bondingManager.pendingStake(_l1Addr, 0);\\n        // pendingFees() ignores the _endRound arg\\n        uint256 fees = bondingManager.pendingFees(_l1Addr, 0);\\n        (\\n            ,\\n            ,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            ,\\n            ,\\n        ) = bondingManager.getDelegator(_l1Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        // Call finalizeMigrateDelegator() on L2Migrator\\n        MigrateDelegatorParams memory params = MigrateDelegatorParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            stake: stake,\\n            delegatedStake: delegatedAmount,\\n            fees: fees,\\n            delegate: delegateAddress\\n        });\\n        bytes memory data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateDelegator.selector,\\n            params\\n        );\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refunds to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateDelegatorInitiated(seqNo, params);\\n    }\\n\\n    function migrateUnbondingLocks(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] calldata _unbondingLockIds,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    )\\n        external\\n    {\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(abi.encode(\\n                MIGRATE_UNBONDING_LOCKS_TYPE_HASH,\\n                _l1Addr,\\n                _l2Addr,\\n                keccak256(abi.encodePacked(_unbondingLockIds))\\n            )),\\n            _sig\\n        );\\n\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr); \\n\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _unbondingLockIds.length; i++) {\\n            (\\n                uint256 amount,\\n            ) = bondingManager.getDelegatorUnbondingLock(_l1Addr, _unbondingLockIds[i]);\\n\\n            total += amount;\\n        }\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        // Call finalizeMigrateUnbondingLocks() on L2Migrator\\n        MigrateUnbondingLocksParams memory params = MigrateUnbondingLocksParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            total: total,\\n            unbondingLockIds: _unbondingLockIds\\n        });\\n        bytes memory data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateUnbondingLocks.selector,\\n            params\\n        );\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n        \\n        emit MigrateUnbondingLocksInitiated(seqNo, params);\\n    }\\n\\n    function migrateSender(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    )\\n        external\\n    {\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(abi.encode(\\n                MIGRATE_SENDER_TYPE_HASH,\\n                _l1Addr,\\n                _l2Addr\\n            )),\\n            _sig\\n        );\\n\\n        ITicketBroker ticketBroker = ITicketBroker(ticketBrokerAddr);\\n\\n        (\\n            ITicketBroker.Sender memory sender,\\n            ITicketBroker.ReserveInfo memory reserveInfo\\n        ) = ticketBroker.getSenderInfo(_l1Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        // Call finalizeMigrateSender() on L2Migrator\\n        MigrateSenderParams memory params = MigrateSenderParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            deposit: sender.deposit,\\n            reserve: reserveInfo.fundsRemaining\\n        });\\n        bytes memory data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateSender.selector,\\n            params\\n        );\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n        \\n        emit MigrateSenderInitiated(seqNo, params);\\n    }\\n\\n    function requireValidMigration(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes32 _structHash,\\n        bytes memory _sig\\n    )\\n        internal\\n        view\\n    {\\n        require(\\n            _l2Addr != address(0),\\n            \\\"L1Migrator#requireValidMigration: INVALID_L2_ADDR\\\"\\n        );\\n        require(\\n            msg.sender == _l1Addr || recoverSigner(_structHash, _sig) == _l1Addr,\\n            \\\"L1Migrator#requireValidMigration: FAIL_AUTH\\\"\\n        );\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _structHash,\\n        bytes memory _sig\\n    )\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (_sig.length == 0) {\\n            return address(0);\\n        }\\n\\n        bytes32 hash = _hashTypedDataV4(_structHash);\\n        return ECDSA.recover(hash, _sig);\\n    }\\n}\",\"keccak256\":\"0xf053d54f32d2ef7daa3db90bb68bf535d5b847a899dc7cde85724ed651eb0604\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x074790dd28b5e4702a50d11a6659de3d72a0e45c868fce801e94eeb5e225770f\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x12f048f1f8cb2c80576e474237e82c86e78de1c7c290f5ac5478e10df1501f74\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x415dddb95232da1302a97721281c362f0003046ad227c6eea998702dd0c2c8fd\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths\\n    ) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6a18a8da62224137abd565e56d3aac1331ee6634c0cbd06e05738d5e18fd53a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMigrator {\\n    struct MigrateDelegatorParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Stake of l1Addr on L1\\n        uint256 stake;\\n        // Delegated stake of l1Addr on L1\\n        uint256 delegatedStake;\\n        // Fees of l1Addr on L1\\n        uint256 fees;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateUnbondingLocksParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Total tokens in unbonding locks\\n        uint256 total;\\n        // IDs of unbonding locks being migrated\\n        uint256[] unbondingLockIds;\\n    }\\n\\n    struct MigrateSenderParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Deposit of l1Addr on L1\\n        uint256 deposit;\\n        // Reserve of l1Addr on L1\\n        uint256 reserve;\\n    }\\n}\",\"keccak256\":\"0xf32fc9dc8abaa4e5005060d0dfcedba1d50df662e0c2b6b6cfa51879ed917292\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b506040516200294738038062002947833981810160405281019062000038919062000260565b6040518060400160405280601381526020017f4c69766570656572204c314d69677261746f72000000000000000000000000008152506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660c08181525050620001468184846200020d60201b60201c565b60a0818152505080610120818152505050505050508273ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff166101808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050620003be565b600083838346306040516020016200022a959493929190620002ff565b6040516020818303038152906040528051906020012090509392505050565b6000815190506200025a81620003a4565b92915050565b600080600080608085870312156200027757600080fd5b6000620002878782880162000249565b94505060206200029a8782880162000249565b9350506040620002ad8782880162000249565b9250506060620002c08782880162000249565b91505092959194509250565b620002d7816200035c565b82525050565b620002e88162000370565b82525050565b620002f9816200039a565b82525050565b600060a082019050620003166000830188620002dd565b620003256020830187620002dd565b620003346040830186620002dd565b620003436060830185620002ee565b620003526080830184620002cc565b9695505050505050565b600062000369826200037a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620003af816200035c565b8114620003bb57600080fd5b50565b60805160601c60a05160c05160e05161010051610120516101405160601c6101605160601c6101805160601c6124db6200046c600039600081816104060152818161079c015281816108350152610a3c01526000818161081101526108b10152600081816101d2015281816104d20152610aaf01526000610e1901526000610e5b01526000610e3a01526000610dc601526000610dee015260008181610ad30152610c1d01526124db6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063de1ec2d61161005b578063de1ec2d6146100d8578063e40309ca146100f6578063e89320e514610112578063fb0e722b146101305761007d565b806328293d511461008257806378da35741461009e5780638f2c17ed146100ba575b600080fd5b61009c600480360381019061009791906115bf565b61014e565b005b6100b860048036038101906100b39190611691565b610478565b005b6100c261080f565b6040516100cf9190611c7f565b60405180910390f35b6100e0610833565b6040516100ed9190611c7f565b60405180910390f35b610110600480360381019061010b9190611691565b610857565b005b61011a610aad565b6040516101279190611c7f565b60405180910390f35b610138610ad1565b6040516101459190611ea7565b60405180910390f35b6101ce88887f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f7116978b8b8b8b604051602001610189929190611c2f565b604051602081830303815290604052805190602001206040516020016101b29493929190611da8565b6040516020818303038152906040528051906020012087610af5565b60007f000000000000000000000000000000000000000000000000000000000000000090506000805b888890508110156102f25760008373ffffffffffffffffffffffffffffffffffffffff1663412f83b68d8c8c8681811061025a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518363ffffffff1660e01b815260040161027e929190611d48565b604080518083038186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190611797565b50905080836102dc91906120ac565b92505080806102ea906121fe565b9150506101f7565b50600060405180608001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081525090506000637164394560e01b826040516024016103a09190611fb8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600061042f7f00000000000000000000000000000000000000000000000000000000000000008d888b8b87610c18565b9050807f866b95b17eb8769a4c75462bd9ce7c2f12ba80be2b0d459669a7a2a624e06444846040516104619190611fb8565b60405180910390a250505050505050505050505050565b6104ce86867f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f89896040516020016104b293929190611d71565b6040516020818303038152906040528051906020012087610af5565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a8960006040518363ffffffff1660e01b8152600401610531929190611c9a565b60206040518083038186803b15801561054957600080fd5b505afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610581919061176e565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc8a60006040518363ffffffff1660e01b81526004016105c1929190611c9a565b60206040518083038186803b1580156105d957600080fd5b505afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610611919061176e565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958c6040518263ffffffff1660e01b815260040161064f9190611c7f565b60e06040518083038186803b15801561066757600080fd5b505afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f91906117d3565b50505093509350505060006040518060c001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018381526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681525090506000631a0725d860e01b826040516024016107369190611f82565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006107c57f00000000000000000000000000000000000000000000000000000000000000008e8b8e8e87610c18565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb846040516107f79190611f82565b60405180910390a25050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108ad86867f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f898960405160200161089193929190611d71565b6040516020818303038152906040528051906020012087610af5565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da8a6040518263ffffffff1660e01b815260040161090e9190611c7f565b60806040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190611732565b91509150600060405180608001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018460000151815260200183600001518152509050600063b3f5ccae60e01b826040516024016109d69190611f9d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000610a657f00000000000000000000000000000000000000000000000000000000000000008c898c8c87610c18565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b384604051610a979190611f9d565b60405180910390a2505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90611f02565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610bd357508373ffffffffffffffffffffffffffffffffffffffff16610bbb8383610d4c565b73ffffffffffffffffffffffffffffffffffffffff16145b610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0990611f42565b60405180910390fd5b50505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b8152600401610c84989796959493929190611cc3565b6020604051808303818588803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610cd6919061176e565b9050808873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051610d369190611e85565b60405180910390a4809150509695505050505050565b60008082511415610d605760009050610d7b565b6000610d6b84610d81565b9050610d778184610d9b565b9150505b92915050565b6000610d94610d8e610dc2565b83610e85565b9050919050565b6000806000610daa8585610eb8565b91509150610db781610f3b565b819250505092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610e14577f00000000000000000000000000000000000000000000000000000000000000009050610e82565b610e7f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061128c565b90505b90565b60008282604051602001610e9a929190611c48565b60405160208183030381529060405280519060200120905092915050565b600080604183511415610efa5760008060006020860151925060408601519150606086015160001a9050610eee878285856112c6565b94509450505050610f34565b604083511415610f2b576000806020850151915060408501519050610f208683836113d3565b935093505050610f34565b60006002915091505b9250929050565b60006004811115610f75577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610fae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610fb957611289565b60016004811115610ff3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561102c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490611ec2565b60405180910390fd5b600260048111156110a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156110e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111890611ee2565b60405180910390fd5b6003600481111561115b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611194577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90611f22565b60405180910390fd5b60048081111561120e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611247577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127f90611f62565b60405180910390fd5b5b50565b600083838346306040516020016112a7959493929190611ded565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156113015760006003915091506113ca565b601b8560ff16141580156113195750601c8560ff1614155b1561132b5760006004915091506113ca565b6000600187878787604051600081526020016040526040516113509493929190611e40565b6020604051602081039080840390855afa158015611372573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113c1576000600192509250506113ca565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050611413878288856112c6565b935093505050935093915050565b600061143461142f84611fff565b611fda565b90508281526020810184848401111561144c57600080fd5b61145784828561218b565b509392505050565b60008135905061146e81612477565b92915050565b60008151905061148381612477565b92915050565b60008083601f84011261149b57600080fd5b8235905067ffffffffffffffff8111156114b457600080fd5b6020830191508360208202830111156114cc57600080fd5b9250929050565b600082601f8301126114e457600080fd5b81356114f4848260208601611421565b91505092915050565b60006040828403121561150f57600080fd5b6115196040611fda565b90506000611529848285016115aa565b600083015250602061153d848285016115aa565b60208301525092915050565b60006040828403121561155b57600080fd5b6115656040611fda565b90506000611575848285016115aa565b6000830152506020611589848285016115aa565b60208301525092915050565b6000813590506115a48161248e565b92915050565b6000815190506115b98161248e565b92915050565b60008060008060008060008060e0898b0312156115db57600080fd5b60006115e98b828c0161145f565b98505060206115fa8b828c0161145f565b975050604089013567ffffffffffffffff81111561161757600080fd5b6116238b828c01611489565b9650965050606089013567ffffffffffffffff81111561164257600080fd5b61164e8b828c016114d3565b945050608061165f8b828c01611595565b93505060a06116708b828c01611595565b92505060c06116818b828c01611595565b9150509295985092959890939650565b60008060008060008060c087890312156116aa57600080fd5b60006116b889828a0161145f565b96505060206116c989828a0161145f565b955050604087013567ffffffffffffffff8111156116e657600080fd5b6116f289828a016114d3565b945050606061170389828a01611595565b935050608061171489828a01611595565b92505060a061172589828a01611595565b9150509295509295509295565b6000806080838503121561174557600080fd5b600061175385828601611549565b9250506040611764858286016114fd565b9150509250929050565b60006020828403121561178057600080fd5b600061178e848285016115aa565b91505092915050565b600080604083850312156117aa57600080fd5b60006117b8858286016115aa565b92505060206117c9858286016115aa565b9150509250929050565b600080600080600080600060e0888a0312156117ee57600080fd5b60006117fc8a828b016115aa565b975050602061180d8a828b016115aa565b965050604061181e8a828b01611474565b955050606061182f8a828b016115aa565b94505060806118408a828b016115aa565b93505060a06118518a828b016115aa565b92505060c06118628a828b016115aa565b91505092959891949750929550565b600061187d8383611c02565b60208301905092915050565b61189281612102565b82525050565b6118a181612102565b82525050565b60006118b38385612074565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118e257600080fd5b6020830292506118f383858461218b565b82840190509392505050565b600061190a82612040565b6119148185612063565b935061191f83612030565b8060005b838110156119505781516119378882611871565b975061194283612056565b925050600181019050611923565b5085935050505092915050565b61196681612114565b82525050565b61197d61197882612114565b612247565b82525050565b600061198e8261204b565b611998818561207f565b93506119a881856020860161219a565b6119b1816122af565b840191505092915050565b6119c581612155565b82525050565b6119d481612179565b82525050565b60006119e7601883612090565b91506119f2826122c0565b602082019050919050565b6000611a0a601f83612090565b9150611a15826122e9565b602082019050919050565b6000611a2d603183612090565b9150611a3882612312565b604082019050919050565b6000611a506002836120a1565b9150611a5b82612361565b600282019050919050565b6000611a73602283612090565b9150611a7e8261238a565b604082019050919050565b6000611a96602b83612090565b9150611aa1826123d9565b604082019050919050565b6000611ab9602283612090565b9150611ac482612428565b604082019050919050565b60c082016000820151611ae56000850182611889565b506020820151611af86020850182611889565b506040820151611b0b6040850182611c02565b506060820151611b1e6060850182611c02565b506080820151611b316080850182611c02565b5060a0820151611b4460a0850182611889565b50505050565b608082016000820151611b606000850182611889565b506020820151611b736020850182611889565b506040820151611b866040850182611c02565b506060820151611b996060850182611c02565b50505050565b6000608083016000830151611bb76000860182611889565b506020830151611bca6020860182611889565b506040830151611bdd6040860182611c02565b5060608301518482036060860152611bf582826118ff565b9150508091505092915050565b611c0b8161213e565b82525050565b611c1a8161213e565b82525050565b611c2981612148565b82525050565b6000611c3c8284866118a7565b91508190509392505050565b6000611c5382611a43565b9150611c5f828561196c565b602082019150611c6f828461196c565b6020820191508190509392505050565b6000602082019050611c946000830184611898565b92915050565b6000604082019050611caf6000830185611898565b611cbc60208301846119cb565b9392505050565b600061010082019050611cd9600083018b611898565b611ce6602083018a6119cb565b611cf36040830189611c11565b611d006060830188611898565b611d0d6080830187611898565b611d1a60a0830186611c11565b611d2760c0830185611c11565b81810360e0830152611d398184611983565b90509998505050505050505050565b6000604082019050611d5d6000830185611898565b611d6a6020830184611c11565b9392505050565b6000606082019050611d86600083018661195d565b611d936020830185611898565b611da06040830184611898565b949350505050565b6000608082019050611dbd600083018761195d565b611dca6020830186611898565b611dd76040830185611898565b611de4606083018461195d565b95945050505050565b600060a082019050611e02600083018861195d565b611e0f602083018761195d565b611e1c604083018661195d565b611e296060830185611c11565b611e366080830184611898565b9695505050505050565b6000608082019050611e55600083018761195d565b611e626020830186611c20565b611e6f604083018561195d565b611e7c606083018461195d565b95945050505050565b60006020820190508181036000830152611e9f8184611983565b905092915050565b6000602082019050611ebc60008301846119bc565b92915050565b60006020820190508181036000830152611edb816119da565b9050919050565b60006020820190508181036000830152611efb816119fd565b9050919050565b60006020820190508181036000830152611f1b81611a20565b9050919050565b60006020820190508181036000830152611f3b81611a66565b9050919050565b60006020820190508181036000830152611f5b81611a89565b9050919050565b60006020820190508181036000830152611f7b81611aac565b9050919050565b600060c082019050611f976000830184611acf565b92915050565b6000608082019050611fb26000830184611b4a565b92915050565b60006020820190508181036000830152611fd28184611b9f565b905092915050565b6000611fe4611ff5565b9050611ff082826121cd565b919050565b6000604051905090565b600067ffffffffffffffff82111561201a57612019612280565b5b612023826122af565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006120b78261213e565b91506120c28361213e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120f7576120f6612251565b5b828201905092915050565b600061210d8261211e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061216082612167565b9050919050565b60006121728261211e565b9050919050565b60006121848261213e565b9050919050565b82818337600083830152505050565b60005b838110156121b857808201518184015260208101905061219d565b838111156121c7576000848401525b50505050565b6121d6826122af565b810181811067ffffffffffffffff821117156121f5576121f4612280565b5b80604052505050565b60006122098261213e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561223c5761223b612251565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a20494e56414c49445f4c325f41444452000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a204641494c5f41555448000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b61248081612102565b811461248b57600080fd5b50565b6124978161213e565b81146124a257600080fd5b5056fea26469706673582212205f10402138951d36cb6fa465c7d7aff1df1b66b5190f7535742910786b7b9c4d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063de1ec2d61161005b578063de1ec2d6146100d8578063e40309ca146100f6578063e89320e514610112578063fb0e722b146101305761007d565b806328293d511461008257806378da35741461009e5780638f2c17ed146100ba575b600080fd5b61009c600480360381019061009791906115bf565b61014e565b005b6100b860048036038101906100b39190611691565b610478565b005b6100c261080f565b6040516100cf9190611c7f565b60405180910390f35b6100e0610833565b6040516100ed9190611c7f565b60405180910390f35b610110600480360381019061010b9190611691565b610857565b005b61011a610aad565b6040516101279190611c7f565b60405180910390f35b610138610ad1565b6040516101459190611ea7565b60405180910390f35b6101ce88887f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f7116978b8b8b8b604051602001610189929190611c2f565b604051602081830303815290604052805190602001206040516020016101b29493929190611da8565b6040516020818303038152906040528051906020012087610af5565b60007f000000000000000000000000000000000000000000000000000000000000000090506000805b888890508110156102f25760008373ffffffffffffffffffffffffffffffffffffffff1663412f83b68d8c8c8681811061025a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518363ffffffff1660e01b815260040161027e929190611d48565b604080518083038186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190611797565b50905080836102dc91906120ac565b92505080806102ea906121fe565b9150506101f7565b50600060405180608001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081525090506000637164394560e01b826040516024016103a09190611fb8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600061042f7f00000000000000000000000000000000000000000000000000000000000000008d888b8b87610c18565b9050807f866b95b17eb8769a4c75462bd9ce7c2f12ba80be2b0d459669a7a2a624e06444846040516104619190611fb8565b60405180910390a250505050505050505050505050565b6104ce86867f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f89896040516020016104b293929190611d71565b6040516020818303038152906040528051906020012087610af5565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a8960006040518363ffffffff1660e01b8152600401610531929190611c9a565b60206040518083038186803b15801561054957600080fd5b505afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610581919061176e565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc8a60006040518363ffffffff1660e01b81526004016105c1929190611c9a565b60206040518083038186803b1580156105d957600080fd5b505afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610611919061176e565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958c6040518263ffffffff1660e01b815260040161064f9190611c7f565b60e06040518083038186803b15801561066757600080fd5b505afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f91906117d3565b50505093509350505060006040518060c001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018381526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681525090506000631a0725d860e01b826040516024016107369190611f82565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006107c57f00000000000000000000000000000000000000000000000000000000000000008e8b8e8e87610c18565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb846040516107f79190611f82565b60405180910390a25050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108ad86867f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f898960405160200161089193929190611d71565b6040516020818303038152906040528051906020012087610af5565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da8a6040518263ffffffff1660e01b815260040161090e9190611c7f565b60806040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190611732565b91509150600060405180608001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018460000151815260200183600001518152509050600063b3f5ccae60e01b826040516024016109d69190611f9d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000610a657f00000000000000000000000000000000000000000000000000000000000000008c898c8c87610c18565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b384604051610a979190611f9d565b60405180910390a2505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90611f02565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610bd357508373ffffffffffffffffffffffffffffffffffffffff16610bbb8383610d4c565b73ffffffffffffffffffffffffffffffffffffffff16145b610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0990611f42565b60405180910390fd5b50505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b8152600401610c84989796959493929190611cc3565b6020604051808303818588803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610cd6919061176e565b9050808873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051610d369190611e85565b60405180910390a4809150509695505050505050565b60008082511415610d605760009050610d7b565b6000610d6b84610d81565b9050610d778184610d9b565b9150505b92915050565b6000610d94610d8e610dc2565b83610e85565b9050919050565b6000806000610daa8585610eb8565b91509150610db781610f3b565b819250505092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610e14577f00000000000000000000000000000000000000000000000000000000000000009050610e82565b610e7f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061128c565b90505b90565b60008282604051602001610e9a929190611c48565b60405160208183030381529060405280519060200120905092915050565b600080604183511415610efa5760008060006020860151925060408601519150606086015160001a9050610eee878285856112c6565b94509450505050610f34565b604083511415610f2b576000806020850151915060408501519050610f208683836113d3565b935093505050610f34565b60006002915091505b9250929050565b60006004811115610f75577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610fae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610fb957611289565b60016004811115610ff3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561102c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490611ec2565b60405180910390fd5b600260048111156110a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156110e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111890611ee2565b60405180910390fd5b6003600481111561115b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611194577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90611f22565b60405180910390fd5b60048081111561120e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611247577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127f90611f62565b60405180910390fd5b5b50565b600083838346306040516020016112a7959493929190611ded565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156113015760006003915091506113ca565b601b8560ff16141580156113195750601c8560ff1614155b1561132b5760006004915091506113ca565b6000600187878787604051600081526020016040526040516113509493929190611e40565b6020604051602081039080840390855afa158015611372573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113c1576000600192509250506113ca565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050611413878288856112c6565b935093505050935093915050565b600061143461142f84611fff565b611fda565b90508281526020810184848401111561144c57600080fd5b61145784828561218b565b509392505050565b60008135905061146e81612477565b92915050565b60008151905061148381612477565b92915050565b60008083601f84011261149b57600080fd5b8235905067ffffffffffffffff8111156114b457600080fd5b6020830191508360208202830111156114cc57600080fd5b9250929050565b600082601f8301126114e457600080fd5b81356114f4848260208601611421565b91505092915050565b60006040828403121561150f57600080fd5b6115196040611fda565b90506000611529848285016115aa565b600083015250602061153d848285016115aa565b60208301525092915050565b60006040828403121561155b57600080fd5b6115656040611fda565b90506000611575848285016115aa565b6000830152506020611589848285016115aa565b60208301525092915050565b6000813590506115a48161248e565b92915050565b6000815190506115b98161248e565b92915050565b60008060008060008060008060e0898b0312156115db57600080fd5b60006115e98b828c0161145f565b98505060206115fa8b828c0161145f565b975050604089013567ffffffffffffffff81111561161757600080fd5b6116238b828c01611489565b9650965050606089013567ffffffffffffffff81111561164257600080fd5b61164e8b828c016114d3565b945050608061165f8b828c01611595565b93505060a06116708b828c01611595565b92505060c06116818b828c01611595565b9150509295985092959890939650565b60008060008060008060c087890312156116aa57600080fd5b60006116b889828a0161145f565b96505060206116c989828a0161145f565b955050604087013567ffffffffffffffff8111156116e657600080fd5b6116f289828a016114d3565b945050606061170389828a01611595565b935050608061171489828a01611595565b92505060a061172589828a01611595565b9150509295509295509295565b6000806080838503121561174557600080fd5b600061175385828601611549565b9250506040611764858286016114fd565b9150509250929050565b60006020828403121561178057600080fd5b600061178e848285016115aa565b91505092915050565b600080604083850312156117aa57600080fd5b60006117b8858286016115aa565b92505060206117c9858286016115aa565b9150509250929050565b600080600080600080600060e0888a0312156117ee57600080fd5b60006117fc8a828b016115aa565b975050602061180d8a828b016115aa565b965050604061181e8a828b01611474565b955050606061182f8a828b016115aa565b94505060806118408a828b016115aa565b93505060a06118518a828b016115aa565b92505060c06118628a828b016115aa565b91505092959891949750929550565b600061187d8383611c02565b60208301905092915050565b61189281612102565b82525050565b6118a181612102565b82525050565b60006118b38385612074565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118e257600080fd5b6020830292506118f383858461218b565b82840190509392505050565b600061190a82612040565b6119148185612063565b935061191f83612030565b8060005b838110156119505781516119378882611871565b975061194283612056565b925050600181019050611923565b5085935050505092915050565b61196681612114565b82525050565b61197d61197882612114565b612247565b82525050565b600061198e8261204b565b611998818561207f565b93506119a881856020860161219a565b6119b1816122af565b840191505092915050565b6119c581612155565b82525050565b6119d481612179565b82525050565b60006119e7601883612090565b91506119f2826122c0565b602082019050919050565b6000611a0a601f83612090565b9150611a15826122e9565b602082019050919050565b6000611a2d603183612090565b9150611a3882612312565b604082019050919050565b6000611a506002836120a1565b9150611a5b82612361565b600282019050919050565b6000611a73602283612090565b9150611a7e8261238a565b604082019050919050565b6000611a96602b83612090565b9150611aa1826123d9565b604082019050919050565b6000611ab9602283612090565b9150611ac482612428565b604082019050919050565b60c082016000820151611ae56000850182611889565b506020820151611af86020850182611889565b506040820151611b0b6040850182611c02565b506060820151611b1e6060850182611c02565b506080820151611b316080850182611c02565b5060a0820151611b4460a0850182611889565b50505050565b608082016000820151611b606000850182611889565b506020820151611b736020850182611889565b506040820151611b866040850182611c02565b506060820151611b996060850182611c02565b50505050565b6000608083016000830151611bb76000860182611889565b506020830151611bca6020860182611889565b506040830151611bdd6040860182611c02565b5060608301518482036060860152611bf582826118ff565b9150508091505092915050565b611c0b8161213e565b82525050565b611c1a8161213e565b82525050565b611c2981612148565b82525050565b6000611c3c8284866118a7565b91508190509392505050565b6000611c5382611a43565b9150611c5f828561196c565b602082019150611c6f828461196c565b6020820191508190509392505050565b6000602082019050611c946000830184611898565b92915050565b6000604082019050611caf6000830185611898565b611cbc60208301846119cb565b9392505050565b600061010082019050611cd9600083018b611898565b611ce6602083018a6119cb565b611cf36040830189611c11565b611d006060830188611898565b611d0d6080830187611898565b611d1a60a0830186611c11565b611d2760c0830185611c11565b81810360e0830152611d398184611983565b90509998505050505050505050565b6000604082019050611d5d6000830185611898565b611d6a6020830184611c11565b9392505050565b6000606082019050611d86600083018661195d565b611d936020830185611898565b611da06040830184611898565b949350505050565b6000608082019050611dbd600083018761195d565b611dca6020830186611898565b611dd76040830185611898565b611de4606083018461195d565b95945050505050565b600060a082019050611e02600083018861195d565b611e0f602083018761195d565b611e1c604083018661195d565b611e296060830185611c11565b611e366080830184611898565b9695505050505050565b6000608082019050611e55600083018761195d565b611e626020830186611c20565b611e6f604083018561195d565b611e7c606083018461195d565b95945050505050565b60006020820190508181036000830152611e9f8184611983565b905092915050565b6000602082019050611ebc60008301846119bc565b92915050565b60006020820190508181036000830152611edb816119da565b9050919050565b60006020820190508181036000830152611efb816119fd565b9050919050565b60006020820190508181036000830152611f1b81611a20565b9050919050565b60006020820190508181036000830152611f3b81611a66565b9050919050565b60006020820190508181036000830152611f5b81611a89565b9050919050565b60006020820190508181036000830152611f7b81611aac565b9050919050565b600060c082019050611f976000830184611acf565b92915050565b6000608082019050611fb26000830184611b4a565b92915050565b60006020820190508181036000830152611fd28184611b9f565b905092915050565b6000611fe4611ff5565b9050611ff082826121cd565b919050565b6000604051905090565b600067ffffffffffffffff82111561201a57612019612280565b5b612023826122af565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006120b78261213e565b91506120c28361213e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120f7576120f6612251565b5b828201905092915050565b600061210d8261211e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061216082612167565b9050919050565b60006121728261211e565b9050919050565b60006121848261213e565b9050919050565b82818337600083830152505050565b60005b838110156121b857808201518184015260208101905061219d565b838111156121c7576000848401525b50505050565b6121d6826122af565b810181811067ffffffffffffffff821117156121f5576121f4612280565b5b80604052505050565b60006122098261213e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561223c5761223b612251565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a20494e56414c49445f4c325f41444452000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a204641494c5f41555448000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b61248081612102565b811461248b57600080fd5b50565b6124978161213e565b81146124a257600080fd5b5056fea26469706673582212205f10402138951d36cb6fa465c7d7aff1df1b66b5190f7535742910786b7b9c4d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}