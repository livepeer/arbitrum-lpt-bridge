{
  "address": "0xAF0F4CF38494dEDa6D12B096d93757094a16a1D3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1LPTEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_sequenceNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_exitNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFinalized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "calculateL2TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterpartGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "finalizeInboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getOutboundCalldata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "outboundCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1LPTEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Counterpart",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Counterpart",
          "type": "address"
        }
      ],
      "name": "setCounterpart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa412965dab807db27eedb70f8492ab415731a72c989fa458edbdce96151df3a7",
  "receipt": {
    "to": null,
    "from": "0xC96f6B72843Af1988C98F78eAB3E47673af63eA1",
    "contractAddress": "0xAF0F4CF38494dEDa6D12B096d93757094a16a1D3",
    "transactionIndex": 17,
    "gasUsed": "2531332",
    "logsBloom": "0x
    "blockHash": "0x44148570a573b285ed30e0327a6b8629ace358f1b64e35ffcb7acc257df1dedb",
    "transactionHash": "0xa412965dab807db27eedb70f8492ab415731a72c989fa458edbdce96151df3a7",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 9853478,
        "transactionHash": "0xa412965dab807db27eedb70f8492ab415731a72c989fa458edbdce96151df3a7",
        "address": "0xAF0F4CF38494dEDa6D12B096d93757094a16a1D3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c96f6b72843af1988c98f78eab3e47673af63ea1",
          "0x000000000000000000000000c96f6b72843af1988c98f78eab3e47673af63ea1"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x44148570a573b285ed30e0327a6b8629ace358f1b64e35ffcb7acc257df1dedb"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 9853478,
        "transactionHash": "0xa412965dab807db27eedb70f8492ab415731a72c989fa458edbdce96151df3a7",
        "address": "0xAF0F4CF38494dEDa6D12B096d93757094a16a1D3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x44148570a573b285ed30e0327a6b8629ace358f1b64e35ffcb7acc257df1dedb"
      }
    ],
    "blockNumber": 9853478,
    "cumulativeGasUsed": "10909352",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70C143928eCfFaf9F5b406f7f4fC28Dc43d68380",
    "0xF3E3410399C686584148f1F5046161fc67F3Aed1",
    "0x148D9a919977B392E3a3c309Aa23481e68D2e502",
    "0x663D000d6d6B61580fc23ef9d23Ea43D2850af40",
    "0x578BAde599406A8fE3d24Fd7f7211c0911F5B29e"
  ],
  "solcInputHash": "32fd9971ac458e296f813f74fd73c046",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1LPTEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_sequenceNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1LPTEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Counterpart\",\"type\":\"address\"}],\"name\":\"setCounterpart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/gateway/L1LPTGateway.sol\":\"L1LPTGateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ControlledGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ControlledGateway is AccessControl, Pausable {\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\n    address public immutable l1Lpt;\\n    address public immutable l2Lpt;\\n\\n    constructor(address _l1Lpt, address _l2Lpt) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        l1Lpt = _l1Lpt;\\n        l2Lpt = _l2Lpt;\\n    }\\n\\n    function pause() external onlyRole(GOVERNOR_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(GOVERNOR_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x279c8ddb08059d4b932fc5035f32fafb897fc007688e63d86ad86ff090af8970\",\"license\":\"MIT\"},\"contracts/L1/gateway/IL1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL1LPTGateway {\\n    event DepositInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _sequenceNumber,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalFinalized(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf3c4fceb1627089f5a91e3187c815fdf363cae07ff43ddf89d9ff6b016f9f59c\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBridge} from \\\"../../arbitrum/IBridge.sol\\\";\\nimport {IInbox} from \\\"../../arbitrum/IInbox.sol\\\";\\nimport {IOutbox} from \\\"../../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1ArbitrumMessenger {\\n    IInbox public immutable inbox;\\n\\n    event TxToL2(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed seqNum,\\n        bytes data\\n    );\\n\\n    constructor(address _inbox) {\\n        inbox = IInbox(_inbox);\\n    }\\n\\n    modifier onlyL2Counterpart(address l2Counterpart) {\\n        // a message coming from the counterpart gateway was executed by the bridge\\n        address bridge = inbox.bridge();\\n        require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\\n            .l2ToL1Sender();\\n        require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address user,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        uint256 seqNum = inbox.createRetryableTicket{value: msg.value}(\\n            target,\\n            0, // we always assume that l2CallValue = 0\\n            maxSubmissionCost,\\n            user,\\n            user,\\n            maxGas,\\n            gasPriceBid,\\n            data\\n        );\\n        emit TxToL2(user, target, seqNum, data);\\n        return seqNum;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b1123e920abe7b622858fd2666dadcbeef3b26f2bb94cb2a8df172dea3e0cd\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ControlledGateway} from \\\"../../ControlledGateway.sol\\\";\\nimport {L1ArbitrumMessenger} from \\\"./L1ArbitrumMessenger.sol\\\";\\nimport {IL1LPTGateway} from \\\"./IL1LPTGateway.sol\\\";\\nimport {IL2LPTGateway} from \\\"../../L2/gateway/IL2LPTGateway.sol\\\";\\n\\ninterface TokenLike {\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n}\\n\\ncontract L1LPTGateway is IL1LPTGateway, ControlledGateway, L1ArbitrumMessenger {\\n    address public immutable l1Router;\\n    address public immutable l1LPTEscrow;\\n    address public l2Counterpart;\\n\\n    constructor(\\n        address _l1Router,\\n        address _l1LPTEscrow,\\n        address _l1Lpt,\\n        address _l2Lpt,\\n        address _inbox\\n    ) ControlledGateway(_l1Lpt, _l2Lpt) L1ArbitrumMessenger(_inbox) {\\n        l1Router = _l1Router;\\n        l1LPTEscrow = _l1LPTEscrow;\\n    }\\n\\n    function setCounterpart(address _l2Counterpart)\\n        external\\n        onlyRole(GOVERNOR_ROLE)\\n    {\\n        l2Counterpart = _l2Counterpart;\\n    }\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable override whenNotPaused returns (bytes memory) {\\n        require(_l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n\\n        // nested scope to avoid stack too deep errors\\n        address from;\\n        uint256 seqNum;\\n        bytes memory extraData;\\n        {\\n            uint256 maxSubmissionCost;\\n            (from, maxSubmissionCost, extraData) = parseOutboundData(_data);\\n            require(extraData.length == 0, \\\"CALL_HOOK_DATA_NOT_ALLOWED\\\");\\n\\n            // transfer tokens to escrow\\n            TokenLike(_l1Token).transferFrom(from, l1LPTEscrow, _amount);\\n\\n            bytes memory outboundCalldata = getOutboundCalldata(\\n                _l1Token,\\n                from,\\n                _to,\\n                _amount,\\n                extraData\\n            );\\n\\n            seqNum = sendTxToL2(\\n                l2Counterpart,\\n                from,\\n                maxSubmissionCost,\\n                _maxGas,\\n                _gasPriceBid,\\n                outboundCalldata\\n            );\\n        }\\n\\n        emit DepositInitiated(_l1Token, from, _to, seqNum, _amount);\\n\\n        return abi.encode(seqNum);\\n    }\\n\\n    function finalizeInboundTransfer(\\n        address l1Token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyL2Counterpart(l2Counterpart) {\\n        require(l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n        (uint256 exitNum, ) = abi.decode(data, (uint256, bytes));\\n\\n        TokenLike(l1Token).transferFrom(l1LPTEscrow, to, amount);\\n\\n        emit WithdrawalFinalized(l1Token, from, to, exitNum, amount);\\n    }\\n\\n    function parseOutboundData(bytes memory data)\\n        internal\\n        view\\n        returns (\\n            address from,\\n            uint256 maxSubmissionCost,\\n            bytes memory extraData\\n        )\\n    {\\n        if (msg.sender == l1Router) {\\n            // router encoded\\n            (from, extraData) = abi.decode(data, (address, bytes));\\n        } else {\\n            from = msg.sender;\\n            extraData = data;\\n        }\\n        // user encoded\\n        (maxSubmissionCost, extraData) = abi.decode(\\n            extraData,\\n            (uint256, bytes)\\n        );\\n    }\\n\\n    function counterpartGateway() external view override returns (address) {\\n        return l2Counterpart;\\n    }\\n\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (l1Token != l1Lpt) {\\n            return address(0);\\n        }\\n\\n        return l2Lpt;\\n    }\\n\\n    function getOutboundCalldata(\\n        address l1Token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data\\n    ) public pure returns (bytes memory outboundCalldata) {\\n        bytes memory emptyBytes = \\\"\\\";\\n\\n        outboundCalldata = abi.encodeWithSelector(\\n            IL2LPTGateway.finalizeInboundTransfer.selector,\\n            l1Token,\\n            from,\\n            to,\\n            amount,\\n            abi.encode(emptyBytes, data)\\n        );\\n\\n        return outboundCalldata;\\n    }\\n}\\n\",\"keccak256\":\"0x14a1dd4f16c13f1979111b036f9c7a831892a2f099aec23b8c15f51e100b5ddb\",\"license\":\"MIT\"},\"contracts/L2/gateway/IL2LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL2LPTGateway {\\n    event DepositFinalized(\\n        address indexed _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _l2ToL1Id,\\n        uint256 _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address _l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9d0a018f6179245cda5c578c5becb21121a71b710528fef1e6e53f3fa8f69d1c\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x074790dd28b5e4702a50d11a6659de3d72a0e45c868fce801e94eeb5e225770f\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x12f048f1f8cb2c80576e474237e82c86e78de1c7c290f5ac5478e10df1501f74\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x415dddb95232da1302a97721281c362f0003046ad227c6eea998702dd0c2c8fd\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths\\n    ) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6a18a8da62224137abd565e56d3aac1331ee6634c0cbd06e05738d5e18fd53a\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162003161380380620031618339818101604052810190620000389190620003e3565b8083836000600160006101000a81548160ff0219169083151502179055506200007a6000801b6200006e620001d160201b60201c565b620001d960201b60201c565b620000af7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556000801b620001ef60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508473ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508373ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050505050620004b3565b600033905090565b620001eb82826200025260201b60201c565b5050565b600062000202836200034360201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6200026482826200036260201b60201c565b6200033f57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002e4620001d160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000838152602001908152602001600020600101549050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081519050620003dd8162000499565b92915050565b600080600080600060a08688031215620003fc57600080fd5b60006200040c88828901620003cc565b95505060206200041f88828901620003cc565b94505060406200043288828901620003cc565b93505060606200044588828901620003cc565b92505060806200045888828901620003cc565b9150509295509295909350565b6000620004728262000479565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004a48162000465565b8114620004b057600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c612c1b620005466000396000818161099201528181610bbe0152611053015260008181610b830152611627015260008181610659015281816111ea01526116c9015260008181610d230152610e6d0152600081816105cb015281816108d401528181610e110152610f040152612c1b6000f3fe6080604052600436106101405760003560e01c806377061e4d116100b6578063a217fddf1161006f578063a217fddf14610438578063a7e28d4814610463578063ccc57490146104a0578063d2ce7d65146104cb578063d547741f146104fb578063fb0e722b1461052457610140565b806377061e4d146103285780638456cb59146103515780638e7c8efe1461036857806391d14854146103935780639d79bdb5146103d0578063a0c76a96146103fb57610140565b80632f2ff15d116101085780632f2ff15d1461023e57806336568abe146102675780633f4ba83a14610290578063407395e0146102a75780635c975abb146102d257806362dcefbb146102fd57610140565b806301ffc9a7146101455780630725667714610182578063248a9ca3146101ad5780632db09c1c146101ea5780632e567b3614610215575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190611fb0565b61054f565b6040516101799190612499565b60405180910390f35b34801561018e57600080fd5b506101976105c9565b6040516101a4919061233f565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf9190611f4b565b6105ed565b6040516101e191906124b4565b60405180910390f35b3480156101f657600080fd5b506101ff61060c565b60405161020c919061233f565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190611d5a565b610634565b005b34801561024a57600080fd5b5061026560048036038101906102609190611f74565b610a98565b005b34801561027357600080fd5b5061028e60048036038101906102899190611f74565b610ac1565b005b34801561029c57600080fd5b506102a5610b44565b005b3480156102b357600080fd5b506102bc610b81565b6040516102c9919061233f565b60405180910390f35b3480156102de57600080fd5b506102e7610ba5565b6040516102f49190612499565b60405180910390f35b34801561030957600080fd5b50610312610bbc565b60405161031f919061233f565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a9190611cb4565b610be0565b005b34801561035d57600080fd5b50610366610c56565b005b34801561037457600080fd5b5061037d610c93565b60405161038a919061233f565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190611f74565b610cb7565b6040516103c79190612499565b60405180910390f35b3480156103dc57600080fd5b506103e5610d21565b6040516103f2919061233f565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d9190611dec565b610d45565b60405161042f91906124cf565b60405180910390f35b34801561044457600080fd5b5061044d610e06565b60405161045a91906124b4565b60405180910390f35b34801561046f57600080fd5b5061048a60048036038101906104859190611cb4565b610e0d565b604051610497919061233f565b60405180910390f35b3480156104ac57600080fd5b506104b5610e94565b6040516104c291906124b4565b60405180910390f35b6104e560048036038101906104e09190611e7b565b610eb8565b6040516104f291906124cf565b60405180910390f35b34801561050757600080fd5b50610522600480360381019061051d9190611f74565b6111bf565b005b34801561053057600080fd5b506105396111e8565b6040516105469190612528565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105c257506105c18261120c565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156106bd57600080fd5b505afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190611cdd565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c906125a5565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ad57600080fd5b505afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190611cdd565b73ffffffffffffffffffffffffffffffffffffffff166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561082a57600080fd5b505afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190611cdd565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c990612625565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610960576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610957906125c5565b60405180910390fd5b600085858101906109719190612002565b5090508973ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000008a8a6040518463ffffffff1660e01b81526004016109d1939291906123b4565b602060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a239190611f22565b50808873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b38d8b604051610a84929190612470565b60405180910390a450505050505050505050565b610aa1826105ed565b610ab281610aad611276565b61127e565b610abc838361131b565b505050565b610ac9611276565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d90612645565b60405180910390fd5b610b4082826113fb565b5050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610b7681610b71611276565b61127e565b610b7e6114dc565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c1281610c0d611276565b61127e565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c8881610c83611276565b61127e565b610c9061157e565b50565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000604051806020016040528060008152509050632e567b3660e01b878787878588604051602001610d7a9291906124f1565b604051602081830303815290604052604051602401610d9d95949392919061235a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091505095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e6b5760009050610e8f565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6060610ec2610ba5565b15610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef9906125e5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f87906125c5565b60405180910390fd5b60008060606000610fe487878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611620565b8094508193508296505050506000825114611034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102b90612605565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff166323b872dd857f00000000000000000000000000000000000000000000000000000000000000008d6040518463ffffffff1660e01b8152600401611091939291906123b4565b602060405180830381600087803b1580156110ab57600080fd5b505af11580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e39190611f22565b5060006110f38d868e8e87610d45565b905061112360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686848d8d866116c4565b93505050818a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e18e8d604051611187929190612470565b60405180910390a4816040516020016111a09190612665565b6040516020818303038152906040529350505050979650505050505050565b6111c8826105ed565b6111d9816111d4611276565b61127e565b6111e383836113fb565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b6112888282610cb7565b611317576112ad8173ffffffffffffffffffffffffffffffffffffffff1660146117f8565b6112bb8360001c60206117f8565b6040516020016112cc929190612305565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130e9190612543565b60405180910390fd5b5050565b6113258282610cb7565b6113f757600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061139c611276565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6114058282610cb7565b156114d857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061147d611276565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6114e4610ba5565b611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a90612585565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611567611276565b604051611574919061233f565b60405180910390a1565b611586610ba5565b156115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd906125e5565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611609611276565b604051611616919061233f565b60405180910390a1565b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561169a578380602001905181019061168d9190611d06565b80925081945050506116a1565b3392508390505b808060200190518101906116b59190612056565b80925081935050509193909250565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b81526004016117309897969594939291906123eb565b6020604051808303818588803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117829190611fd9565b9050808873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0866040516117e291906124cf565b60405180910390a4809150509695505050505050565b60606000600283600261180b919061276f565b6118159190612719565b67ffffffffffffffff811115611854577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156118865781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061196e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026119ae919061276f565b6119b89190612719565b90505b6001811115611aa4577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611a5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611a9d906128d1565b90506119bb565b5060008414611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf90612565565b60405180910390fd5b8091505092915050565b6000611b05611b00846126a5565b612680565b905082815260208101848484011115611b1d57600080fd5b611b2884828561288f565b509392505050565b6000611b43611b3e846126a5565b612680565b905082815260208101848484011115611b5b57600080fd5b611b6684828561289e565b509392505050565b600081359050611b7d81612b5b565b92915050565b600081519050611b9281612b5b565b92915050565b600081519050611ba781612b72565b92915050565b600081519050611bbc81612b89565b92915050565b600081359050611bd181612ba0565b92915050565b600081359050611be681612bb7565b92915050565b60008083601f840112611bfe57600080fd5b8235905067ffffffffffffffff811115611c1757600080fd5b602083019150836001820283011115611c2f57600080fd5b9250929050565b600082601f830112611c4757600080fd5b8135611c57848260208601611af2565b91505092915050565b600082601f830112611c7157600080fd5b8151611c81848260208601611b30565b91505092915050565b600081359050611c9981612bce565b92915050565b600081519050611cae81612bce565b92915050565b600060208284031215611cc657600080fd5b6000611cd484828501611b6e565b91505092915050565b600060208284031215611cef57600080fd5b6000611cfd84828501611b83565b91505092915050565b60008060408385031215611d1957600080fd5b6000611d2785828601611b98565b925050602083015167ffffffffffffffff811115611d4457600080fd5b611d5085828601611c60565b9150509250929050565b60008060008060008060a08789031215611d7357600080fd5b6000611d8189828a01611b6e565b9650506020611d9289828a01611b6e565b9550506040611da389828a01611b6e565b9450506060611db489828a01611c8a565b935050608087013567ffffffffffffffff811115611dd157600080fd5b611ddd89828a01611bec565b92509250509295509295509295565b600080600080600060a08688031215611e0457600080fd5b6000611e1288828901611b6e565b9550506020611e2388828901611b6e565b9450506040611e3488828901611b6e565b9350506060611e4588828901611c8a565b925050608086013567ffffffffffffffff811115611e6257600080fd5b611e6e88828901611c36565b9150509295509295909350565b600080600080600080600060c0888a031215611e9657600080fd5b6000611ea48a828b01611b6e565b9750506020611eb58a828b01611b6e565b9650506040611ec68a828b01611c8a565b9550506060611ed78a828b01611c8a565b9450506080611ee88a828b01611c8a565b93505060a088013567ffffffffffffffff811115611f0557600080fd5b611f118a828b01611bec565b925092505092959891949750929550565b600060208284031215611f3457600080fd5b6000611f4284828501611bad565b91505092915050565b600060208284031215611f5d57600080fd5b6000611f6b84828501611bc2565b91505092915050565b60008060408385031215611f8757600080fd5b6000611f9585828601611bc2565b9250506020611fa685828601611b6e565b9150509250929050565b600060208284031215611fc257600080fd5b6000611fd084828501611bd7565b91505092915050565b600060208284031215611feb57600080fd5b6000611ff984828501611c9f565b91505092915050565b6000806040838503121561201557600080fd5b600061202385828601611c8a565b925050602083013567ffffffffffffffff81111561204057600080fd5b61204c85828601611c36565b9150509250929050565b6000806040838503121561206957600080fd5b600061207785828601611c9f565b925050602083015167ffffffffffffffff81111561209457600080fd5b6120a085828601611c60565b9150509250929050565b6120b3816127c9565b82525050565b6120c2816127ed565b82525050565b6120d1816127f9565b82525050565b60006120e2826126d6565b6120ec81856126ec565b93506120fc81856020860161289e565b6121058161298a565b840191505092915050565b61211981612859565b82525050565b6121288161287d565b82525050565b6000612139826126e1565b61214381856126fd565b935061215381856020860161289e565b61215c8161298a565b840191505092915050565b6000612172826126e1565b61217c818561270e565b935061218c81856020860161289e565b80840191505092915050565b60006121a56020836126fd565b91506121b08261299b565b602082019050919050565b60006121c86014836126fd565b91506121d3826129c4565b602082019050919050565b60006121eb600f836126fd565b91506121f6826129ed565b602082019050919050565b600061220e600d836126fd565b915061221982612a16565b602082019050919050565b60006122316010836126fd565b915061223c82612a3f565b602082019050919050565b6000612254601a836126fd565b915061225f82612a68565b602082019050919050565b600061227760178361270e565b915061228282612a91565b601782019050919050565b600061229a6018836126fd565b91506122a582612aba565b602082019050919050565b60006122bd60118361270e565b91506122c882612ae3565b601182019050919050565b60006122e0602f836126fd565b91506122eb82612b0c565b604082019050919050565b6122ff8161284f565b82525050565b60006123108261226a565b915061231c8285612167565b9150612327826122b0565b91506123338284612167565b91508190509392505050565b600060208201905061235460008301846120aa565b92915050565b600060a08201905061236f60008301886120aa565b61237c60208301876120aa565b61238960408301866120aa565b61239660608301856122f6565b81810360808301526123a881846120d7565b90509695505050505050565b60006060820190506123c960008301866120aa565b6123d660208301856120aa565b6123e360408301846122f6565b949350505050565b600061010082019050612401600083018b6120aa565b61240e602083018a61211f565b61241b60408301896122f6565b61242860608301886120aa565b61243560808301876120aa565b61244260a08301866122f6565b61244f60c08301856122f6565b81810360e083015261246181846120d7565b90509998505050505050505050565b600060408201905061248560008301856120aa565b61249260208301846122f6565b9392505050565b60006020820190506124ae60008301846120b9565b92915050565b60006020820190506124c960008301846120c8565b92915050565b600060208201905081810360008301526124e981846120d7565b905092915050565b6000604082019050818103600083015261250b81856120d7565b9050818103602083015261251f81846120d7565b90509392505050565b600060208201905061253d6000830184612110565b92915050565b6000602082019050818103600083015261255d818461212e565b905092915050565b6000602082019050818103600083015261257e81612198565b9050919050565b6000602082019050818103600083015261259e816121bb565b9050919050565b600060208201905081810360008301526125be816121de565b9050919050565b600060208201905081810360008301526125de81612201565b9050919050565b600060208201905081810360008301526125fe81612224565b9050919050565b6000602082019050818103600083015261261e81612247565b9050919050565b6000602082019050818103600083015261263e8161228d565b9050919050565b6000602082019050818103600083015261265e816122d3565b9050919050565b600060208201905061267a60008301846122f6565b92915050565b600061268a61269b565b905061269682826128fb565b919050565b6000604051905090565b600067ffffffffffffffff8211156126c0576126bf61295b565b5b6126c98261298a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006127248261284f565b915061272f8361284f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156127645761276361292c565b5b828201905092915050565b600061277a8261284f565b91506127858361284f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127be576127bd61292c565b5b828202905092915050565b60006127d48261282f565b9050919050565b60006127e68261282f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006128648261286b565b9050919050565b60006128768261282f565b9050919050565b60006128888261284f565b9050919050565b82818337600083830152505050565b60005b838110156128bc5780820151818401526020810190506128a1565b838111156128cb576000848401525b50505050565b60006128dc8261284f565b915060008214156128f0576128ef61292c565b5b600182039050919050565b6129048261298a565b810181811067ffffffffffffffff821117156129235761292261295b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4e4f545f46524f4d5f4252494447450000000000000000000000000000000000600082015250565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612b64816127c9565b8114612b6f57600080fd5b50565b612b7b816127db565b8114612b8657600080fd5b50565b612b92816127ed565b8114612b9d57600080fd5b50565b612ba9816127f9565b8114612bb457600080fd5b50565b612bc081612803565b8114612bcb57600080fd5b50565b612bd78161284f565b8114612be257600080fd5b5056fea26469706673582212207f91d3cb48b5f8094180edb9736305f28271d452ac721303f2a14339619e354b64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806377061e4d116100b6578063a217fddf1161006f578063a217fddf14610438578063a7e28d4814610463578063ccc57490146104a0578063d2ce7d65146104cb578063d547741f146104fb578063fb0e722b1461052457610140565b806377061e4d146103285780638456cb59146103515780638e7c8efe1461036857806391d14854146103935780639d79bdb5146103d0578063a0c76a96146103fb57610140565b80632f2ff15d116101085780632f2ff15d1461023e57806336568abe146102675780633f4ba83a14610290578063407395e0146102a75780635c975abb146102d257806362dcefbb146102fd57610140565b806301ffc9a7146101455780630725667714610182578063248a9ca3146101ad5780632db09c1c146101ea5780632e567b3614610215575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190611fb0565b61054f565b6040516101799190612499565b60405180910390f35b34801561018e57600080fd5b506101976105c9565b6040516101a4919061233f565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf9190611f4b565b6105ed565b6040516101e191906124b4565b60405180910390f35b3480156101f657600080fd5b506101ff61060c565b60405161020c919061233f565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190611d5a565b610634565b005b34801561024a57600080fd5b5061026560048036038101906102609190611f74565b610a98565b005b34801561027357600080fd5b5061028e60048036038101906102899190611f74565b610ac1565b005b34801561029c57600080fd5b506102a5610b44565b005b3480156102b357600080fd5b506102bc610b81565b6040516102c9919061233f565b60405180910390f35b3480156102de57600080fd5b506102e7610ba5565b6040516102f49190612499565b60405180910390f35b34801561030957600080fd5b50610312610bbc565b60405161031f919061233f565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a9190611cb4565b610be0565b005b34801561035d57600080fd5b50610366610c56565b005b34801561037457600080fd5b5061037d610c93565b60405161038a919061233f565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190611f74565b610cb7565b6040516103c79190612499565b60405180910390f35b3480156103dc57600080fd5b506103e5610d21565b6040516103f2919061233f565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d9190611dec565b610d45565b60405161042f91906124cf565b60405180910390f35b34801561044457600080fd5b5061044d610e06565b60405161045a91906124b4565b60405180910390f35b34801561046f57600080fd5b5061048a60048036038101906104859190611cb4565b610e0d565b604051610497919061233f565b60405180910390f35b3480156104ac57600080fd5b506104b5610e94565b6040516104c291906124b4565b60405180910390f35b6104e560048036038101906104e09190611e7b565b610eb8565b6040516104f291906124cf565b60405180910390f35b34801561050757600080fd5b50610522600480360381019061051d9190611f74565b6111bf565b005b34801561053057600080fd5b506105396111e8565b6040516105469190612528565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105c257506105c18261120c565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156106bd57600080fd5b505afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190611cdd565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c906125a5565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ad57600080fd5b505afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190611cdd565b73ffffffffffffffffffffffffffffffffffffffff166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561082a57600080fd5b505afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190611cdd565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c990612625565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610960576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610957906125c5565b60405180910390fd5b600085858101906109719190612002565b5090508973ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000008a8a6040518463ffffffff1660e01b81526004016109d1939291906123b4565b602060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a239190611f22565b50808873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b38d8b604051610a84929190612470565b60405180910390a450505050505050505050565b610aa1826105ed565b610ab281610aad611276565b61127e565b610abc838361131b565b505050565b610ac9611276565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d90612645565b60405180910390fd5b610b4082826113fb565b5050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610b7681610b71611276565b61127e565b610b7e6114dc565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c1281610c0d611276565b61127e565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c8881610c83611276565b61127e565b610c9061157e565b50565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000604051806020016040528060008152509050632e567b3660e01b878787878588604051602001610d7a9291906124f1565b604051602081830303815290604052604051602401610d9d95949392919061235a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091505095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e6b5760009050610e8f565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6060610ec2610ba5565b15610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef9906125e5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f87906125c5565b60405180910390fd5b60008060606000610fe487878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611620565b8094508193508296505050506000825114611034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102b90612605565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff166323b872dd857f00000000000000000000000000000000000000000000000000000000000000008d6040518463ffffffff1660e01b8152600401611091939291906123b4565b602060405180830381600087803b1580156110ab57600080fd5b505af11580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e39190611f22565b5060006110f38d868e8e87610d45565b905061112360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686848d8d866116c4565b93505050818a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e18e8d604051611187929190612470565b60405180910390a4816040516020016111a09190612665565b6040516020818303038152906040529350505050979650505050505050565b6111c8826105ed565b6111d9816111d4611276565b61127e565b6111e383836113fb565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b6112888282610cb7565b611317576112ad8173ffffffffffffffffffffffffffffffffffffffff1660146117f8565b6112bb8360001c60206117f8565b6040516020016112cc929190612305565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130e9190612543565b60405180910390fd5b5050565b6113258282610cb7565b6113f757600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061139c611276565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6114058282610cb7565b156114d857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061147d611276565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6114e4610ba5565b611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a90612585565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611567611276565b604051611574919061233f565b60405180910390a1565b611586610ba5565b156115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd906125e5565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611609611276565b604051611616919061233f565b60405180910390a1565b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561169a578380602001905181019061168d9190611d06565b80925081945050506116a1565b3392508390505b808060200190518101906116b59190612056565b80925081935050509193909250565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b81526004016117309897969594939291906123eb565b6020604051808303818588803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117829190611fd9565b9050808873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0866040516117e291906124cf565b60405180910390a4809150509695505050505050565b60606000600283600261180b919061276f565b6118159190612719565b67ffffffffffffffff811115611854577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156118865781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061196e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026119ae919061276f565b6119b89190612719565b90505b6001811115611aa4577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611a5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611a9d906128d1565b90506119bb565b5060008414611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf90612565565b60405180910390fd5b8091505092915050565b6000611b05611b00846126a5565b612680565b905082815260208101848484011115611b1d57600080fd5b611b2884828561288f565b509392505050565b6000611b43611b3e846126a5565b612680565b905082815260208101848484011115611b5b57600080fd5b611b6684828561289e565b509392505050565b600081359050611b7d81612b5b565b92915050565b600081519050611b9281612b5b565b92915050565b600081519050611ba781612b72565b92915050565b600081519050611bbc81612b89565b92915050565b600081359050611bd181612ba0565b92915050565b600081359050611be681612bb7565b92915050565b60008083601f840112611bfe57600080fd5b8235905067ffffffffffffffff811115611c1757600080fd5b602083019150836001820283011115611c2f57600080fd5b9250929050565b600082601f830112611c4757600080fd5b8135611c57848260208601611af2565b91505092915050565b600082601f830112611c7157600080fd5b8151611c81848260208601611b30565b91505092915050565b600081359050611c9981612bce565b92915050565b600081519050611cae81612bce565b92915050565b600060208284031215611cc657600080fd5b6000611cd484828501611b6e565b91505092915050565b600060208284031215611cef57600080fd5b6000611cfd84828501611b83565b91505092915050565b60008060408385031215611d1957600080fd5b6000611d2785828601611b98565b925050602083015167ffffffffffffffff811115611d4457600080fd5b611d5085828601611c60565b9150509250929050565b60008060008060008060a08789031215611d7357600080fd5b6000611d8189828a01611b6e565b9650506020611d9289828a01611b6e565b9550506040611da389828a01611b6e565b9450506060611db489828a01611c8a565b935050608087013567ffffffffffffffff811115611dd157600080fd5b611ddd89828a01611bec565b92509250509295509295509295565b600080600080600060a08688031215611e0457600080fd5b6000611e1288828901611b6e565b9550506020611e2388828901611b6e565b9450506040611e3488828901611b6e565b9350506060611e4588828901611c8a565b925050608086013567ffffffffffffffff811115611e6257600080fd5b611e6e88828901611c36565b9150509295509295909350565b600080600080600080600060c0888a031215611e9657600080fd5b6000611ea48a828b01611b6e565b9750506020611eb58a828b01611b6e565b9650506040611ec68a828b01611c8a565b9550506060611ed78a828b01611c8a565b9450506080611ee88a828b01611c8a565b93505060a088013567ffffffffffffffff811115611f0557600080fd5b611f118a828b01611bec565b925092505092959891949750929550565b600060208284031215611f3457600080fd5b6000611f4284828501611bad565b91505092915050565b600060208284031215611f5d57600080fd5b6000611f6b84828501611bc2565b91505092915050565b60008060408385031215611f8757600080fd5b6000611f9585828601611bc2565b9250506020611fa685828601611b6e565b9150509250929050565b600060208284031215611fc257600080fd5b6000611fd084828501611bd7565b91505092915050565b600060208284031215611feb57600080fd5b6000611ff984828501611c9f565b91505092915050565b6000806040838503121561201557600080fd5b600061202385828601611c8a565b925050602083013567ffffffffffffffff81111561204057600080fd5b61204c85828601611c36565b9150509250929050565b6000806040838503121561206957600080fd5b600061207785828601611c9f565b925050602083015167ffffffffffffffff81111561209457600080fd5b6120a085828601611c60565b9150509250929050565b6120b3816127c9565b82525050565b6120c2816127ed565b82525050565b6120d1816127f9565b82525050565b60006120e2826126d6565b6120ec81856126ec565b93506120fc81856020860161289e565b6121058161298a565b840191505092915050565b61211981612859565b82525050565b6121288161287d565b82525050565b6000612139826126e1565b61214381856126fd565b935061215381856020860161289e565b61215c8161298a565b840191505092915050565b6000612172826126e1565b61217c818561270e565b935061218c81856020860161289e565b80840191505092915050565b60006121a56020836126fd565b91506121b08261299b565b602082019050919050565b60006121c86014836126fd565b91506121d3826129c4565b602082019050919050565b60006121eb600f836126fd565b91506121f6826129ed565b602082019050919050565b600061220e600d836126fd565b915061221982612a16565b602082019050919050565b60006122316010836126fd565b915061223c82612a3f565b602082019050919050565b6000612254601a836126fd565b915061225f82612a68565b602082019050919050565b600061227760178361270e565b915061228282612a91565b601782019050919050565b600061229a6018836126fd565b91506122a582612aba565b602082019050919050565b60006122bd60118361270e565b91506122c882612ae3565b601182019050919050565b60006122e0602f836126fd565b91506122eb82612b0c565b604082019050919050565b6122ff8161284f565b82525050565b60006123108261226a565b915061231c8285612167565b9150612327826122b0565b91506123338284612167565b91508190509392505050565b600060208201905061235460008301846120aa565b92915050565b600060a08201905061236f60008301886120aa565b61237c60208301876120aa565b61238960408301866120aa565b61239660608301856122f6565b81810360808301526123a881846120d7565b90509695505050505050565b60006060820190506123c960008301866120aa565b6123d660208301856120aa565b6123e360408301846122f6565b949350505050565b600061010082019050612401600083018b6120aa565b61240e602083018a61211f565b61241b60408301896122f6565b61242860608301886120aa565b61243560808301876120aa565b61244260a08301866122f6565b61244f60c08301856122f6565b81810360e083015261246181846120d7565b90509998505050505050505050565b600060408201905061248560008301856120aa565b61249260208301846122f6565b9392505050565b60006020820190506124ae60008301846120b9565b92915050565b60006020820190506124c960008301846120c8565b92915050565b600060208201905081810360008301526124e981846120d7565b905092915050565b6000604082019050818103600083015261250b81856120d7565b9050818103602083015261251f81846120d7565b90509392505050565b600060208201905061253d6000830184612110565b92915050565b6000602082019050818103600083015261255d818461212e565b905092915050565b6000602082019050818103600083015261257e81612198565b9050919050565b6000602082019050818103600083015261259e816121bb565b9050919050565b600060208201905081810360008301526125be816121de565b9050919050565b600060208201905081810360008301526125de81612201565b9050919050565b600060208201905081810360008301526125fe81612224565b9050919050565b6000602082019050818103600083015261261e81612247565b9050919050565b6000602082019050818103600083015261263e8161228d565b9050919050565b6000602082019050818103600083015261265e816122d3565b9050919050565b600060208201905061267a60008301846122f6565b92915050565b600061268a61269b565b905061269682826128fb565b919050565b6000604051905090565b600067ffffffffffffffff8211156126c0576126bf61295b565b5b6126c98261298a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006127248261284f565b915061272f8361284f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156127645761276361292c565b5b828201905092915050565b600061277a8261284f565b91506127858361284f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127be576127bd61292c565b5b828202905092915050565b60006127d48261282f565b9050919050565b60006127e68261282f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006128648261286b565b9050919050565b60006128768261282f565b9050919050565b60006128888261284f565b9050919050565b82818337600083830152505050565b60005b838110156128bc5780820151818401526020810190506128a1565b838111156128cb576000848401525b50505050565b60006128dc8261284f565b915060008214156128f0576128ef61292c565b5b600182039050919050565b6129048261298a565b810181811067ffffffffffffffff821117156129235761292261295b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4e4f545f46524f4d5f4252494447450000000000000000000000000000000000600082015250565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612b64816127c9565b8114612b6f57600080fd5b50565b612b7b816127db565b8114612b8657600080fd5b50565b612b92816127ed565b8114612b9d57600080fd5b50565b612ba9816127f9565b8114612bb457600080fd5b50565b612bc081612803565b8114612bcb57600080fd5b50565b612bd78161284f565b8114612be257600080fd5b5056fea26469706673582212207f91d3cb48b5f8094180edb9736305f28271d452ac721303f2a14339619e354b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 397,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2512,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "l2Counterpart",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}