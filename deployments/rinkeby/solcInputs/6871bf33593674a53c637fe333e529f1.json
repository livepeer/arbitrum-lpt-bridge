{
  "language": "Solidity",
  "sources": {
    "contracts/L1/gateway/L1Migrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {L1ArbitrumMessenger} from \"./L1ArbitrumMessenger.sol\";\nimport {IMigrator} from \"../../interfaces/IMigrator.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n\ninterface IBondingManager {\n    function isRegisteredTranscoder(address _addr) external view returns (bool);\n    function pendingStake(address _addr, uint256 _endRound) external view returns (uint256);\n    function pendingFees(address _addr, uint256 _endRound) external view returns (uint256);\n    function getDelegator(address _addr) external view returns (\n        uint256 bondedAmount,\n        uint256 fees,\n        address delegateAddress,\n        uint256 delegatedAmount,\n        uint256 startRound,\n        uint256 lastClaimRound,\n        uint256 nextUnbondingLockId\n    );\n    function getDelegatorUnbondingLock(\n        address _addr,\n        uint256 _unbondingLockId\n    ) external view returns (uint256 amount, uint256 withdrawRound);\n}\n\ninterface ITicketBroker {\n    struct Sender {\n        uint256 deposit;\n        uint256 withdrawRound;\n    }\n\n    struct ReserveInfo {\n        uint256 fundsRemaining;\n        uint256 claimedInCurrentRound;\n    }\n\n    function getSenderInfo(address _addr)\n        external\n        view\n        returns (\n            Sender memory sender,\n            ReserveInfo memory reserve\n        );\n}\n\ninterface IL2Migrator is IMigrator {\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params) external;\n    function finalizeMigrateUnbondingLocks(MigrateUnbondingLocksParams memory _params) external;\n    function finalizeMigrateSender(MigrateSenderParams memory _params) external;\n}\n\ncontract L1Migrator is L1ArbitrumMessenger, IMigrator, EIP712 {\n    address public immutable bondingManagerAddr;\n    address public immutable ticketBrokerAddr;\n    address public immutable l2MigratorAddr;\n\n    event MigrateDelegatorInitiated(\n        uint256 indexed seqNo,\n        MigrateDelegatorParams params\n    );\n\n    event MigrateUnbondingLocksInitiated(\n        uint256 indexed seqNo,\n        MigrateUnbondingLocksParams params\n    );\n\n    event MigrateSenderInitiated(\n        uint256 indexed seqNo,\n        MigrateSenderParams params\n    );\n\n    bytes32 private constant MIGRATE_DELEGATOR_TYPE_HASH = \n        keccak256(\"MigrateDelegator(address l1Addr,address l2Addr)\");\n\n    bytes32 private constant MIGRATE_UNBONDING_LOCKS_TYPE_HASH = \n        keccak256(\"MigrateUnbondingLocks(address l1Addr,address l2Addr,uint256[] unbondingLockIds)\");\n\n    bytes32 private constant MIGRATE_SENDER_TYPE_HASH = \n        keccak256(\"MigrateSender(address l1Addr,address l2Addr)\");\n\n    constructor(\n        address _inbox,\n        address _bondingManagerAddr,\n        address _ticketBrokerAddr,\n        address _l2MigratorAddr\n    ) L1ArbitrumMessenger(_inbox) EIP712(\"Livepeer L1Migrator\", \"1\") {\n        bondingManagerAddr = _bondingManagerAddr;\n        ticketBrokerAddr = _ticketBrokerAddr;\n        l2MigratorAddr = _l2MigratorAddr;\n    }\n\n    function migrateDelegator(\n        address _l1Addr,\n        address _l2Addr,\n        bytes memory _sig,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        uint256 _maxSubmissionCost\n    )\n        external\n    {\n        requireValidMigration(\n            _l1Addr,\n            _l2Addr,\n            keccak256(abi.encode(\n                MIGRATE_DELEGATOR_TYPE_HASH,\n                _l1Addr,\n                _l2Addr\n            )),\n            _sig\n        );\n\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\n\n        // pendingStake() ignores the _endRound arg\n        uint256 stake = bondingManager.pendingStake(_l1Addr, 0);\n        // pendingFees() ignores the _endRound arg\n        uint256 fees = bondingManager.pendingFees(_l1Addr, 0);\n        (\n            ,\n            ,\n            address delegateAddress,\n            uint256 delegatedAmount,\n            ,\n            ,\n        ) = bondingManager.getDelegator(_l1Addr);\n\n        // We do not prevent migration replays here to minimize L1 gas costs\n        // The L2Migrator is responsible for rejecting migration replays\n\n        // Call finalizeMigrateDelegator() on L2Migrator\n        MigrateDelegatorParams memory params = MigrateDelegatorParams({\n            l1Addr: _l1Addr,\n            l2Addr: _l2Addr,\n            stake: stake,\n            delegatedStake: delegatedAmount,\n            fees: fees,\n            delegate: delegateAddress\n        });\n        bytes memory data = abi.encodeWithSelector(\n            IL2Migrator.finalizeMigrateDelegator.selector,\n            params\n        );\n        uint256 seqNo = sendTxToL2(\n            l2MigratorAddr,\n            _l2Addr, // Refunds to the L2 address\n            _maxSubmissionCost,\n            _maxGas,\n            _gasPriceBid,\n            data\n        );\n\n        emit MigrateDelegatorInitiated(seqNo, params);\n    }\n\n    function migrateUnbondingLocks(\n        address _l1Addr,\n        address _l2Addr,\n        uint256[] calldata _unbondingLockIds,\n        bytes memory _sig,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        uint256 _maxSubmissionCost\n    )\n        external\n    {\n        requireValidMigration(\n            _l1Addr,\n            _l2Addr,\n            keccak256(abi.encode(\n                MIGRATE_UNBONDING_LOCKS_TYPE_HASH,\n                _l1Addr,\n                _l2Addr,\n                keccak256(abi.encodePacked(_unbondingLockIds))\n            )),\n            _sig\n        );\n\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr); \n\n        uint256 total = 0;\n        for (uint256 i = 0; i < _unbondingLockIds.length; i++) {\n            (\n                uint256 amount,\n            ) = bondingManager.getDelegatorUnbondingLock(_l1Addr, _unbondingLockIds[i]);\n\n            total += amount;\n        }\n\n        // We do not prevent migration replays here to minimize L1 gas costs\n        // The L2Migrator is responsible for rejecting migration replays\n\n        // Call finalizeMigrateUnbondingLocks() on L2Migrator\n        MigrateUnbondingLocksParams memory params = MigrateUnbondingLocksParams({\n            l1Addr: _l1Addr,\n            l2Addr: _l2Addr,\n            total: total,\n            unbondingLockIds: _unbondingLockIds\n        });\n        bytes memory data = abi.encodeWithSelector(\n            IL2Migrator.finalizeMigrateUnbondingLocks.selector,\n            params\n        );\n        uint256 seqNo = sendTxToL2(\n            l2MigratorAddr,\n            _l2Addr, // Refund to the L2 address\n            _maxSubmissionCost,\n            _maxGas,\n            _gasPriceBid,\n            data\n        );\n        \n        emit MigrateUnbondingLocksInitiated(seqNo, params);\n    }\n\n    function migrateSender(\n        address _l1Addr,\n        address _l2Addr,\n        bytes memory _sig,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        uint256 _maxSubmissionCost\n    )\n        external\n    {\n        requireValidMigration(\n            _l1Addr,\n            _l2Addr,\n            keccak256(abi.encode(\n                MIGRATE_SENDER_TYPE_HASH,\n                _l1Addr,\n                _l2Addr\n            )),\n            _sig\n        );\n\n        ITicketBroker ticketBroker = ITicketBroker(ticketBrokerAddr);\n\n        (\n            ITicketBroker.Sender memory sender,\n            ITicketBroker.ReserveInfo memory reserveInfo\n        ) = ticketBroker.getSenderInfo(_l1Addr);\n\n        // We do not prevent migration replays here to minimize L1 gas costs\n        // The L2Migrator is responsible for rejecting migration replays\n\n        // Call finalizeMigrateSender() on L2Migrator\n        MigrateSenderParams memory params = MigrateSenderParams({\n            l1Addr: _l1Addr,\n            l2Addr: _l2Addr,\n            deposit: sender.deposit,\n            reserve: reserveInfo.fundsRemaining\n        });\n        bytes memory data = abi.encodeWithSelector(\n            IL2Migrator.finalizeMigrateSender.selector,\n            params\n        );\n        uint256 seqNo = sendTxToL2(\n            l2MigratorAddr,\n            _l2Addr, // Refund to the L2 address\n            _maxSubmissionCost,\n            _maxGas,\n            _gasPriceBid,\n            data\n        );\n        \n        emit MigrateSenderInitiated(seqNo, params);\n    }\n\n    function requireValidMigration(\n        address _l1Addr,\n        address _l2Addr,\n        bytes32 _structHash,\n        bytes memory _sig\n    )\n        internal\n        view\n    {\n        require(\n            _l2Addr != address(0),\n            \"L1Migrator#requireValidMigration: INVALID_L2_ADDR\"\n        );\n        require(\n            msg.sender == _l1Addr || recoverSigner(_structHash, _sig) == _l1Addr,\n            \"L1Migrator#requireValidMigration: FAIL_AUTH\"\n        );\n    }\n\n    function recoverSigner(\n        bytes32 _structHash,\n        bytes memory _sig\n    )\n        internal\n        view\n        returns (address)\n    {\n        if (_sig.length == 0) {\n            return address(0);\n        }\n\n        bytes32 hash = _hashTypedDataV4(_structHash);\n        return ECDSA.recover(hash, _sig);\n    }\n}"
    },
    "contracts/L1/gateway/L1ArbitrumMessenger.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IBridge} from \"../../arbitrum/IBridge.sol\";\nimport {IInbox} from \"../../arbitrum/IInbox.sol\";\nimport {IOutbox} from \"../../arbitrum/IOutbox.sol\";\n\nabstract contract L1ArbitrumMessenger {\n    IInbox public immutable inbox;\n\n    event TxToL2(\n        address indexed from,\n        address indexed to,\n        uint256 indexed seqNum,\n        bytes data\n    );\n\n    constructor(address _inbox) {\n        inbox = IInbox(_inbox);\n    }\n\n    modifier onlyL2Counterpart(address l2Counterpart) {\n        // a message coming from the counterpart gateway was executed by the bridge\n        address bridge = inbox.bridge();\n        require(msg.sender == bridge, \"NOT_FROM_BRIDGE\");\n\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\n            .l2ToL1Sender();\n        require(l2ToL1Sender == l2Counterpart, \"ONLY_COUNTERPART_GATEWAY\");\n        _;\n    }\n\n    function sendTxToL2(\n        address target,\n        address user,\n        uint256 maxSubmissionCost,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        bytes memory data\n    ) internal returns (uint256) {\n        uint256 seqNum = inbox.createRetryableTicket{value: msg.value}(\n            target,\n            0, // we always assume that l2CallValue = 0\n            maxSubmissionCost,\n            user,\n            user,\n            maxGas,\n            gasPriceBid,\n            data\n        );\n        emit TxToL2(user, target, seqNum, data);\n        return seqNum;\n    }\n}\n"
    },
    "contracts/interfaces/IMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMigrator {\n    struct MigrateDelegatorParams {\n        // Address that is migrating from L1\n        address l1Addr;\n        // Address to use on L2\n        // If null, l1Addr is used on L2\n        address l2Addr;\n        // Stake of l1Addr on L1\n        uint256 stake;\n        // Delegated stake of l1Addr on L1\n        uint256 delegatedStake;\n        // Fees of l1Addr on L1\n        uint256 fees;\n        // Delegate of l1Addr on L1\n        address delegate;\n    }\n\n    struct MigrateUnbondingLocksParams {\n        // Address that is migrating from L1\n        address l1Addr;\n        // Address to use on L2\n        // If null, l1Addr is used on L2\n        address l2Addr;\n        // Total tokens in unbonding locks\n        uint256 total;\n        // IDs of unbonding locks being migrated\n        uint256[] unbondingLockIds;\n    }\n\n    struct MigrateSenderParams {\n        // Address that is migrating from L1\n        address l1Addr;\n        // Address to use on L2\n        // If null, l1Addr is used on L2\n        address l2Addr;\n        // Deposit of l1Addr on L1\n        uint256 deposit;\n        // Reserve of l1Addr on L1\n        uint256 reserve;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "contracts/arbitrum/IBridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\ninterface IBridge {\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    );\n\n    event BridgeCallTriggered(\n        address indexed outbox,\n        address indexed destAddr,\n        uint256 amount,\n        bytes data\n    );\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    function deliverMessageToInbox(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address destAddr,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    // These are only callable by the admin\n    function setInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // View functions\n\n    function activeOutbox() external view returns (address);\n\n    function allowedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function messageCount() external view returns (uint256);\n}\n"
    },
    "contracts/arbitrum/IInbox.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\nimport \"./IMessageProvider.sol\";\n\ninterface IInbox is IMessageProvider {\n    function sendL2Message(bytes calldata messageData)\n        external\n        returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        uint256 nonce,\n        address destAddr,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        address destAddr,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        uint256 nonce,\n        address destAddr,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        address destAddr,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function createRetryableTicket(\n        address destAddr,\n        uint256 arbTxCallValue,\n        uint256 maxSubmissionCost,\n        address submissionRefundAddress,\n        address valueRefundAddress,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function createRetryableTicketNoRefundAliasRewrite(\n        address destAddr,\n        uint256 arbTxCallValue,\n        uint256 maxSubmissionCost,\n        address submissionRefundAddress,\n        address valueRefundAddress,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function depositEth(uint256 maxSubmissionCost)\n        external\n        payable\n        returns (uint256);\n\n    function bridge() external view returns (address);\n\n    function pauseCreateRetryables() external;\n\n    function unpauseCreateRetryables() external;\n\n    function startRewriteAddress() external;\n\n    function stopRewriteAddress() external;\n}\n"
    },
    "contracts/arbitrum/IOutbox.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\ninterface IOutbox {\n    event OutboxEntryCreated(\n        uint256 indexed batchNum,\n        uint256 outboxEntryIndex,\n        bytes32 outputRoot,\n        uint256 numInBatch\n    );\n    event OutBoxTransactionExecuted(\n        address indexed destAddr,\n        address indexed l2Sender,\n        uint256 indexed outboxEntryIndex,\n        uint256 transactionIndex\n    );\n\n    function l2ToL1Sender() external view returns (address);\n\n    function l2ToL1Block() external view returns (uint256);\n\n    function l2ToL1EthBlock() external view returns (uint256);\n\n    function l2ToL1Timestamp() external view returns (uint256);\n\n    function l2ToL1BatchNum() external view returns (uint256);\n\n    function l2ToL1OutputId() external view returns (bytes32);\n\n    function processOutgoingMessages(\n        bytes calldata sendsData,\n        uint256[] calldata sendLengths\n    ) external;\n\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\n}\n"
    },
    "contracts/arbitrum/IMessageProvider.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\ninterface IMessageProvider {\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\n\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\n}\n"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}