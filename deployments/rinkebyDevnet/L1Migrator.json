{
  "address": "0x464F814bbDC55069365B33d40B0C0dBb4239dfCf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondingManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticketBrokerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeMinterAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1LPTGatewayAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2MigratorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateDelegatorInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateSenderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateUnbondingLocksInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondingManagerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeMinterAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        }
      ],
      "name": "getMigrateDelegatorParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        }
      ],
      "name": "getMigrateSenderParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        }
      ],
      "name": "getMigrateUnbondingLocksParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1LPTGatewayAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MigratorAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateDelegator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateLPT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateSender",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondingLockIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "migrateUnbondingLocks",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBrokerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba16136bf41fa9679bef9cee2e9946cae3891cc48c79dabec56cc4f96d006d01",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0x464F814bbDC55069365B33d40B0C0dBb4239dfCf",
    "transactionIndex": 11,
    "gasUsed": "3855627",
    "logsBloom": "0x00000004000000000800000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000500000000000000100000000000020000400000000000000800000000010000000000000000000000000000000000000000000008000000004000000000000000020000000000000000000000000000000000000000000000000000000000000000001000000000000000020000000000000000008000000000000000000000000100000000000020000000800000000000000000000000000400000000000000000000000000000000",
    "blockHash": "0x79a910ac7922121c26b040703492e17eec5a5e1ce0c8cf42bec35a1d892a3cf9",
    "transactionHash": "0xba16136bf41fa9679bef9cee2e9946cae3891cc48c79dabec56cc4f96d006d01",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10024917,
        "transactionHash": "0xba16136bf41fa9679bef9cee2e9946cae3891cc48c79dabec56cc4f96d006d01",
        "address": "0x464F814bbDC55069365B33d40B0C0dBb4239dfCf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x79a910ac7922121c26b040703492e17eec5a5e1ce0c8cf42bec35a1d892a3cf9"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10024917,
        "transactionHash": "0xba16136bf41fa9679bef9cee2e9946cae3891cc48c79dabec56cc4f96d006d01",
        "address": "0x464F814bbDC55069365B33d40B0C0dBb4239dfCf",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x79a910ac7922121c26b040703492e17eec5a5e1ce0c8cf42bec35a1d892a3cf9"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10024917,
        "transactionHash": "0xba16136bf41fa9679bef9cee2e9946cae3891cc48c79dabec56cc4f96d006d01",
        "address": "0x464F814bbDC55069365B33d40B0C0dBb4239dfCf",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
        "logIndex": 8,
        "blockHash": "0x79a910ac7922121c26b040703492e17eec5a5e1ce0c8cf42bec35a1d892a3cf9"
      }
    ],
    "blockNumber": 10024917,
    "cumulativeGasUsed": "4972401",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x578BAde599406A8fE3d24Fd7f7211c0911F5B29e",
    "0xa3Aa52cE79e85a21d9cCdA705C57e426B160112c",
    "0x511Bc4556D823Ae99630aE8de28b9B80Df90eA2e",
    "0xf623811b08b45792d0223D77d9c922dAE29712eC",
    "0x8573f2F5A3Bd960eeE3D998473e50C75cDbE6828",
    "0xEC97De7F469B705887CFcc83d9cAa215f97c168E",
    "0xD527B4ba179F41789dC00A144c1E1e374687CD5E"
  ],
  "solcInputHash": "3f7f51b7bc6dda218aa0e2e13638ff2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketBrokerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeMinterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1LPTGatewayAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2MigratorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateDelegatorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateSenderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateUnbondingLocksInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeMinterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"}],\"name\":\"getMigrateDelegatorParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"}],\"name\":\"getMigrateSenderParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"}],\"name\":\"getMigrateUnbondingLocksParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1LPTGatewayAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MigratorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateDelegator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateLPT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateSender\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"migrateUnbondingLocks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBrokerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMigrateDelegatorParams(address,address)\":{\"params\":{\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\"},\"returns\":{\"data\":\"L2 calldata for finalizeMigrateDelegator() in L2Migrator\",\"params\":\"MigrateDelegatorParams to use for finalizeMigrateDelegator() in L2Migrator\"}},\"getMigrateSenderParams(address,address)\":{\"params\":{\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\"},\"returns\":{\"data\":\"L2 calldata for finalizeMigrateSender() in L2Migrator\",\"params\":\"MigrateSenderParams to use for finalizeMigrateSender() in L2Migrator\"}},\"getMigrateUnbondingLocksParams(address,address,uint256[])\":{\"params\":{\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_unbondingLockIds\":\"IDs of unbonding locks in L1 BondingManager to migrate\"},\"returns\":{\"data\":\"L2 calldata for finalizeMigrateUnbondingLocks() in L2Migrator\",\"params\":\"MigrateUnbondingLocksParams to use for finalizeMigrateUnbondingLocks() in L2Migrator\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateDelegator(address,address,bytes,uint256,uint256,uint256)\":{\"details\":\"The term \\\"delegator\\\" here can refer to both a transcoder (self-delegated delegator) and delegator.\",\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\",\"_sig\":\"Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\"}},\"migrateETH(uint256,uint256,uint256)\":{\"details\":\"Anyone can call this function.\",\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\"}},\"migrateLPT(uint256,uint256,uint256)\":{\"details\":\"Anyone can call this function.\",\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\"}},\"migrateSender(address,address,bytes,uint256,uint256,uint256)\":{\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\",\"_sig\":\"Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\"}},\"migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)\":{\"params\":{\"_gasPriceBid\":\"Gas price bid for L2 execution\",\"_l1Addr\":\"Address migrating from L1\",\"_l2Addr\":\"Address to use on L2\",\"_maxGas\":\"Gas limit for L2 execution\",\"_maxSubmissionCost\":\"Max ETH to pay for retryable ticket base submission fee\",\"_sig\":\"Optional EIP-712 signature over a payload that includes _l1Addr, _l2Addr and _unbondingLockIds\",\"_unbondingLockIds\":\"IDs of unbonding locks in the L1 BondingManager to migrate\"}},\"pause()\":{\"details\":\"Only callable by addresses with governor role\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Only callable by addresses with governor role\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMigrateDelegatorParams(address,address)\":{\"notice\":\"Return L2 calldata and MigrateDelegatorParams to use for a L2 call on L2Migrator\"},\"getMigrateSenderParams(address,address)\":{\"notice\":\"Return L2 calldata and MigrateSenderParams to use for a L2 call on L2Migrator\"},\"getMigrateUnbondingLocksParams(address,address,uint256[])\":{\"notice\":\"Return L2 calldata and MigrateUnbondingLocksParams to use for a L2 call on L2Migrator\"},\"migrateDelegator(address,address,bytes,uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to L2Migrator to migrate transcoder/delegator state from the L1 BondingManager.\"},\"migrateETH(uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to send ETH from the L1BridgeMinter to the L2Migrator.\"},\"migrateLPT(uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to send LPT from the L1BridgeMinter to the L2Migrator.\"},\"migrateSender(address,address,bytes,uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to L2Migrator to migrate sender deposit/reserve state from the L1 TicketBroker.\"},\"migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)\":{\"notice\":\"Executes a L2 call to L2Migrator to migrate unbonding locks state from the L1 BondingManager.\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/gateway/L1Migrator.sol\":\"L1Migrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/L1/gateway/IL1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL1LPTGateway {\\n    event DepositInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _sequenceNumber,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalFinalized(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf3c4fceb1627089f5a91e3187c815fdf363cae07ff43ddf89d9ff6b016f9f59c\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBridge} from \\\"../../arbitrum/IBridge.sol\\\";\\nimport {IInbox} from \\\"../../arbitrum/IInbox.sol\\\";\\nimport {IOutbox} from \\\"../../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1ArbitrumMessenger {\\n    IInbox public immutable inbox;\\n\\n    event TxToL2(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed seqNum,\\n        bytes data\\n    );\\n\\n    constructor(address _inbox) {\\n        inbox = IInbox(_inbox);\\n    }\\n\\n    modifier onlyL2Counterpart(address l2Counterpart) {\\n        // a message coming from the counterpart gateway was executed by the bridge\\n        address bridge = inbox.bridge();\\n        require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\\n            .l2ToL1Sender();\\n        require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address from,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        return\\n            sendTxToL2(\\n                target,\\n                from,\\n                msg.value,\\n                0, // we always assume that l2CallValue = 0\\n                maxSubmissionCost,\\n                maxGas,\\n                gasPriceBid,\\n                data\\n            );\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address from,\\n        uint256 _l1CallValue,\\n        uint256 _l2CallValue,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        uint256 seqNum = inbox.createRetryableTicket{value: _l1CallValue}(\\n            target,\\n            _l2CallValue,\\n            maxSubmissionCost,\\n            from,\\n            from,\\n            maxGas,\\n            gasPriceBid,\\n            data\\n        );\\n        emit TxToL2(from, target, seqNum, data);\\n        return seqNum;\\n    }\\n}\\n\",\"keccak256\":\"0x45aa92adba58ff5ce26765cdd383295aad3085241d2c0bf925f622043ebecbd6\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {L1ArbitrumMessenger} from \\\"./L1ArbitrumMessenger.sol\\\";\\nimport {IL1LPTGateway} from \\\"./IL1LPTGateway.sol\\\";\\nimport {IMigrator} from \\\"../../interfaces/IMigrator.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IBondingManager {\\n    function isRegisteredTranscoder(address _addr) external view returns (bool);\\n\\n    function pendingStake(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pendingFees(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDelegator(address _addr)\\n        external\\n        view\\n        returns (\\n            uint256 bondedAmount,\\n            uint256 fees,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            uint256 startRound,\\n            uint256 lastClaimRound,\\n            uint256 nextUnbondingLockId\\n        );\\n\\n    function getDelegatorUnbondingLock(address _addr, uint256 _unbondingLockId)\\n        external\\n        view\\n        returns (uint256 amount, uint256 withdrawRound);\\n}\\n\\ninterface ITicketBroker {\\n    struct Sender {\\n        uint256 deposit;\\n        uint256 withdrawRound;\\n    }\\n\\n    struct ReserveInfo {\\n        uint256 fundsRemaining;\\n        uint256 claimedInCurrentRound;\\n    }\\n\\n    function getSenderInfo(address _addr)\\n        external\\n        view\\n        returns (Sender memory sender, ReserveInfo memory reserve);\\n}\\n\\ninterface IBridgeMinter {\\n    function withdrawETHToL1Migrator() external returns (uint256);\\n\\n    function withdrawLPTToL1Migrator() external returns (uint256);\\n}\\n\\ninterface ApproveLike {\\n    function approve(address _addr, uint256 _amount) external;\\n}\\n\\ninterface IL2Migrator is IMigrator {\\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params)\\n        external;\\n\\n    function finalizeMigrateUnbondingLocks(\\n        MigrateUnbondingLocksParams memory _params\\n    ) external;\\n\\n    function finalizeMigrateSender(MigrateSenderParams memory _params) external;\\n}\\n\\ncontract L1Migrator is\\n    L1ArbitrumMessenger,\\n    IMigrator,\\n    EIP712,\\n    AccessControl,\\n    Pausable\\n{\\n    address public immutable bondingManagerAddr;\\n    address public immutable ticketBrokerAddr;\\n    address public immutable bridgeMinterAddr;\\n    address public immutable tokenAddr;\\n    address public immutable l1LPTGatewayAddr;\\n    address public immutable l2MigratorAddr;\\n\\n    event MigrateDelegatorInitiated(\\n        uint256 indexed seqNo,\\n        MigrateDelegatorParams params\\n    );\\n\\n    event MigrateUnbondingLocksInitiated(\\n        uint256 indexed seqNo,\\n        MigrateUnbondingLocksParams params\\n    );\\n\\n    event MigrateSenderInitiated(\\n        uint256 indexed seqNo,\\n        MigrateSenderParams params\\n    );\\n\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\n    bytes32 private constant MIGRATE_DELEGATOR_TYPE_HASH =\\n        keccak256(\\\"MigrateDelegator(address l1Addr,address l2Addr)\\\");\\n\\n    bytes32 private constant MIGRATE_UNBONDING_LOCKS_TYPE_HASH =\\n        keccak256(\\n            \\\"MigrateUnbondingLocks(address l1Addr,address l2Addr,uint256[] unbondingLockIds)\\\"\\n        );\\n\\n    bytes32 private constant MIGRATE_SENDER_TYPE_HASH =\\n        keccak256(\\\"MigrateSender(address l1Addr,address l2Addr)\\\");\\n\\n    constructor(\\n        address _inbox,\\n        address _bondingManagerAddr,\\n        address _ticketBrokerAddr,\\n        address _bridgeMinterAddr,\\n        address _tokenAddr,\\n        address _l1LPTGatewayAddr,\\n        address _l2MigratorAddr\\n    ) L1ArbitrumMessenger(_inbox) EIP712(\\\"Livepeer L1Migrator\\\", \\\"1\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        bondingManagerAddr = _bondingManagerAddr;\\n        ticketBrokerAddr = _ticketBrokerAddr;\\n        bridgeMinterAddr = _bridgeMinterAddr;\\n        tokenAddr = _tokenAddr;\\n        l1LPTGatewayAddr = _l1LPTGatewayAddr;\\n        l2MigratorAddr = _l2MigratorAddr;\\n\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to L2Migrator to migrate transcoder/delegator state from the L1 BondingManager.\\n     * @dev The term \\\"delegator\\\" here can refer to both a transcoder (self-delegated delegator) and delegator.\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _sig Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateDelegator(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        // Authorization\\n        // Either msg.sender == _l1Addr OR signer for _sig == _l1Addr\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(\\n                abi.encode(MIGRATE_DELEGATOR_TYPE_HASH, _l1Addr, _l2Addr)\\n            ),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateDelegatorParams memory params\\n        ) = getMigrateDelegatorParams(_l1Addr, _l2Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refunds to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateDelegatorInitiated(seqNo, params);\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to L2Migrator to migrate unbonding locks state from the L1 BondingManager.\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _unbondingLockIds IDs of unbonding locks in the L1 BondingManager to migrate\\n     * @param _sig Optional EIP-712 signature over a payload that includes _l1Addr, _l2Addr and _unbondingLockIds\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateUnbondingLocks(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] calldata _unbondingLockIds,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        // Authorization\\n        // Either msg.sender == _l1Addr OR signer for _sig == _l1Addr\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(\\n                abi.encode(\\n                    MIGRATE_UNBONDING_LOCKS_TYPE_HASH,\\n                    _l1Addr,\\n                    _l2Addr,\\n                    keccak256(abi.encodePacked(_unbondingLockIds))\\n                )\\n            ),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateUnbondingLocksParams memory params\\n        ) = getMigrateUnbondingLocksParams(_l1Addr, _l2Addr, _unbondingLockIds);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateUnbondingLocksInitiated(seqNo, params);\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to L2Migrator to migrate sender deposit/reserve state from the L1 TicketBroker.\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _sig Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateSender(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes memory _sig,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        // Authorization\\n        // Either msg.sender == _l1Addr OR signer for _sig == _l1Addr\\n        requireValidMigration(\\n            _l1Addr,\\n            _l2Addr,\\n            keccak256(abi.encode(MIGRATE_SENDER_TYPE_HASH, _l1Addr, _l2Addr)),\\n            _sig\\n        );\\n\\n        (\\n            bytes memory data,\\n            MigrateSenderParams memory params\\n        ) = getMigrateSenderParams(_l1Addr, _l2Addr);\\n\\n        // We do not prevent migration replays here to minimize L1 gas costs\\n        // The L2Migrator is responsible for rejecting migration replays\\n\\n        uint256 seqNo = sendTxToL2(\\n            l2MigratorAddr,\\n            _l2Addr, // Refund to the L2 address\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            data\\n        );\\n\\n        emit MigrateSenderInitiated(seqNo, params);\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to send ETH from the L1BridgeMinter to the L2Migrator.\\n     * @dev Anyone can call this function.\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateETH(\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        uint256 amount = IBridgeMinter(bridgeMinterAddr)\\n            .withdrawETHToL1Migrator();\\n\\n        // Any ETH refunded to the L2 alias of this contract can be used for\\n        // other cross-chain txs sent by this contract.\\n        // The retryable ticket created will not be cancellable since this contract\\n        // currently does not support cross-chain txs to call ArbRetryableTx.cancel().\\n        // Regarding the comment below on this contract receiving refunds:\\n        // msg.sender also cannot be the address to receive refunds as beneficiary because otherwise\\n        // msg.sender could cancel the ticket before it is executed on L2 to receive the L2 call value.\\n        sendTxToL2(\\n            l2MigratorAddr,\\n            address(this), // L2 alias of this contract will receive refunds\\n            msg.value,\\n            amount,\\n            _maxSubmissionCost,\\n            _maxGas,\\n            _gasPriceBid,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes a L2 call to send LPT from the L1BridgeMinter to the L2Migrator.\\n     * @dev Anyone can call this function.\\n     * @param _maxGas Gas limit for L2 execution\\n     * @param _gasPriceBid Gas price bid for L2 execution\\n     * @param _maxSubmissionCost Max ETH to pay for retryable ticket base submission fee\\n     */\\n    function migrateLPT(\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable whenNotPaused {\\n        uint256 amount = IBridgeMinter(bridgeMinterAddr)\\n            .withdrawLPTToL1Migrator();\\n\\n        // Approve L1LPTGateway to pull tokens\\n        ApproveLike(tokenAddr).approve(l1LPTGatewayAddr, amount);\\n        // Trigger cross-chain transfer with L1LPTGateway which will pull and escrow tokens\\n        // Forward msg.value to outboundTransfer() to be used for cross-chain tx\\n        IL1LPTGateway(l1LPTGatewayAddr).outboundTransfer{value: msg.value}(\\n            tokenAddr,\\n            l2MigratorAddr,\\n            amount,\\n            _maxGas,\\n            _gasPriceBid,\\n            abi.encode(_maxSubmissionCost, \\\"\\\")\\n        );\\n    }\\n\\n    /**\\n     * @notice Pause the contract\\n     * @dev Only callable by addresses with governor role\\n     */\\n    function pause() external onlyRole(GOVERNOR_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract\\n     * @dev Only callable by addresses with governor role\\n     */\\n    function unpause() external onlyRole(GOVERNOR_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Return L2 calldata and MigrateDelegatorParams to use for a L2 call on L2Migrator\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @return data L2 calldata for finalizeMigrateDelegator() in L2Migrator\\n     * @return params MigrateDelegatorParams to use for finalizeMigrateDelegator() in L2Migrator\\n     */\\n    function getMigrateDelegatorParams(address _l1Addr, address _l2Addr)\\n        public\\n        view\\n        returns (bytes memory data, MigrateDelegatorParams memory params)\\n    {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        // pendingStake() ignores the _endRound arg\\n        uint256 stake = bondingManager.pendingStake(_l1Addr, 0);\\n        // pendingFees() ignores the _endRound arg\\n        uint256 fees = bondingManager.pendingFees(_l1Addr, 0);\\n        (\\n            ,\\n            ,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            ,\\n            ,\\n\\n        ) = bondingManager.getDelegator(_l1Addr);\\n\\n        // Construct params and L2 calldata for finalizeMigrateDelegator() on L2Migrator\\n        params = MigrateDelegatorParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            stake: stake,\\n            delegatedStake: delegatedAmount,\\n            fees: fees,\\n            delegate: delegateAddress\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateDelegator.selector,\\n            params\\n        );\\n    }\\n\\n    /**\\n     * @notice Return L2 calldata and MigrateSenderParams to use for a L2 call on L2Migrator\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @return data L2 calldata for finalizeMigrateSender() in L2Migrator\\n     * @return params MigrateSenderParams to use for finalizeMigrateSender() in L2Migrator\\n     */\\n    function getMigrateSenderParams(address _l1Addr, address _l2Addr)\\n        public\\n        view\\n        returns (bytes memory data, MigrateSenderParams memory params)\\n    {\\n        ITicketBroker ticketBroker = ITicketBroker(ticketBrokerAddr);\\n\\n        (\\n            ITicketBroker.Sender memory sender,\\n            ITicketBroker.ReserveInfo memory reserveInfo\\n        ) = ticketBroker.getSenderInfo(_l1Addr);\\n\\n        // Construct params and L2 calldata for finalizeMigrateSender() on L2Migrator\\n        params = MigrateSenderParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            deposit: sender.deposit,\\n            reserve: reserveInfo.fundsRemaining\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateSender.selector,\\n            params\\n        );\\n    }\\n\\n    /**\\n     * @notice Return L2 calldata and MigrateUnbondingLocksParams to use for a L2 call on L2Migrator\\n     * @param _l1Addr Address migrating from L1\\n     * @param _l2Addr Address to use on L2\\n     * @param _unbondingLockIds IDs of unbonding locks in L1 BondingManager to migrate\\n     * @return data L2 calldata for finalizeMigrateUnbondingLocks() in L2Migrator\\n     * @return params MigrateUnbondingLocksParams to use for finalizeMigrateUnbondingLocks() in L2Migrator\\n     */\\n    function getMigrateUnbondingLocksParams(\\n        address _l1Addr,\\n        address _l2Addr,\\n        uint256[] memory _unbondingLockIds\\n    )\\n        public\\n        view\\n        returns (bytes memory data, MigrateUnbondingLocksParams memory params)\\n    {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _unbondingLockIds.length; i++) {\\n            (uint256 amount, ) = bondingManager.getDelegatorUnbondingLock(\\n                _l1Addr,\\n                _unbondingLockIds[i]\\n            );\\n\\n            total += amount;\\n        }\\n\\n        (, , address delegateAddress, , , , ) = bondingManager.getDelegator(\\n            _l1Addr\\n        );\\n\\n        // Construct params and L2 calldata for finalizeMigrateUnbondingLocks() on L2Migrator\\n        params = MigrateUnbondingLocksParams({\\n            l1Addr: _l1Addr,\\n            l2Addr: _l2Addr,\\n            total: total,\\n            unbondingLockIds: _unbondingLockIds,\\n            delegate: delegateAddress\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IL2Migrator.finalizeMigrateUnbondingLocks.selector,\\n            params\\n        );\\n    }\\n\\n    function requireValidMigration(\\n        address _l1Addr,\\n        address _l2Addr,\\n        bytes32 _structHash,\\n        bytes memory _sig\\n    ) internal view {\\n        require(\\n            _l2Addr != address(0),\\n            \\\"L1Migrator#requireValidMigration: INVALID_L2_ADDR\\\"\\n        );\\n        require(\\n            msg.sender == _l1Addr ||\\n                recoverSigner(_structHash, _sig) == _l1Addr,\\n            \\\"L1Migrator#requireValidMigration: FAIL_AUTH\\\"\\n        );\\n    }\\n\\n    function recoverSigner(bytes32 _structHash, bytes memory _sig)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (_sig.length == 0) {\\n            return address(0);\\n        }\\n\\n        bytes32 hash = _hashTypedDataV4(_structHash);\\n        return ECDSA.recover(hash, _sig);\\n    }\\n}\\n\",\"keccak256\":\"0x06d101a5d72b81773cd3bd43a8fcb06778aecae2884098f573c52fed5fa97e20\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x074790dd28b5e4702a50d11a6659de3d72a0e45c868fce801e94eeb5e225770f\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x12f048f1f8cb2c80576e474237e82c86e78de1c7c290f5ac5478e10df1501f74\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x415dddb95232da1302a97721281c362f0003046ad227c6eea998702dd0c2c8fd\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths\\n    ) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6a18a8da62224137abd565e56d3aac1331ee6634c0cbd06e05738d5e18fd53a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMigrator {\\n    struct MigrateDelegatorParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Stake of l1Addr on L1\\n        uint256 stake;\\n        // Delegated stake of l1Addr on L1\\n        uint256 delegatedStake;\\n        // Fees of l1Addr on L1\\n        uint256 fees;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateUnbondingLocksParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Total tokens in unbonding locks\\n        uint256 total;\\n        // IDs of unbonding locks being migrated\\n        uint256[] unbondingLockIds;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateSenderParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Deposit of l1Addr on L1\\n        uint256 deposit;\\n        // Reserve of l1Addr on L1\\n        uint256 reserve;\\n    }\\n}\\n\",\"keccak256\":\"0x4da4a2547b74ca1e20db78d23538c54227bd3746af5d89cd5b81bb23e7c681a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102006040523480156200001257600080fd5b5060405162004d3138038062004d31833981810160405281019062000038919062000658565b6040518060400160405280601381526020017f4c69766570656572204c314d69677261746f72000000000000000000000000008152506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250888073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660c08181525050620001468184846200033c60201b60201c565b60a0818152505080610120818152505050505050506000600160006101000a81548160ff0219169083151502179055506200019a6000801b6200018e6200037860201b60201c565b6200038060201b60201c565b620001cf7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556000801b6200039660201b60201c565b8573ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b815250508473ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1660601b815250508373ffffffffffffffffffffffffffffffffffffffff166101808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff166101c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff166101e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250506200032f620003f960201b60201c565b5050505050505062000897565b60008383834630604051602001620003599594939291906200077c565b6040516020818303038152906040528051906020012090509392505050565b600033905090565b620003928282620004b060201b60201c565b5050565b6000620003a983620005a160201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b62000409620005c060201b60201c565b156200044c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200044390620007d9565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620004976200037860201b60201c565b604051620004a691906200075f565b60405180910390a1565b620004c28282620005d760201b60201c565b6200059d57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620005426200037860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000838152602001908152602001600020600101549050919050565b6000600160009054906101000a900460ff16905090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008151905062000652816200087d565b92915050565b600080600080600080600060e0888a0312156200067457600080fd5b6000620006848a828b0162000641565b9750506020620006978a828b0162000641565b9650506040620006aa8a828b0162000641565b9550506060620006bd8a828b0162000641565b9450506080620006d08a828b0162000641565b93505060a0620006e38a828b0162000641565b92505060c0620006f68a828b0162000641565b91505092959891949750929550565b62000710816200080c565b82525050565b620007218162000820565b82525050565b600062000736601083620007fb565b9150620007438262000854565b602082019050919050565b62000759816200084a565b82525050565b600060208201905062000776600083018462000705565b92915050565b600060a08201905062000793600083018862000716565b620007a2602083018762000716565b620007b1604083018662000716565b620007c060608301856200074e565b620007cf608083018462000705565b9695505050505050565b60006020820190508181036000830152620007f48162000727565b9050919050565b600082825260208201905092915050565b600062000819826200082a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b62000888816200080c565b81146200089457600080fd5b50565b60805160601c60a05160c05160e05161010051610120516101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c61438a620009a7600039600081816107b901528181610f8b015281816110e1015281816115b2015281816116c2015261179a015260008181610fce015281816114e30152611554015260008181611009015281816114a7015261159101526000818161065601528181610ee6015261140501526000818161118e015261122801526000818161086001528181610bbc015261180a015260006122a2015260006122e4015260006122c30152600061224f0152600061227701526000818161182e0152611d09015261438a6000f3fe6080604052600436106101815760003560e01c806378da3574116100d1578063a375fa521161008a578063de1ec2d611610064578063de1ec2d61461053d578063e40309ca14610568578063e89320e514610584578063fb0e722b146105af57610181565b8063a375fa52146104cd578063ccc57490146104e9578063d547741f1461051457610181565b806378da3574146103c95780638456cb59146103e55780638f2c17ed146103fc57806391d14854146104275780639ca228bc14610464578063a217fddf146104a257610181565b806336568abe1161013e578063518fe44611610118578063518fe4461461032c57806359d95915146103485780635c975abb146103735780635fbe4d1d1461039e57610181565b806336568abe146102ae57806336e9feb9146102d75780633f4ba83a1461031557610181565b806301ffc9a714610186578063236cc70c146101c3578063248a9ca3146101ee57806328293d511461022b5780632f2ff15d14610247578063329b114e14610270575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190612f28565b6105da565b6040516101ba9190613843565b60405180910390f35b3480156101cf57600080fd5b506101d8610654565b6040516101e591906136e9565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190612ec3565b610678565b604051610222919061385e565b60405180910390f35b61024560048036038101906102409190612ce9565b610697565b005b34801561025357600080fd5b5061026e60048036038101906102699190612eec565b610829565b005b34801561027c57600080fd5b5061029760048036038101906102929190612cad565b610852565b6040516102a59291906139af565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d09190612eec565b610b2b565b005b3480156102e357600080fd5b506102fe60048036038101906102f99190612dbb565b610bae565b60405161030c929190613a0f565b60405180910390f35b34801561032157600080fd5b5061032a610e5d565b005b610346600480360381019061034191906130d1565b610e9a565b005b34801561035457600080fd5b5061035d610fcc565b60405161036a91906136e9565b60405180910390f35b34801561037f57600080fd5b50610388610ff0565b6040516103959190613843565b60405180910390f35b3480156103aa57600080fd5b506103b3611007565b6040516103c091906136e9565b60405180910390f35b6103e360048036038101906103de9190612e22565b61102b565b005b3480156103f157600080fd5b506103fa61114f565b005b34801561040857600080fd5b5061041161118c565b60405161041e91906136e9565b60405180910390f35b34801561043357600080fd5b5061044e60048036038101906104499190612eec565b6111b0565b60405161045b9190613843565b60405180910390f35b34801561047057600080fd5b5061048b60048036038101906104869190612cad565b61121a565b6040516104999291906139df565b60405180910390f35b3480156104ae57600080fd5b506104b76113b2565b6040516104c4919061385e565b60405180910390f35b6104e760048036038101906104e291906130d1565b6113b9565b005b3480156104f557600080fd5b506104fe611673565b60405161050b919061385e565b60405180910390f35b34801561052057600080fd5b5061053b60048036038101906105369190612eec565b611697565b005b34801561054957600080fd5b506105526116c0565b60405161055f91906136e9565b60405180910390f35b610582600480360381019061057d9190612e22565b6116e4565b005b34801561059057600080fd5b50610599611808565b6040516105a691906136e9565b60405180910390f35b3480156105bb57600080fd5b506105c461182c565b6040516105d19190613a46565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061064d575061064c82611850565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b61069f610ff0565b156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690613b63565b60405180910390fd5b61075f88887f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f7116978b8b8b8b60405160200161071a92919061365f565b6040516020818303038152906040528051906020012060405160200161074394939291906138b0565b60405160208183030381529060405280519060200120876118ba565b6000806107ae8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050610bae565b9150915060006107e27f00000000000000000000000000000000000000000000000000000000000000008b868989886119dd565b9050807f68d9b81e798c334d0daecab33df19f49cbc17c77cc19f4bcb772318e19316595836040516108149190613bf9565b60405180910390a25050505050505050505050565b61083282610678565b6108438161083e6119fc565b611a04565b61084d8383611aa1565b505050565b606061085c6128aa565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a8760006040518363ffffffff1660e01b81526004016108bf92919061376c565b60206040518083038186803b1580156108d757600080fd5b505afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190612fce565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc8860006040518363ffffffff1660e01b815260040161094f92919061376c565b60206040518083038186803b15801561096757600080fd5b505afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190612fce565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958a6040518263ffffffff1660e01b81526004016109dd91906136e9565b60e06040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190613033565b5050509350935050506040518060c001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018281526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152509550631a0725d860e01b86604051602401610ac09190613bc3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050965050505050509250929050565b610b336119fc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790613ba3565b60405180910390fd5b610baa8282611b81565b5050565b6060610bb8612922565b60007f000000000000000000000000000000000000000000000000000000000000000090506000805b8551811015610cdb5760008373ffffffffffffffffffffffffffffffffffffffff1663412f83b68a898581518110610c42577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610c67929190613795565b604080518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190612ff7565b5090508083610cc59190613d52565b9250508080610cd390613f60565b915050610be1565b5060008273ffffffffffffffffffffffffffffffffffffffff1663a64ad595896040518263ffffffff1660e01b8152600401610d1791906136e9565b60e06040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190613033565b50505050925050506040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018781526020018273ffffffffffffffffffffffffffffffffffffffff16815250935063cc14c98860e01b84604051602401610df39190613bf9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509450505050935093915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610e8f81610e8a6119fc565b611a04565b610e97611c62565b50565b610ea2610ff0565b15610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990613b63565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa0946cd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f4c57600080fd5b505af1158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190612fce565b9050610fc57f000000000000000000000000000000000000000000000000000000000000000030348486898960405180602001604052806000815250611d04565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b611033610ff0565b15611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90613b63565b60405180910390fd5b6110c986867f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f89896040516020016110ad93929190613879565b60405160208183030381529060405280519060200120876118ba565b6000806110d68888610852565b91509150600061110a7f000000000000000000000000000000000000000000000000000000000000000089868989886119dd565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb8360405161113c9190613bc3565b60405180910390a2505050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556111818161117c6119fc565b611a04565b611189611e39565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060611224612993565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da886040518263ffffffff1660e01b815260040161128591906136e9565b60806040518083038186803b15801561129d57600080fd5b505afa1580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d59190612f92565b9150915060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001836000015181526020018260000151815250935063b3f5ccae60e01b846040516024016113499190613bde565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050509250929050565b6000801b81565b6113c1610ff0565b15611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890613b63565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634235dfbc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561146b57600080fd5b505af115801561147f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a39190612fce565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611520929190613795565b600060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2ce7d65347f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858989896040516020016115e59190613c1b565b6040516020818303038152906040526040518863ffffffff1660e01b815260040161161596959493929190613704565b6000604051808303818588803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061166c9190612f51565b5050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6116a082610678565b6116b1816116ac6119fc565b611a04565b6116bb8383611b81565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6116ec610ff0565b1561172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390613b63565b60405180910390fd5b61178286867f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f898960405160200161176693929190613879565b60405160208183030381529060405280519060200120876118ba565b60008061178f888861121a565b9150915060006117c37f000000000000000000000000000000000000000000000000000000000000000089868989886119dd565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b3836040516117f59190613bde565b60405180910390a2505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192190613b03565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061199857508373ffffffffffffffffffffffffffffffffffffffff166119808383611edb565b73ffffffffffffffffffffffffffffffffffffffff16145b6119d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ce90613b43565b60405180910390fd5b50505050565b60006119f0878734600089898989611d04565b90509695505050505050565b600033905090565b611a0e82826111b0565b611a9d57611a338173ffffffffffffffffffffffffffffffffffffffff166014611f10565b611a418360001c6020611f10565b604051602001611a529291906136af565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a949190613a61565b60405180910390fd5b5050565b611aab82826111b0565b611b7d57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b226119fc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611b8b82826111b0565b15611c5e57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c036119fc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611c6a610ff0565b611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090613ac3565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ced6119fc565b604051611cfa91906136e9565b60405180910390a1565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded898c8a8a8e8f8c8c8c6040518a63ffffffff1660e01b8152600401611d6f9897969594939291906137be565b6020604051808303818588803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611dc19190612fce565b9050808a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051611e21919061398d565b60405180910390a48091505098975050505050505050565b611e41610ff0565b15611e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7890613b63565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ec46119fc565b604051611ed191906136e9565b60405180910390a1565b60008082511415611eef5760009050611f0a565b6000611efa8461220a565b9050611f068184612224565b9150505b92915050565b606060006002836002611f239190613da8565b611f2d9190613d52565b67ffffffffffffffff811115611f6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f9e5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ffc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612086577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026120c69190613da8565b6120d09190613d52565b90505b60018111156121bc577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612138577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612175577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806121b590613f05565b90506120d3565b5060008414612200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f790613aa3565b60405180910390fd5b8091505092915050565b600061221d61221761224b565b8361230e565b9050919050565b60008060006122338585612341565b91509150612240816123c4565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561229d577f0000000000000000000000000000000000000000000000000000000000000000905061230b565b6123087f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612715565b90505b90565b60008282604051602001612323929190613678565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156123835760008060006020860151925060408601519150606086015160001a90506123778782858561274f565b945094505050506123bd565b6040835114156123b45760008060208501519150604085015190506123a986838361285c565b9350935050506123bd565b60006002915091505b9250929050565b600060048111156123fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612437577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561244257612712565b6001600481111561247c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156124b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156124f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ed90613a83565b60405180910390fd5b60026004811115612530577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612569577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156125aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a190613ae3565b60405180910390fd5b600360048111156125e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561261d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590613b23565b60405180910390fd5b600480811115612697577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156126d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270890613b83565b60405180910390fd5b5b50565b600083838346306040516020016127309594939291906138f5565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561278a576000600391509150612853565b601b8560ff16141580156127a25750601c8560ff1614155b156127b4576000600491509150612853565b6000600187878787604051600081526020016040526040516127d99493929190613948565b6020604051602081039080840390855afa1580156127fb573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561284a57600060019250925050612853565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061289c8782888561274f565b935093505050935093915050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60006129fa6129f584613c6e565b613c49565b90508083825260208201905082856020860282011115612a1957600080fd5b60005b85811015612a495781612a2f8882612c83565b845260208401935060208301925050600181019050612a1c565b5050509392505050565b6000612a66612a6184613c9a565b613c49565b905082815260208101848484011115612a7e57600080fd5b612a89848285613ec3565b509392505050565b6000612aa4612a9f84613c9a565b613c49565b905082815260208101848484011115612abc57600080fd5b612ac7848285613ed2565b509392505050565b600081359050612ade816142f8565b92915050565b600081519050612af3816142f8565b92915050565b60008083601f840112612b0b57600080fd5b8235905067ffffffffffffffff811115612b2457600080fd5b602083019150836020820283011115612b3c57600080fd5b9250929050565b600082601f830112612b5457600080fd5b8135612b648482602086016129e7565b91505092915050565b600081359050612b7c8161430f565b92915050565b600081359050612b9181614326565b92915050565b600082601f830112612ba857600080fd5b8135612bb8848260208601612a53565b91505092915050565b600082601f830112612bd257600080fd5b8151612be2848260208601612a91565b91505092915050565b600060408284031215612bfd57600080fd5b612c076040613c49565b90506000612c1784828501612c98565b6000830152506020612c2b84828501612c98565b60208301525092915050565b600060408284031215612c4957600080fd5b612c536040613c49565b90506000612c6384828501612c98565b6000830152506020612c7784828501612c98565b60208301525092915050565b600081359050612c928161433d565b92915050565b600081519050612ca78161433d565b92915050565b60008060408385031215612cc057600080fd5b6000612cce85828601612acf565b9250506020612cdf85828601612acf565b9150509250929050565b60008060008060008060008060e0898b031215612d0557600080fd5b6000612d138b828c01612acf565b9850506020612d248b828c01612acf565b975050604089013567ffffffffffffffff811115612d4157600080fd5b612d4d8b828c01612af9565b9650965050606089013567ffffffffffffffff811115612d6c57600080fd5b612d788b828c01612b97565b9450506080612d898b828c01612c83565b93505060a0612d9a8b828c01612c83565b92505060c0612dab8b828c01612c83565b9150509295985092959890939650565b600080600060608486031215612dd057600080fd5b6000612dde86828701612acf565b9350506020612def86828701612acf565b925050604084013567ffffffffffffffff811115612e0c57600080fd5b612e1886828701612b43565b9150509250925092565b60008060008060008060c08789031215612e3b57600080fd5b6000612e4989828a01612acf565b9650506020612e5a89828a01612acf565b955050604087013567ffffffffffffffff811115612e7757600080fd5b612e8389828a01612b97565b9450506060612e9489828a01612c83565b9350506080612ea589828a01612c83565b92505060a0612eb689828a01612c83565b9150509295509295509295565b600060208284031215612ed557600080fd5b6000612ee384828501612b6d565b91505092915050565b60008060408385031215612eff57600080fd5b6000612f0d85828601612b6d565b9250506020612f1e85828601612acf565b9150509250929050565b600060208284031215612f3a57600080fd5b6000612f4884828501612b82565b91505092915050565b600060208284031215612f6357600080fd5b600082015167ffffffffffffffff811115612f7d57600080fd5b612f8984828501612bc1565b91505092915050565b60008060808385031215612fa557600080fd5b6000612fb385828601612c37565b9250506040612fc485828601612beb565b9150509250929050565b600060208284031215612fe057600080fd5b6000612fee84828501612c98565b91505092915050565b6000806040838503121561300a57600080fd5b600061301885828601612c98565b925050602061302985828601612c98565b9150509250929050565b600080600080600080600060e0888a03121561304e57600080fd5b600061305c8a828b01612c98565b975050602061306d8a828b01612c98565b965050604061307e8a828b01612ae4565b955050606061308f8a828b01612c98565b94505060806130a08a828b01612c98565b93505060a06130b18a828b01612c98565b92505060c06130c28a828b01612c98565b91505092959891949750929550565b6000806000606084860312156130e657600080fd5b60006130f486828701612c83565b935050602061310586828701612c83565b925050604061311686828701612c83565b9150509250925092565b600061312c8383613632565b60208301905092915050565b61314181613e02565b82525050565b61315081613e02565b82525050565b60006131628385613d1a565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561319157600080fd5b6020830292506131a2838584613ec3565b82840190509392505050565b60006131b982613cdb565b6131c38185613d09565b93506131ce83613ccb565b8060005b838110156131ff5781516131e68882613120565b97506131f183613cfc565b9250506001810190506131d2565b5085935050505092915050565b61321581613e14565b82525050565b61322481613e20565b82525050565b61323b61323682613e20565b613fa9565b82525050565b600061324c82613ce6565b6132568185613d25565b9350613266818560208601613ed2565b61326f81614011565b840191505092915050565b61328381613e8d565b82525050565b61329281613eb1565b82525050565b60006132a382613cf1565b6132ad8185613d36565b93506132bd818560208601613ed2565b6132c681614011565b840191505092915050565b60006132dc82613cf1565b6132e68185613d47565b93506132f6818560208601613ed2565b80840191505092915050565b600061330f601883613d36565b915061331a82614022565b602082019050919050565b6000613332602083613d36565b915061333d8261404b565b602082019050919050565b6000613355601483613d36565b915061336082614074565b602082019050919050565b6000613378601f83613d36565b91506133838261409d565b602082019050919050565b600061339b603183613d36565b91506133a6826140c6565b604082019050919050565b60006133be600283613d47565b91506133c982614115565b600282019050919050565b60006133e1602283613d36565b91506133ec8261413e565b604082019050919050565b6000613404602b83613d36565b915061340f8261418d565b604082019050919050565b6000613427601083613d36565b9150613432826141dc565b602082019050919050565b600061344a602283613d36565b915061345582614205565b604082019050919050565b600061346d600083613d36565b915061347882614254565b600082019050919050565b6000613490601783613d47565b915061349b82614257565b601782019050919050565b60006134b3601183613d47565b91506134be82614280565b601182019050919050565b60006134d6602f83613d36565b91506134e1826142a9565b604082019050919050565b60c0820160008201516135026000850182613138565b5060208201516135156020850182613138565b5060408201516135286040850182613632565b50606082015161353b6060850182613632565b50608082015161354e6080850182613632565b5060a082015161356160a0850182613138565b50505050565b60808201600082015161357d6000850182613138565b5060208201516135906020850182613138565b5060408201516135a36040850182613632565b5060608201516135b66060850182613632565b50505050565b600060a0830160008301516135d46000860182613138565b5060208301516135e76020860182613138565b5060408301516135fa6040860182613632565b506060830151848203606086015261361282826131ae565b91505060808301516136276080860182613138565b508091505092915050565b61363b81613e76565b82525050565b61364a81613e76565b82525050565b61365981613e80565b82525050565b600061366c828486613156565b91508190509392505050565b6000613683826133b1565b915061368f828561322a565b60208201915061369f828461322a565b6020820191508190509392505050565b60006136ba82613483565b91506136c682856132d1565b91506136d1826134a6565b91506136dd82846132d1565b91508190509392505050565b60006020820190506136fe6000830184613147565b92915050565b600060c0820190506137196000830189613147565b6137266020830188613147565b6137336040830187613641565b6137406060830186613641565b61374d6080830185613641565b81810360a083015261375f8184613241565b9050979650505050505050565b60006040820190506137816000830185613147565b61378e6020830184613289565b9392505050565b60006040820190506137aa6000830185613147565b6137b76020830184613641565b9392505050565b6000610100820190506137d4600083018b613147565b6137e1602083018a613641565b6137ee6040830189613641565b6137fb6060830188613147565b6138086080830187613147565b61381560a0830186613641565b61382260c0830185613641565b81810360e08301526138348184613241565b90509998505050505050505050565b6000602082019050613858600083018461320c565b92915050565b6000602082019050613873600083018461321b565b92915050565b600060608201905061388e600083018661321b565b61389b6020830185613147565b6138a86040830184613147565b949350505050565b60006080820190506138c5600083018761321b565b6138d26020830186613147565b6138df6040830185613147565b6138ec606083018461321b565b95945050505050565b600060a08201905061390a600083018861321b565b613917602083018761321b565b613924604083018661321b565b6139316060830185613641565b61393e6080830184613147565b9695505050505050565b600060808201905061395d600083018761321b565b61396a6020830186613650565b613977604083018561321b565b613984606083018461321b565b95945050505050565b600060208201905081810360008301526139a78184613241565b905092915050565b600060e08201905081810360008301526139c98185613241565b90506139d860208301846134ec565b9392505050565b600060a08201905081810360008301526139f98185613241565b9050613a086020830184613567565b9392505050565b60006040820190508181036000830152613a298185613241565b90508181036020830152613a3d81846135bc565b90509392505050565b6000602082019050613a5b600083018461327a565b92915050565b60006020820190508181036000830152613a7b8184613298565b905092915050565b60006020820190508181036000830152613a9c81613302565b9050919050565b60006020820190508181036000830152613abc81613325565b9050919050565b60006020820190508181036000830152613adc81613348565b9050919050565b60006020820190508181036000830152613afc8161336b565b9050919050565b60006020820190508181036000830152613b1c8161338e565b9050919050565b60006020820190508181036000830152613b3c816133d4565b9050919050565b60006020820190508181036000830152613b5c816133f7565b9050919050565b60006020820190508181036000830152613b7c8161341a565b9050919050565b60006020820190508181036000830152613b9c8161343d565b9050919050565b60006020820190508181036000830152613bbc816134c9565b9050919050565b600060c082019050613bd860008301846134ec565b92915050565b6000608082019050613bf36000830184613567565b92915050565b60006020820190508181036000830152613c1381846135bc565b905092915050565b6000604082019050613c306000830184613641565b8181036020830152613c4181613460565b905092915050565b6000613c53613c64565b9050613c5f8282613f2f565b919050565b6000604051905090565b600067ffffffffffffffff821115613c8957613c88613fe2565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613cb557613cb4613fe2565b5b613cbe82614011565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613d5d82613e76565b9150613d6883613e76565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d9d57613d9c613fb3565b5b828201905092915050565b6000613db382613e76565b9150613dbe83613e76565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613df757613df6613fb3565b5b828202905092915050565b6000613e0d82613e56565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613e9882613e9f565b9050919050565b6000613eaa82613e56565b9050919050565b6000613ebc82613e76565b9050919050565b82818337600083830152505050565b60005b83811015613ef0578082015181840152602081019050613ed5565b83811115613eff576000848401525b50505050565b6000613f1082613e76565b91506000821415613f2457613f23613fb3565b5b600182039050919050565b613f3882614011565b810181811067ffffffffffffffff82111715613f5757613f56613fe2565b5b80604052505050565b6000613f6b82613e76565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f9e57613f9d613fb3565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a20494e56414c49445f4c325f41444452000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a204641494c5f41555448000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61430181613e02565b811461430c57600080fd5b50565b61431881613e20565b811461432357600080fd5b50565b61432f81613e2a565b811461433a57600080fd5b50565b61434681613e76565b811461435157600080fd5b5056fea2646970667358221220124d2796fcf66be657f219b578961dae2888234d9ff69639fb5030cc84b1e14864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806378da3574116100d1578063a375fa521161008a578063de1ec2d611610064578063de1ec2d61461053d578063e40309ca14610568578063e89320e514610584578063fb0e722b146105af57610181565b8063a375fa52146104cd578063ccc57490146104e9578063d547741f1461051457610181565b806378da3574146103c95780638456cb59146103e55780638f2c17ed146103fc57806391d14854146104275780639ca228bc14610464578063a217fddf146104a257610181565b806336568abe1161013e578063518fe44611610118578063518fe4461461032c57806359d95915146103485780635c975abb146103735780635fbe4d1d1461039e57610181565b806336568abe146102ae57806336e9feb9146102d75780633f4ba83a1461031557610181565b806301ffc9a714610186578063236cc70c146101c3578063248a9ca3146101ee57806328293d511461022b5780632f2ff15d14610247578063329b114e14610270575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190612f28565b6105da565b6040516101ba9190613843565b60405180910390f35b3480156101cf57600080fd5b506101d8610654565b6040516101e591906136e9565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190612ec3565b610678565b604051610222919061385e565b60405180910390f35b61024560048036038101906102409190612ce9565b610697565b005b34801561025357600080fd5b5061026e60048036038101906102699190612eec565b610829565b005b34801561027c57600080fd5b5061029760048036038101906102929190612cad565b610852565b6040516102a59291906139af565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d09190612eec565b610b2b565b005b3480156102e357600080fd5b506102fe60048036038101906102f99190612dbb565b610bae565b60405161030c929190613a0f565b60405180910390f35b34801561032157600080fd5b5061032a610e5d565b005b610346600480360381019061034191906130d1565b610e9a565b005b34801561035457600080fd5b5061035d610fcc565b60405161036a91906136e9565b60405180910390f35b34801561037f57600080fd5b50610388610ff0565b6040516103959190613843565b60405180910390f35b3480156103aa57600080fd5b506103b3611007565b6040516103c091906136e9565b60405180910390f35b6103e360048036038101906103de9190612e22565b61102b565b005b3480156103f157600080fd5b506103fa61114f565b005b34801561040857600080fd5b5061041161118c565b60405161041e91906136e9565b60405180910390f35b34801561043357600080fd5b5061044e60048036038101906104499190612eec565b6111b0565b60405161045b9190613843565b60405180910390f35b34801561047057600080fd5b5061048b60048036038101906104869190612cad565b61121a565b6040516104999291906139df565b60405180910390f35b3480156104ae57600080fd5b506104b76113b2565b6040516104c4919061385e565b60405180910390f35b6104e760048036038101906104e291906130d1565b6113b9565b005b3480156104f557600080fd5b506104fe611673565b60405161050b919061385e565b60405180910390f35b34801561052057600080fd5b5061053b60048036038101906105369190612eec565b611697565b005b34801561054957600080fd5b506105526116c0565b60405161055f91906136e9565b60405180910390f35b610582600480360381019061057d9190612e22565b6116e4565b005b34801561059057600080fd5b50610599611808565b6040516105a691906136e9565b60405180910390f35b3480156105bb57600080fd5b506105c461182c565b6040516105d19190613a46565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061064d575061064c82611850565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b61069f610ff0565b156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690613b63565b60405180910390fd5b61075f88887f61aed36780e7480ed685cb5ea394df4fb8da267b9f97daeb24db6c660f7116978b8b8b8b60405160200161071a92919061365f565b6040516020818303038152906040528051906020012060405160200161074394939291906138b0565b60405160208183030381529060405280519060200120876118ba565b6000806107ae8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050610bae565b9150915060006107e27f00000000000000000000000000000000000000000000000000000000000000008b868989886119dd565b9050807f68d9b81e798c334d0daecab33df19f49cbc17c77cc19f4bcb772318e19316595836040516108149190613bf9565b60405180910390a25050505050505050505050565b61083282610678565b6108438161083e6119fc565b611a04565b61084d8383611aa1565b505050565b606061085c6128aa565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a8760006040518363ffffffff1660e01b81526004016108bf92919061376c565b60206040518083038186803b1580156108d757600080fd5b505afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190612fce565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f595f1cc8860006040518363ffffffff1660e01b815260040161094f92919061376c565b60206040518083038186803b15801561096757600080fd5b505afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190612fce565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663a64ad5958a6040518263ffffffff1660e01b81526004016109dd91906136e9565b60e06040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190613033565b5050509350935050506040518060c001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018281526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152509550631a0725d860e01b86604051602401610ac09190613bc3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050965050505050509250929050565b610b336119fc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790613ba3565b60405180910390fd5b610baa8282611b81565b5050565b6060610bb8612922565b60007f000000000000000000000000000000000000000000000000000000000000000090506000805b8551811015610cdb5760008373ffffffffffffffffffffffffffffffffffffffff1663412f83b68a898581518110610c42577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610c67929190613795565b604080518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190612ff7565b5090508083610cc59190613d52565b9250508080610cd390613f60565b915050610be1565b5060008273ffffffffffffffffffffffffffffffffffffffff1663a64ad595896040518263ffffffff1660e01b8152600401610d1791906136e9565b60e06040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190613033565b50505050925050506040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018781526020018273ffffffffffffffffffffffffffffffffffffffff16815250935063cc14c98860e01b84604051602401610df39190613bf9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509450505050935093915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610e8f81610e8a6119fc565b611a04565b610e97611c62565b50565b610ea2610ff0565b15610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990613b63565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa0946cd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f4c57600080fd5b505af1158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190612fce565b9050610fc57f000000000000000000000000000000000000000000000000000000000000000030348486898960405180602001604052806000815250611d04565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b611033610ff0565b15611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90613b63565b60405180910390fd5b6110c986867f0988862b47ed3bbfb4a6ca37401c7f403b193459aeac85ae89b67007a66b7a8f89896040516020016110ad93929190613879565b60405160208183030381529060405280519060200120876118ba565b6000806110d68888610852565b91509150600061110a7f000000000000000000000000000000000000000000000000000000000000000089868989886119dd565b9050807f5dde64de6b2af2aa82b195f67a162a4f870e84c1416562735f6653c614a099eb8360405161113c9190613bc3565b60405180910390a2505050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556111818161117c6119fc565b611a04565b611189611e39565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060611224612993565b60007f000000000000000000000000000000000000000000000000000000000000000090506000808273ffffffffffffffffffffffffffffffffffffffff1663e1a589da886040518263ffffffff1660e01b815260040161128591906136e9565b60806040518083038186803b15801561129d57600080fd5b505afa1580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d59190612f92565b9150915060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001836000015181526020018260000151815250935063b3f5ccae60e01b846040516024016113499190613bde565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050509250929050565b6000801b81565b6113c1610ff0565b15611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890613b63565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634235dfbc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561146b57600080fd5b505af115801561147f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a39190612fce565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611520929190613795565b600060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2ce7d65347f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858989896040516020016115e59190613c1b565b6040516020818303038152906040526040518863ffffffff1660e01b815260040161161596959493929190613704565b6000604051808303818588803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061166c9190612f51565b5050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6116a082610678565b6116b1816116ac6119fc565b611a04565b6116bb8383611b81565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6116ec610ff0565b1561172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390613b63565b60405180910390fd5b61178286867f028d23c953a67a525f843967e7e61f06d72d4a0aed8e3133159bee065e32f81f898960405160200161176693929190613879565b60405160208183030381529060405280519060200120876118ba565b60008061178f888861121a565b9150915060006117c37f000000000000000000000000000000000000000000000000000000000000000089868989886119dd565b9050807f53a728d7c49e850e9b34c39a448454863a6fbfc7afe9fbaf257f9dd5fd1663b3836040516117f59190613bde565b60405180910390a2505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192190613b03565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061199857508373ffffffffffffffffffffffffffffffffffffffff166119808383611edb565b73ffffffffffffffffffffffffffffffffffffffff16145b6119d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ce90613b43565b60405180910390fd5b50505050565b60006119f0878734600089898989611d04565b90509695505050505050565b600033905090565b611a0e82826111b0565b611a9d57611a338173ffffffffffffffffffffffffffffffffffffffff166014611f10565b611a418360001c6020611f10565b604051602001611a529291906136af565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a949190613a61565b60405180910390fd5b5050565b611aab82826111b0565b611b7d57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b226119fc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611b8b82826111b0565b15611c5e57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c036119fc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611c6a610ff0565b611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090613ac3565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ced6119fc565b604051611cfa91906136e9565b60405180910390a1565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded898c8a8a8e8f8c8c8c6040518a63ffffffff1660e01b8152600401611d6f9897969594939291906137be565b6020604051808303818588803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611dc19190612fce565b9050808a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051611e21919061398d565b60405180910390a48091505098975050505050505050565b611e41610ff0565b15611e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7890613b63565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ec46119fc565b604051611ed191906136e9565b60405180910390a1565b60008082511415611eef5760009050611f0a565b6000611efa8461220a565b9050611f068184612224565b9150505b92915050565b606060006002836002611f239190613da8565b611f2d9190613d52565b67ffffffffffffffff811115611f6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f9e5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ffc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612086577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026120c69190613da8565b6120d09190613d52565b90505b60018111156121bc577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612138577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612175577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806121b590613f05565b90506120d3565b5060008414612200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f790613aa3565b60405180910390fd5b8091505092915050565b600061221d61221761224b565b8361230e565b9050919050565b60008060006122338585612341565b91509150612240816123c4565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561229d577f0000000000000000000000000000000000000000000000000000000000000000905061230b565b6123087f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612715565b90505b90565b60008282604051602001612323929190613678565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156123835760008060006020860151925060408601519150606086015160001a90506123778782858561274f565b945094505050506123bd565b6040835114156123b45760008060208501519150604085015190506123a986838361285c565b9350935050506123bd565b60006002915091505b9250929050565b600060048111156123fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612437577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561244257612712565b6001600481111561247c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156124b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156124f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ed90613a83565b60405180910390fd5b60026004811115612530577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612569577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156125aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a190613ae3565b60405180910390fd5b600360048111156125e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561261d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590613b23565b60405180910390fd5b600480811115612697577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156126d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270890613b83565b60405180910390fd5b5b50565b600083838346306040516020016127309594939291906138f5565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561278a576000600391509150612853565b601b8560ff16141580156127a25750601c8560ff1614155b156127b4576000600491509150612853565b6000600187878787604051600081526020016040526040516127d99493929190613948565b6020604051602081039080840390855afa1580156127fb573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561284a57600060019250925050612853565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061289c8782888561274f565b935093505050935093915050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60006129fa6129f584613c6e565b613c49565b90508083825260208201905082856020860282011115612a1957600080fd5b60005b85811015612a495781612a2f8882612c83565b845260208401935060208301925050600181019050612a1c565b5050509392505050565b6000612a66612a6184613c9a565b613c49565b905082815260208101848484011115612a7e57600080fd5b612a89848285613ec3565b509392505050565b6000612aa4612a9f84613c9a565b613c49565b905082815260208101848484011115612abc57600080fd5b612ac7848285613ed2565b509392505050565b600081359050612ade816142f8565b92915050565b600081519050612af3816142f8565b92915050565b60008083601f840112612b0b57600080fd5b8235905067ffffffffffffffff811115612b2457600080fd5b602083019150836020820283011115612b3c57600080fd5b9250929050565b600082601f830112612b5457600080fd5b8135612b648482602086016129e7565b91505092915050565b600081359050612b7c8161430f565b92915050565b600081359050612b9181614326565b92915050565b600082601f830112612ba857600080fd5b8135612bb8848260208601612a53565b91505092915050565b600082601f830112612bd257600080fd5b8151612be2848260208601612a91565b91505092915050565b600060408284031215612bfd57600080fd5b612c076040613c49565b90506000612c1784828501612c98565b6000830152506020612c2b84828501612c98565b60208301525092915050565b600060408284031215612c4957600080fd5b612c536040613c49565b90506000612c6384828501612c98565b6000830152506020612c7784828501612c98565b60208301525092915050565b600081359050612c928161433d565b92915050565b600081519050612ca78161433d565b92915050565b60008060408385031215612cc057600080fd5b6000612cce85828601612acf565b9250506020612cdf85828601612acf565b9150509250929050565b60008060008060008060008060e0898b031215612d0557600080fd5b6000612d138b828c01612acf565b9850506020612d248b828c01612acf565b975050604089013567ffffffffffffffff811115612d4157600080fd5b612d4d8b828c01612af9565b9650965050606089013567ffffffffffffffff811115612d6c57600080fd5b612d788b828c01612b97565b9450506080612d898b828c01612c83565b93505060a0612d9a8b828c01612c83565b92505060c0612dab8b828c01612c83565b9150509295985092959890939650565b600080600060608486031215612dd057600080fd5b6000612dde86828701612acf565b9350506020612def86828701612acf565b925050604084013567ffffffffffffffff811115612e0c57600080fd5b612e1886828701612b43565b9150509250925092565b60008060008060008060c08789031215612e3b57600080fd5b6000612e4989828a01612acf565b9650506020612e5a89828a01612acf565b955050604087013567ffffffffffffffff811115612e7757600080fd5b612e8389828a01612b97565b9450506060612e9489828a01612c83565b9350506080612ea589828a01612c83565b92505060a0612eb689828a01612c83565b9150509295509295509295565b600060208284031215612ed557600080fd5b6000612ee384828501612b6d565b91505092915050565b60008060408385031215612eff57600080fd5b6000612f0d85828601612b6d565b9250506020612f1e85828601612acf565b9150509250929050565b600060208284031215612f3a57600080fd5b6000612f4884828501612b82565b91505092915050565b600060208284031215612f6357600080fd5b600082015167ffffffffffffffff811115612f7d57600080fd5b612f8984828501612bc1565b91505092915050565b60008060808385031215612fa557600080fd5b6000612fb385828601612c37565b9250506040612fc485828601612beb565b9150509250929050565b600060208284031215612fe057600080fd5b6000612fee84828501612c98565b91505092915050565b6000806040838503121561300a57600080fd5b600061301885828601612c98565b925050602061302985828601612c98565b9150509250929050565b600080600080600080600060e0888a03121561304e57600080fd5b600061305c8a828b01612c98565b975050602061306d8a828b01612c98565b965050604061307e8a828b01612ae4565b955050606061308f8a828b01612c98565b94505060806130a08a828b01612c98565b93505060a06130b18a828b01612c98565b92505060c06130c28a828b01612c98565b91505092959891949750929550565b6000806000606084860312156130e657600080fd5b60006130f486828701612c83565b935050602061310586828701612c83565b925050604061311686828701612c83565b9150509250925092565b600061312c8383613632565b60208301905092915050565b61314181613e02565b82525050565b61315081613e02565b82525050565b60006131628385613d1a565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561319157600080fd5b6020830292506131a2838584613ec3565b82840190509392505050565b60006131b982613cdb565b6131c38185613d09565b93506131ce83613ccb565b8060005b838110156131ff5781516131e68882613120565b97506131f183613cfc565b9250506001810190506131d2565b5085935050505092915050565b61321581613e14565b82525050565b61322481613e20565b82525050565b61323b61323682613e20565b613fa9565b82525050565b600061324c82613ce6565b6132568185613d25565b9350613266818560208601613ed2565b61326f81614011565b840191505092915050565b61328381613e8d565b82525050565b61329281613eb1565b82525050565b60006132a382613cf1565b6132ad8185613d36565b93506132bd818560208601613ed2565b6132c681614011565b840191505092915050565b60006132dc82613cf1565b6132e68185613d47565b93506132f6818560208601613ed2565b80840191505092915050565b600061330f601883613d36565b915061331a82614022565b602082019050919050565b6000613332602083613d36565b915061333d8261404b565b602082019050919050565b6000613355601483613d36565b915061336082614074565b602082019050919050565b6000613378601f83613d36565b91506133838261409d565b602082019050919050565b600061339b603183613d36565b91506133a6826140c6565b604082019050919050565b60006133be600283613d47565b91506133c982614115565b600282019050919050565b60006133e1602283613d36565b91506133ec8261413e565b604082019050919050565b6000613404602b83613d36565b915061340f8261418d565b604082019050919050565b6000613427601083613d36565b9150613432826141dc565b602082019050919050565b600061344a602283613d36565b915061345582614205565b604082019050919050565b600061346d600083613d36565b915061347882614254565b600082019050919050565b6000613490601783613d47565b915061349b82614257565b601782019050919050565b60006134b3601183613d47565b91506134be82614280565b601182019050919050565b60006134d6602f83613d36565b91506134e1826142a9565b604082019050919050565b60c0820160008201516135026000850182613138565b5060208201516135156020850182613138565b5060408201516135286040850182613632565b50606082015161353b6060850182613632565b50608082015161354e6080850182613632565b5060a082015161356160a0850182613138565b50505050565b60808201600082015161357d6000850182613138565b5060208201516135906020850182613138565b5060408201516135a36040850182613632565b5060608201516135b66060850182613632565b50505050565b600060a0830160008301516135d46000860182613138565b5060208301516135e76020860182613138565b5060408301516135fa6040860182613632565b506060830151848203606086015261361282826131ae565b91505060808301516136276080860182613138565b508091505092915050565b61363b81613e76565b82525050565b61364a81613e76565b82525050565b61365981613e80565b82525050565b600061366c828486613156565b91508190509392505050565b6000613683826133b1565b915061368f828561322a565b60208201915061369f828461322a565b6020820191508190509392505050565b60006136ba82613483565b91506136c682856132d1565b91506136d1826134a6565b91506136dd82846132d1565b91508190509392505050565b60006020820190506136fe6000830184613147565b92915050565b600060c0820190506137196000830189613147565b6137266020830188613147565b6137336040830187613641565b6137406060830186613641565b61374d6080830185613641565b81810360a083015261375f8184613241565b9050979650505050505050565b60006040820190506137816000830185613147565b61378e6020830184613289565b9392505050565b60006040820190506137aa6000830185613147565b6137b76020830184613641565b9392505050565b6000610100820190506137d4600083018b613147565b6137e1602083018a613641565b6137ee6040830189613641565b6137fb6060830188613147565b6138086080830187613147565b61381560a0830186613641565b61382260c0830185613641565b81810360e08301526138348184613241565b90509998505050505050505050565b6000602082019050613858600083018461320c565b92915050565b6000602082019050613873600083018461321b565b92915050565b600060608201905061388e600083018661321b565b61389b6020830185613147565b6138a86040830184613147565b949350505050565b60006080820190506138c5600083018761321b565b6138d26020830186613147565b6138df6040830185613147565b6138ec606083018461321b565b95945050505050565b600060a08201905061390a600083018861321b565b613917602083018761321b565b613924604083018661321b565b6139316060830185613641565b61393e6080830184613147565b9695505050505050565b600060808201905061395d600083018761321b565b61396a6020830186613650565b613977604083018561321b565b613984606083018461321b565b95945050505050565b600060208201905081810360008301526139a78184613241565b905092915050565b600060e08201905081810360008301526139c98185613241565b90506139d860208301846134ec565b9392505050565b600060a08201905081810360008301526139f98185613241565b9050613a086020830184613567565b9392505050565b60006040820190508181036000830152613a298185613241565b90508181036020830152613a3d81846135bc565b90509392505050565b6000602082019050613a5b600083018461327a565b92915050565b60006020820190508181036000830152613a7b8184613298565b905092915050565b60006020820190508181036000830152613a9c81613302565b9050919050565b60006020820190508181036000830152613abc81613325565b9050919050565b60006020820190508181036000830152613adc81613348565b9050919050565b60006020820190508181036000830152613afc8161336b565b9050919050565b60006020820190508181036000830152613b1c8161338e565b9050919050565b60006020820190508181036000830152613b3c816133d4565b9050919050565b60006020820190508181036000830152613b5c816133f7565b9050919050565b60006020820190508181036000830152613b7c8161341a565b9050919050565b60006020820190508181036000830152613b9c8161343d565b9050919050565b60006020820190508181036000830152613bbc816134c9565b9050919050565b600060c082019050613bd860008301846134ec565b92915050565b6000608082019050613bf36000830184613567565b92915050565b60006020820190508181036000830152613c1381846135bc565b905092915050565b6000604082019050613c306000830184613641565b8181036020830152613c4181613460565b905092915050565b6000613c53613c64565b9050613c5f8282613f2f565b919050565b6000604051905090565b600067ffffffffffffffff821115613c8957613c88613fe2565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613cb557613cb4613fe2565b5b613cbe82614011565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613d5d82613e76565b9150613d6883613e76565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d9d57613d9c613fb3565b5b828201905092915050565b6000613db382613e76565b9150613dbe83613e76565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613df757613df6613fb3565b5b828202905092915050565b6000613e0d82613e56565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613e9882613e9f565b9050919050565b6000613eaa82613e56565b9050919050565b6000613ebc82613e76565b9050919050565b82818337600083830152505050565b60005b83811015613ef0578082015181840152602081019050613ed5565b83811115613eff576000848401525b50505050565b6000613f1082613e76565b91506000821415613f2457613f23613fb3565b5b600182039050919050565b613f3882614011565b810181811067ffffffffffffffff82111715613f5757613f56613fe2565b5b80604052505050565b6000613f6b82613e76565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f9e57613f9d613fb3565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a20494e56414c49445f4c325f41444452000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c314d69677261746f72237265717569726556616c69644d6967726174696f6e60008201527f3a204641494c5f41555448000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61430181613e02565b811461430c57600080fd5b50565b61431881613e20565b811461432357600080fd5b50565b61432f81613e2a565b811461433a57600080fd5b50565b61434681613e76565b811461435157600080fd5b5056fea2646970667358221220124d2796fcf66be657f219b578961dae2888234d9ff69639fb5030cc84b1e14864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMigrateDelegatorParams(address,address)": {
        "params": {
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2"
        },
        "returns": {
          "data": "L2 calldata for finalizeMigrateDelegator() in L2Migrator",
          "params": "MigrateDelegatorParams to use for finalizeMigrateDelegator() in L2Migrator"
        }
      },
      "getMigrateSenderParams(address,address)": {
        "params": {
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2"
        },
        "returns": {
          "data": "L2 calldata for finalizeMigrateSender() in L2Migrator",
          "params": "MigrateSenderParams to use for finalizeMigrateSender() in L2Migrator"
        }
      },
      "getMigrateUnbondingLocksParams(address,address,uint256[])": {
        "params": {
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_unbondingLockIds": "IDs of unbonding locks in L1 BondingManager to migrate"
        },
        "returns": {
          "data": "L2 calldata for finalizeMigrateUnbondingLocks() in L2Migrator",
          "params": "MigrateUnbondingLocksParams to use for finalizeMigrateUnbondingLocks() in L2Migrator"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateDelegator(address,address,bytes,uint256,uint256,uint256)": {
        "details": "The term \"delegator\" here can refer to both a transcoder (self-delegated delegator) and delegator.",
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee",
          "_sig": "Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr"
        }
      },
      "migrateETH(uint256,uint256,uint256)": {
        "details": "Anyone can call this function.",
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee"
        }
      },
      "migrateLPT(uint256,uint256,uint256)": {
        "details": "Anyone can call this function.",
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee"
        }
      },
      "migrateSender(address,address,bytes,uint256,uint256,uint256)": {
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee",
          "_sig": "Optional EIP-712 signature over a payload that includes _l1Addr and _l2Addr"
        }
      },
      "migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)": {
        "params": {
          "_gasPriceBid": "Gas price bid for L2 execution",
          "_l1Addr": "Address migrating from L1",
          "_l2Addr": "Address to use on L2",
          "_maxGas": "Gas limit for L2 execution",
          "_maxSubmissionCost": "Max ETH to pay for retryable ticket base submission fee",
          "_sig": "Optional EIP-712 signature over a payload that includes _l1Addr, _l2Addr and _unbondingLockIds",
          "_unbondingLockIds": "IDs of unbonding locks in the L1 BondingManager to migrate"
        }
      },
      "pause()": {
        "details": "Only callable by addresses with governor role"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Only callable by addresses with governor role"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getMigrateDelegatorParams(address,address)": {
        "notice": "Return L2 calldata and MigrateDelegatorParams to use for a L2 call on L2Migrator"
      },
      "getMigrateSenderParams(address,address)": {
        "notice": "Return L2 calldata and MigrateSenderParams to use for a L2 call on L2Migrator"
      },
      "getMigrateUnbondingLocksParams(address,address,uint256[])": {
        "notice": "Return L2 calldata and MigrateUnbondingLocksParams to use for a L2 call on L2Migrator"
      },
      "migrateDelegator(address,address,bytes,uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to L2Migrator to migrate transcoder/delegator state from the L1 BondingManager."
      },
      "migrateETH(uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to send ETH from the L1BridgeMinter to the L2Migrator."
      },
      "migrateLPT(uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to send LPT from the L1BridgeMinter to the L2Migrator."
      },
      "migrateSender(address,address,bytes,uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to L2Migrator to migrate sender deposit/reserve state from the L1 TicketBroker."
      },
      "migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)": {
        "notice": "Executes a L2 call to L2Migrator to migrate unbonding locks state from the L1 BondingManager."
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 343,
        "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)338_storage)"
      },
      {
        "astId": 900,
        "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)338_storage"
      },
      "t_struct(RoleData)338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 337,
            "contract": "contracts/L1/gateway/L1Migrator.sol:L1Migrator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}