{
  "address": "0x5C20Aca80E3909ce41B6996C7e986B319e79a8dE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_delegator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_bondingManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_initialStake",
          "type": "uint256"
        }
      ],
      "name": "DelegatorPoolInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bondingManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimedInitialStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bondingManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ce7fa873522c92249fbb7ec992e4042d0652b1c6ae27e95047de105493d421e",
  "receipt": {
    "to": null,
    "from": "0xC96f6B72843Af1988C98F78eAB3E47673af63eA1",
    "contractAddress": "0x5C20Aca80E3909ce41B6996C7e986B319e79a8dE",
    "transactionIndex": 1,
    "gasUsed": "813409",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9bb2356b50e6aa203805717c9966b4d80cec03cce58d294458a47d2ae5c0f0c7",
    "transactionHash": "0x3ce7fa873522c92249fbb7ec992e4042d0652b1c6ae27e95047de105493d421e",
    "logs": [],
    "blockNumber": 51083,
    "cumulativeGasUsed": "813409",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a582cfe11011008962da6f3d958d9716",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bondingManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialStake\",\"type\":\"uint256\"}],\"name\":\"DelegatorPoolInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bondingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedInitialStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondingManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"params\":{\"_delegator\":\"Address of delegator\",\"_stake\":\"Stake of delegator\"}},\"initialize(address)\":{\"params\":{\"_bondingManager\":\"Address of L2 BondingManager\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Called by L2Migrator to credit stake and fees held by this contract to a delegator\"},\"initialize(address)\":{\"notice\":\"Initialize state\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/pool/DelegatorPool.sol\":\"DelegatorPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/L2/pool/DelegatorPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IBondingManager {\\n    function pendingStake(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pendingFees(address _addr, uint256 _endRound)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferBond(\\n        address _delegator,\\n        uint256 _amount,\\n        address _oldDelegateNewPosPrev,\\n        address _oldDelegateNewPosNext,\\n        address _newDelegateNewPosPrev,\\n        address _newDelegateNewPosNext\\n    ) external;\\n\\n    function withdrawFees(address payable _recipient, uint256 _amount) external;\\n}\\n\\ncontract DelegatorPool is Initializable {\\n    uint256 public initialStake;\\n    uint256 public claimedInitialStake;\\n\\n    address public bondingManager;\\n    address public migrator;\\n\\n    event Claimed(address indexed _delegator, uint256 _stake, uint256 _fees);\\n    event DelegatorPoolInitialized(\\n        address indexed _bondingManager,\\n        address indexed _migrator,\\n        uint256 _initialStake\\n    );\\n\\n    modifier onlyMigrator() {\\n        require(msg.sender == migrator, \\\"POOL:NOT_MIGRATOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize state\\n     * @param _bondingManager Address of L2 BondingManager\\n     */\\n    function initialize(address _bondingManager) public initializer {\\n        bondingManager = _bondingManager;\\n        migrator = msg.sender;\\n        initialStake = pendingStake();\\n\\n        emit DelegatorPoolInitialized(_bondingManager, migrator, initialStake);\\n    }\\n\\n    /**\\n     * @notice Called by L2Migrator to credit stake and fees held by this contract to a delegator\\n     * @param _delegator Address of delegator\\n     * @param _stake Stake of delegator\\n     */\\n    function claim(address _delegator, uint256 _stake) external onlyMigrator {\\n        // stake remaining with the pool\\n        uint256 remaining = initialStake - claimedInitialStake;\\n\\n        require(_stake <= remaining, \\\"POOL:INVALID_CLAIM\\\");\\n\\n        // _stake is the delegator's original stake\\n        // This contract started off with initalStake\\n        // We can calculate how much of the contract's current stake and fees\\n        // are owed to the delegator proportional to _stake / (initialStake - claimedInitialStake)\\n        // where claimedInitialStake is the stake of the contract that has already been claimed\\n\\n        // Calculate stake owed to delegator\\n        uint256 owedStake = (pendingStake() * _stake) / remaining;\\n\\n        // Calculate fees owed to delegator\\n        uint256 owedFees = (pendingFees() * _stake) / remaining;\\n\\n        // update claimed balance\\n        claimedInitialStake += _stake;\\n\\n        // Transfer owed stake to the delegator\\n        transferBond(_delegator, owedStake);\\n\\n        // Transfer owed fees to the delegator\\n        IBondingManager(bondingManager).withdrawFees(\\n            payable(_delegator),\\n            owedFees\\n        );\\n\\n        emit Claimed(_delegator, owedStake, owedFees);\\n    }\\n\\n    function transferBond(address _delegator, uint256 _stake) private {\\n        IBondingManager(bondingManager).transferBond(\\n            _delegator,\\n            _stake,\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n    }\\n\\n    function pendingStake() private view returns (uint256) {\\n        return IBondingManager(bondingManager).pendingStake(address(this), 0);\\n    }\\n\\n    function pendingFees() private view returns (uint256) {\\n        return IBondingManager(bondingManager).pendingFees(address(this), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xcdc2fc227deed0eef660319b351b542d3d5cf9a89aa25242f1e1ed30a006de2f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dcd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c80625b291a1461006657806316e6c6fd14610084578063426eae45146100a25780637cd07e47146100c0578063aad3ec96146100de578063c4d66de8146100fa575b600080fd5b61006e610116565b60405161007b91906107e4565b60405180910390f35b61008c61011c565b60405161009991906107e4565b60405180910390f35b6100aa610122565b6040516100b79190610840565b60405180910390f35b6100c8610148565b6040516100d59190610840565b60405180910390f35b6100f860048036038101906100f391906108b8565b61016e565b005b610114600480360381019061010f91906108f8565b6103a2565b005b60015481565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f590610982565b60405180910390fd5b600060025460015461021091906109d1565b905080821115610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90610a51565b60405180910390fd5b600081836102616105a0565b61026b9190610a71565b6102759190610afa565b905060008284610283610655565b61028d9190610a71565b6102979190610afa565b905083600260008282546102ab9190610b2b565b925050819055506102bc858361070a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad3b1b4786836040518363ffffffff1660e01b8152600401610319929190610ba2565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a8383604051610393929190610bcb565b60405180910390a25050505050565b600060019054906101000a900460ff166103ca5760008054906101000a900460ff16156103d3565b6103d26107a7565b5b610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990610c66565b60405180910390fd5b60008060019054906101000a900460ff161590508015610462576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104ec6105a0565b600181905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f27ac25f89a168c7b9a0e7c9cb516b24a426f772e4d1e5f0d9e77bc0dea29141660015460405161057391906107e4565b60405180910390a3801561059c5760008060016101000a81548160ff0219169083151502179055505b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a3060006040518363ffffffff1660e01b8152600401610600929190610ccb565b60206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190610d09565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f595f1cc3060006040518363ffffffff1660e01b81526004016106b5929190610ccb565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190610d09565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663062e98b883836000806000806040518763ffffffff1660e01b815260040161077196959493929190610d36565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050505050565b60006107b2306107b8565b15905090565b600080823b905060008111915050919050565b6000819050919050565b6107de816107cb565b82525050565b60006020820190506107f960008301846107d5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082a826107ff565b9050919050565b61083a8161081f565b82525050565b60006020820190506108556000830184610831565b92915050565b600080fd5b6108698161081f565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b610895816107cb565b81146108a057600080fd5b50565b6000813590506108b28161088c565b92915050565b600080604083850312156108cf576108ce61085b565b5b60006108dd85828601610877565b92505060206108ee858286016108a3565b9150509250929050565b60006020828403121561090e5761090d61085b565b5b600061091c84828501610877565b91505092915050565b600082825260208201905092915050565b7f504f4f4c3a4e4f545f4d49475241544f52000000000000000000000000000000600082015250565b600061096c601183610925565b915061097782610936565b602082019050919050565b6000602082019050818103600083015261099b8161095f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109dc826107cb565b91506109e7836107cb565b9250828210156109fa576109f96109a2565b5b828203905092915050565b7f504f4f4c3a494e56414c49445f434c41494d0000000000000000000000000000600082015250565b6000610a3b601283610925565b9150610a4682610a05565b602082019050919050565b60006020820190508181036000830152610a6a81610a2e565b9050919050565b6000610a7c826107cb565b9150610a87836107cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ac057610abf6109a2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b05826107cb565b9150610b10836107cb565b925082610b2057610b1f610acb565b5b828204905092915050565b6000610b36826107cb565b9150610b41836107cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b7657610b756109a2565b5b828201905092915050565b6000610b8c826107ff565b9050919050565b610b9c81610b81565b82525050565b6000604082019050610bb76000830185610b93565b610bc460208301846107d5565b9392505050565b6000604082019050610be060008301856107d5565b610bed60208301846107d5565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610c50602e83610925565b9150610c5b82610bf4565b604082019050919050565b60006020820190508181036000830152610c7f81610c43565b9050919050565b6000819050919050565b6000819050919050565b6000610cb5610cb0610cab84610c86565b610c90565b6107cb565b9050919050565b610cc581610c9a565b82525050565b6000604082019050610ce06000830185610831565b610ced6020830184610cbc565b9392505050565b600081519050610d038161088c565b92915050565b600060208284031215610d1f57610d1e61085b565b5b6000610d2d84828501610cf4565b91505092915050565b600060c082019050610d4b6000830189610831565b610d5860208301886107d5565b610d656040830187610831565b610d726060830186610831565b610d7f6080830185610831565b610d8c60a0830184610831565b97965050505050505056fea264697066735822122037837bde3a87a34eaef05951e43b51c88f71391b65b98155a060e09a9ddc181d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100615760003560e01c80625b291a1461006657806316e6c6fd14610084578063426eae45146100a25780637cd07e47146100c0578063aad3ec96146100de578063c4d66de8146100fa575b600080fd5b61006e610116565b60405161007b91906107e4565b60405180910390f35b61008c61011c565b60405161009991906107e4565b60405180910390f35b6100aa610122565b6040516100b79190610840565b60405180910390f35b6100c8610148565b6040516100d59190610840565b60405180910390f35b6100f860048036038101906100f391906108b8565b61016e565b005b610114600480360381019061010f91906108f8565b6103a2565b005b60015481565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f590610982565b60405180910390fd5b600060025460015461021091906109d1565b905080821115610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90610a51565b60405180910390fd5b600081836102616105a0565b61026b9190610a71565b6102759190610afa565b905060008284610283610655565b61028d9190610a71565b6102979190610afa565b905083600260008282546102ab9190610b2b565b925050819055506102bc858361070a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad3b1b4786836040518363ffffffff1660e01b8152600401610319929190610ba2565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a8383604051610393929190610bcb565b60405180910390a25050505050565b600060019054906101000a900460ff166103ca5760008054906101000a900460ff16156103d3565b6103d26107a7565b5b610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990610c66565b60405180910390fd5b60008060019054906101000a900460ff161590508015610462576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104ec6105a0565b600181905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f27ac25f89a168c7b9a0e7c9cb516b24a426f772e4d1e5f0d9e77bc0dea29141660015460405161057391906107e4565b60405180910390a3801561059c5760008060016101000a81548160ff0219169083151502179055505b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a3060006040518363ffffffff1660e01b8152600401610600929190610ccb565b60206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190610d09565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f595f1cc3060006040518363ffffffff1660e01b81526004016106b5929190610ccb565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190610d09565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663062e98b883836000806000806040518763ffffffff1660e01b815260040161077196959493929190610d36565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050505050565b60006107b2306107b8565b15905090565b600080823b905060008111915050919050565b6000819050919050565b6107de816107cb565b82525050565b60006020820190506107f960008301846107d5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082a826107ff565b9050919050565b61083a8161081f565b82525050565b60006020820190506108556000830184610831565b92915050565b600080fd5b6108698161081f565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b610895816107cb565b81146108a057600080fd5b50565b6000813590506108b28161088c565b92915050565b600080604083850312156108cf576108ce61085b565b5b60006108dd85828601610877565b92505060206108ee858286016108a3565b9150509250929050565b60006020828403121561090e5761090d61085b565b5b600061091c84828501610877565b91505092915050565b600082825260208201905092915050565b7f504f4f4c3a4e4f545f4d49475241544f52000000000000000000000000000000600082015250565b600061096c601183610925565b915061097782610936565b602082019050919050565b6000602082019050818103600083015261099b8161095f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109dc826107cb565b91506109e7836107cb565b9250828210156109fa576109f96109a2565b5b828203905092915050565b7f504f4f4c3a494e56414c49445f434c41494d0000000000000000000000000000600082015250565b6000610a3b601283610925565b9150610a4682610a05565b602082019050919050565b60006020820190508181036000830152610a6a81610a2e565b9050919050565b6000610a7c826107cb565b9150610a87836107cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ac057610abf6109a2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b05826107cb565b9150610b10836107cb565b925082610b2057610b1f610acb565b5b828204905092915050565b6000610b36826107cb565b9150610b41836107cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b7657610b756109a2565b5b828201905092915050565b6000610b8c826107ff565b9050919050565b610b9c81610b81565b82525050565b6000604082019050610bb76000830185610b93565b610bc460208301846107d5565b9392505050565b6000604082019050610be060008301856107d5565b610bed60208301846107d5565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610c50602e83610925565b9150610c5b82610bf4565b604082019050919050565b60006020820190508181036000830152610c7f81610c43565b9050919050565b6000819050919050565b6000819050919050565b6000610cb5610cb0610cab84610c86565b610c90565b6107cb565b9050919050565b610cc581610c9a565b82525050565b6000604082019050610ce06000830185610831565b610ced6020830184610cbc565b9392505050565b600081519050610d038161088c565b92915050565b600060208284031215610d1f57610d1e61085b565b5b6000610d2d84828501610cf4565b91505092915050565b600060c082019050610d4b6000830189610831565b610d5860208301886107d5565b610d656040830187610831565b610d726060830186610831565b610d7f6080830185610831565b610d8c60a0830184610831565b97965050505050505056fea264697066735822122037837bde3a87a34eaef05951e43b51c88f71391b65b98155a060e09a9ddc181d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,uint256)": {
        "params": {
          "_delegator": "Address of delegator",
          "_stake": "Stake of delegator"
        }
      },
      "initialize(address)": {
        "params": {
          "_bondingManager": "Address of L2 BondingManager"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256)": {
        "notice": "Called by L2Migrator to credit stake and fees held by this contract to a delegator"
      },
      "initialize(address)": {
        "notice": "Initialize state"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/L2/pool/DelegatorPool.sol:DelegatorPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/L2/pool/DelegatorPool.sol:DelegatorPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6152,
        "contract": "contracts/L2/pool/DelegatorPool.sol:DelegatorPool",
        "label": "initialStake",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6154,
        "contract": "contracts/L2/pool/DelegatorPool.sol:DelegatorPool",
        "label": "claimedInitialStake",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6156,
        "contract": "contracts/L2/pool/DelegatorPool.sol:DelegatorPool",
        "label": "bondingManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6158,
        "contract": "contracts/L2/pool/DelegatorPool.sol:DelegatorPool",
        "label": "migrator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}