{
  "address": "0xF4C7c7b67Ea0A4a3c3d9c0A0BC258b27fb9c4B57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2LPTDataCache",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "TxToL1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_l2ToL1Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exitNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "calculateL2TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterpartGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "finalizeInboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getOutboundCalldata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "outboundCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Counterpart",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2LPTDataCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Counterpart",
          "type": "address"
        }
      ],
      "name": "setCounterpart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f1c978e6dbabc731d62d061ee25617f5d665def13ffa5ecfabdff8ebc94f930",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0xF4C7c7b67Ea0A4a3c3d9c0A0BC258b27fb9c4B57",
    "transactionIndex": 0,
    "gasUsed": "51207512",
    "logsBloom": "0x
    "blockHash": "0x9663a2d4ca35d3a841d6610889beff9c900b553e54c974d6ce2c0b724b4910cc",
    "transactionHash": "0x6f1c978e6dbabc731d62d061ee25617f5d665def13ffa5ecfabdff8ebc94f930",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8645471,
        "transactionHash": "0x6f1c978e6dbabc731d62d061ee25617f5d665def13ffa5ecfabdff8ebc94f930",
        "address": "0xF4C7c7b67Ea0A4a3c3d9c0A0BC258b27fb9c4B57",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9663a2d4ca35d3a841d6610889beff9c900b553e54c974d6ce2c0b724b4910cc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8645471,
        "transactionHash": "0x6f1c978e6dbabc731d62d061ee25617f5d665def13ffa5ecfabdff8ebc94f930",
        "address": "0xF4C7c7b67Ea0A4a3c3d9c0A0BC258b27fb9c4B57",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9663a2d4ca35d3a841d6610889beff9c900b553e54c974d6ce2c0b724b4910cc"
      }
    ],
    "blockNumber": 8645471,
    "cumulativeGasUsed": "31753652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9413AD42910c1eA60c737dB5f58d1C504498a3cD",
    "0x8573f2F5A3Bd960eeE3D998473e50C75cDbE6828",
    "0xA9d5D66a6CCAc3D50dc7bfe4baC7A1EDDbB3cE16",
    "0x61D8BA9616b0052F52a5f7B3487879F9D5F26e2b"
  ],
  "solcInputHash": "3f7f51b7bc6dda218aa0e2e13638ff2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2LPTDataCache\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_l2ToL1Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2LPTDataCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Counterpart\",\"type\":\"address\"}],\"name\":\"setCounterpart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the contract can be paused by the governor which will prevent any outbound transfers but pausing the contract does not affect inbound transfers (tokens coming from L1)\",\"kind\":\"dev\",\"methods\":{\"finalizeInboundTransfer(address,address,address,uint256,bytes)\":{\"details\":\"can only accept txs coming directly from L1 LPT Gateway data param is unused because no additional data is allowed from L1\",\"params\":{\"_amount\":\"Amount of tokens transferred\",\"_from\":\"Address of the sender on L1\",\"_l1Token\":\"L1 Address of LPT\",\"_to\":\"Recepient address on L2\"}},\"getOutboundCalldata(address,address,address,uint256,bytes)\":{\"details\":\"encodes the target function with its params which will be called on L1 when the message is received on L1\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"outboundTransfer(address,address,uint256,bytes)\":{\"details\":\"no additional callhook data is allowed\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_data\":\"Contains sender and additional data to send to L1\",\"_l1Token\":\"L1 Address of LPT\",\"_to\":\"Recepient address on L1\"},\"returns\":{\"res\":\"ID of the withdraw tx\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setCounterpart(address)\":{\"details\":\"Only address with the governor role is allowed to change the value of l1Counterpart\",\"params\":{\"_l1Counterpart\":\"L1 Address of the counterpart\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"L1LPTGateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateL2TokenAddress(address)\":{\"notice\":\"returns address of L2 version of LPT\"},\"counterpartGateway()\":{\"notice\":\"returns address of L1 LPT Gateway\"},\"finalizeInboundTransfer(address,address,address,uint256,bytes)\":{\"notice\":\"Receives token amount from L1 and mints the equivalent tokens to the receiving address\"},\"getOutboundCalldata(address,address,address,uint256,bytes)\":{\"notice\":\"Creates calldata required to send tx to L1\"},\"outboundTransfer(address,address,uint256,bytes)\":{\"notice\":\"Burns L2 tokens and sends a message to L1 The tokens will be received on L1 only after the wait period (7 days) is over\"},\"setCounterpart(address)\":{\"notice\":\"Sets address of companion L1LPTGateway\"}},\"notice\":\"Manages inbound and outbound transfers of LPT between Arbitrum Rollup and L1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/gateway/L2LPTGateway.sol\":\"L2LPTGateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ControlledGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title ControlledGateway\\n * @notice Base Contract for both L1 and L2 LPT gateways. Provides AccessControl.\\n * Gateways can be paused by the governor to stop outgoing token migrations\\n */\\ncontract ControlledGateway is AccessControl, Pausable {\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\n    address public immutable l1Lpt;\\n    address public immutable l2Lpt;\\n\\n    constructor(address _l1Lpt, address _l2Lpt) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        l1Lpt = _l1Lpt;\\n        l2Lpt = _l2Lpt;\\n    }\\n\\n    function pause() external onlyRole(GOVERNOR_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(GOVERNOR_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x70cb86fdae16705471113f5df3e05ae40a64f56a07deea1cee2c5bc25bd3549a\",\"license\":\"MIT\"},\"contracts/L1/gateway/IL1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL1LPTGateway {\\n    event DepositInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _sequenceNumber,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalFinalized(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf3c4fceb1627089f5a91e3187c815fdf363cae07ff43ddf89d9ff6b016f9f59c\",\"license\":\"MIT\"},\"contracts/L2/gateway/IL2LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IL2LPTGateway {\\n    event DepositFinalized(\\n        address indexed _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _l2ToL1Id,\\n        uint256 _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address _l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9d0a018f6179245cda5c578c5becb21121a71b710528fef1e6e53f3fa8f69d1c\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IArbSys} from \\\"../../arbitrum/IArbSys.sol\\\";\\n\\nabstract contract L2ArbitrumMessenger {\\n    event TxToL1(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _id,\\n        bytes _data\\n    );\\n\\n    function sendTxToL1(\\n        address user,\\n        address to,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        // note: this method doesn't support sending ether to L1 together with a call\\n        uint256 id = IArbSys(address(100)).sendTxToL1(to, data);\\n        emit TxToL1(user, to, id, data);\\n        return id;\\n    }\\n\\n    modifier onlyL1Counterpart(address l1Counterpart) {\\n        require(\\n            msg.sender == applyL1ToL2Alias(l1Counterpart),\\n            \\\"ONLY_COUNTERPART_GATEWAY\\\"\\n        );\\n        _;\\n    }\\n\\n    uint160 internal constant OFFSET =\\n        uint160(0x1111000000000000000000000000000000001111);\\n\\n    // l1 addresses are transformed durng l1->l2 calls\\n    function applyL1ToL2Alias(address l1Address)\\n        internal\\n        pure\\n        returns (address l2Address)\\n    {\\n        l2Address = address(uint160(l1Address) + OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x03edd83d95772f14bba5da9c2726caece1b06b15f0106bd58a929e4cbdcee5a1\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ControlledGateway} from \\\"../../ControlledGateway.sol\\\";\\nimport {L2ArbitrumMessenger} from \\\"./L2ArbitrumMessenger.sol\\\";\\nimport {IL2LPTGateway} from \\\"./IL2LPTGateway.sol\\\";\\nimport {IL1LPTGateway} from \\\"../../L1/gateway/IL1LPTGateway.sol\\\";\\n\\ninterface Mintable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\\ninterface IL2LPTDataCache {\\n    function increaseL2SupplyFromL1(uint256 _amount) external;\\n\\n    function decreaseL2SupplyFromL1(uint256 _amount) external;\\n}\\n\\n/**\\n * @title L1LPTGateway\\n * @notice Manages inbound and outbound transfers of LPT between Arbitrum Rollup and L1\\n * @dev the contract can be paused by the governor which will prevent any outbound transfers\\n * but pausing the contract does not affect inbound transfers (tokens coming from L1)\\n */\\ncontract L2LPTGateway is IL2LPTGateway, ControlledGateway, L2ArbitrumMessenger {\\n    address public immutable l2Router;\\n    address public immutable l2LPTDataCache;\\n\\n    address public l1Counterpart;\\n\\n    constructor(\\n        address _l2Router,\\n        address _l1Lpt,\\n        address _l2Lpt,\\n        address _l2LPTDataCache\\n    ) ControlledGateway(_l1Lpt, _l2Lpt) {\\n        l2Router = _l2Router;\\n        l2LPTDataCache = _l2LPTDataCache;\\n    }\\n\\n    /**\\n     * @notice Sets address of companion L1LPTGateway\\n     * @dev Only address with the governor role is allowed to change the value of l1Counterpart\\n     * @param _l1Counterpart L1 Address of the counterpart\\n     */\\n    function setCounterpart(address _l1Counterpart)\\n        external\\n        onlyRole(GOVERNOR_ROLE)\\n    {\\n        l1Counterpart = _l1Counterpart;\\n    }\\n\\n    /**\\n     * @notice Burns L2 tokens and sends a message to L1\\n     * The tokens will be received on L1 only after the wait period (7 days) is over\\n     * @dev no additional callhook data is allowed\\n     * @param _l1Token L1 Address of LPT\\n     * @param _to Recepient address on L1\\n     * @param _amount Amount of tokens to burn\\n     * @param _data Contains sender and additional data to send to L1\\n     * @return res ID of the withdraw tx\\n     */\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) public override whenNotPaused returns (bytes memory res) {\\n        require(_l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n\\n        (address from, bytes memory extraData) = parseOutboundData(_data);\\n        require(extraData.length == 0, \\\"CALL_HOOK_DATA_NOT_ALLOWED\\\");\\n\\n        Mintable(l2Lpt).burn(from, _amount);\\n        IL2LPTDataCache(l2LPTDataCache).decreaseL2SupplyFromL1(_amount);\\n\\n        uint256 id = sendTxToL1(\\n            from,\\n            l1Counterpart,\\n            getOutboundCalldata(_l1Token, from, _to, _amount, extraData)\\n        );\\n\\n        // we don't need to track exitNums (b/c we have no fast exits) so we always use 0\\n        emit WithdrawalInitiated(_l1Token, from, _to, id, 0, _amount);\\n\\n        return abi.encode(id);\\n    }\\n\\n    /**\\n     * @notice Receives token amount from L1 and mints the equivalent tokens to the receiving address\\n     * @dev can only accept txs coming directly from L1 LPT Gateway\\n     * data param is unused because no additional data is allowed from L1\\n     * @param _l1Token L1 Address of LPT\\n     * @param _from Address of the sender on L1\\n     * @param _to Recepient address on L2\\n     * @param _amount Amount of tokens transferred\\n     */\\n    function finalizeInboundTransfer(\\n        address _l1Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata // data -- unused\\n    ) external override onlyL1Counterpart(l1Counterpart) {\\n        require(_l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n\\n        Mintable(l2Lpt).mint(_to, _amount);\\n        IL2LPTDataCache(l2LPTDataCache).increaseL2SupplyFromL1(_amount);\\n\\n        emit DepositFinalized(_l1Token, _from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Decodes calldata required for migration of tokens\\n     * @dev extraData can be left empty\\n     * @param data Encoded callhook data\\n     * @return from Sender of the tx\\n     * @return extraData Any other data sent to L1\\n     */\\n    function parseOutboundData(bytes memory data)\\n        internal\\n        view\\n        returns (address from, bytes memory extraData)\\n    {\\n        if (msg.sender == l2Router) {\\n            (from, extraData) = abi.decode(data, (address, bytes));\\n        } else {\\n            from = msg.sender;\\n            extraData = data;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns address of L1 LPT Gateway\\n     */\\n    function counterpartGateway() external view override returns (address) {\\n        return l1Counterpart;\\n    }\\n\\n    /**\\n     * @notice returns address of L2 version of LPT\\n     */\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (l1Token != l1Lpt) {\\n            return address(0);\\n        }\\n\\n        return l2Lpt;\\n    }\\n\\n    /**\\n     * @notice Creates calldata required to send tx to L1\\n     * @dev encodes the target function with its params which\\n     * will be called on L1 when the message is received on L1\\n     */\\n    function getOutboundCalldata(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data\\n    ) public pure returns (bytes memory outboundCalldata) {\\n        outboundCalldata = abi.encodeWithSelector(\\n            IL1LPTGateway.finalizeInboundTransfer.selector,\\n            token,\\n            from,\\n            to,\\n            amount,\\n            abi.encode(0, data) // we don't need to track exitNums (b/c we have no fast exits) so we always use 0\\n        );\\n\\n        return outboundCalldata;\\n    }\\n}\\n\",\"keccak256\":\"0x399bed61442c8e2b1233f1bbafa6e283763b7c28cdd5bd49c143c9a4e3d609d2\",\"license\":\"MIT\"},\"contracts/arbitrum/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint256);\\n\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n}\\n\",\"keccak256\":\"0x3d6319dff311534eee9cd66e2a577a3fa1ab34f9c7c5996bc4a3ecdd9101ebfb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002c1d38038062002c1d8339818101604052810190620000389190620003a8565b82826000600160006101000a81548160ff021916908315150217905550620000796000801b6200006d6200019660201b60201c565b6200019e60201b60201c565b620000ae7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556000801b620001b460201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050505062000462565b600033905090565b620001b082826200021760201b60201c565b5050565b6000620001c7836200030860201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6200022982826200032760201b60201c565b6200030457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002a96200019660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000838152602001908152602001600020600101549050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081519050620003a28162000448565b92915050565b60008060008060808587031215620003bf57600080fd5b6000620003cf8782880162000391565b9450506020620003e28782880162000391565b9350506040620003f58782880162000391565b9250506060620004088782880162000391565b91505092959194509250565b6000620004218262000428565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004538162000414565b81146200045f57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c612736620004e7600039600081816106ae01528181610b550152610f2b0152600081816108a701526112ee01526000818161062101528181610ac801528181610d5b0152610e9101526000818161049101528181610593015281816109a20152610e3501526127366000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637b3a3c8b116100b8578063a217fddf1161007c578063a217fddf14610351578063a7e28d481461036f578063c4c0087c1461039f578063ccc57490146103bd578063d547741f146103db578063e83d1f17146103f757610142565b80637b3a3c8b146102995780638456cb59146102c957806391d14854146102d35780639d79bdb514610303578063a0c76a961461032157610142565b80632f2ff15d1161010a5780632f2ff15d146101ff57806336568abe1461021b5780633f4ba83a146102375780634adc698a146102415780635c975abb1461025f57806377061e4d1461027d57610142565b806301ffc9a7146101475780630725667714610177578063248a9ca3146101955780632db09c1c146101c55780632e567b36146101e3575b600080fd5b610161600480360381019061015c9190611c28565b610415565b60405161016e9190611ff1565b60405180910390f35b61017f61048f565b60405161018c9190611eec565b60405180910390f35b6101af60048036038101906101aa9190611bc3565b6104b3565b6040516101bc919061200c565b60405180910390f35b6101cd6104d2565b6040516101da9190611eec565b60405180910390f35b6101fd60048036038101906101f89190611a22565b6104fa565b005b61021960048036038101906102149190611bec565b6107bc565b005b61023560048036038101906102309190611bec565b6107e5565b005b61023f610868565b005b6102496108a5565b6040516102569190611eec565b60405180910390f35b6102676108c9565b6040516102749190611ff1565b60405180910390f35b610297600480360381019061029291906119a5565b6108e0565b005b6102b360048036038101906102ae9190611b43565b610956565b6040516102c09190612027565b60405180910390f35b6102d1610cb2565b005b6102ed60048036038101906102e89190611bec565b610cef565b6040516102fa9190611ff1565b60405180910390f35b61030b610d59565b6040516103189190611eec565b60405180910390f35b61033b60048036038101906103369190611ab4565b610d7d565b6040516103489190612027565b60405180910390f35b610359610e2a565b604051610366919061200c565b60405180910390f35b610389600480360381019061038491906119a5565b610e31565b6040516103969190611eec565b60405180910390f35b6103a7610eb8565b6040516103b49190611eec565b60405180910390f35b6103c5610edc565b6040516103d2919061200c565b60405180910390f35b6103f560048036038101906103f09190611bec565b610f00565b005b6103ff610f29565b60405161040c9190611eec565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610488575061048782610f4d565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661052481610fb7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105889061213b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461061f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610616906120db565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1986866040518363ffffffff1660e01b815260040161067a929190611fc8565b600060405180830381600087803b15801561069457600080fd5b505af11580156106a8573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e879a2aa856040518263ffffffff1660e01b8152600401610705919061217b565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2876040516107ab919061217b565b60405180910390a450505050505050565b6107c5826104b3565b6107d6816107d1610fe0565b610fe8565b6107e08383611085565b505050565b6107ed610fe0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461085a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108519061215b565b60405180910390fd5b6108648282611165565b5050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561089a81610895610fe0565b610fe8565b6108a2611246565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556109128161090d610fe0565b610fe8565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60606109606108c9565b156109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610997906120fb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a25906120db565b60405180910390fd5b600080610a7e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506112e8565b915091506000815114610ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abd9061211b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac83886040518363ffffffff1660e01b8152600401610b21929190611fc8565b600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a6402a7f876040518263ffffffff1660e01b8152600401610bac919061217b565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505050506000610c178360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c128c878d8d89610d7d565b61136d565b9050808873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d738c60008c604051610c7c93929190611f91565b60405180910390a480604051602001610c95919061217b565b604051602081830303815290604052935050505095945050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610ce481610cdf610fe0565b610fe8565b610cec611471565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060632e567b3660e01b86868686600087604051602001610d9f929190612049565b604051602081830303815290604052604051602401610dc2959493929190611f07565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e8f5760009050610eb3565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b610f09826104b3565b610f1a81610f15610fe0565b610fe8565b610f248383611165565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073111100000000000000000000000000000000111182610fd9919061222f565b9050919050565b600033905090565b610ff28282610cef565b611081576110178173ffffffffffffffffffffffffffffffffffffffff166014611513565b6110258360001c6020611513565b604051602001611036929190611eb2565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110789190612079565b60405180910390fd5b5050565b61108f8282610cef565b61116157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611106610fe0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61116f8282610cef565b1561124257600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111e7610fe0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61124e6108c9565b61128d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611284906120bb565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6112d1610fe0565b6040516112de9190611eec565b60405180910390a1565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611361578280602001905181019061135491906119ce565b8092508193505050611368565b3391508290505b915091565b600080606473ffffffffffffffffffffffffffffffffffffffff1663928c169a85856040518363ffffffff1660e01b81526004016113ac929190611f61565b602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190611c51565b9050808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a688660405161145e9190612027565b60405180910390a4809150509392505050565b6114796108c9565b156114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b0906120fb565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114fc610fe0565b6040516115099190611eec565b60405180910390a1565b60606000600283600261152691906122cf565b6115309190612279565b67ffffffffffffffff81111561156f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115a15781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611689577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116c991906122cf565b6116d39190612279565b90505b60018111156117bf577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061173b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611778577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806117b89061242c565b90506116d6565b5060008414611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa9061209b565b60405180910390fd5b8091505092915050565b600061182061181b846121bb565b612196565b90508281526020810184848401111561183857600080fd5b6118438482856123ea565b509392505050565b600061185e611859846121bb565b612196565b90508281526020810184848401111561187657600080fd5b6118818482856123f9565b509392505050565b6000813590506118988161268d565b92915050565b6000815190506118ad816126a4565b92915050565b6000813590506118c2816126bb565b92915050565b6000813590506118d7816126d2565b92915050565b60008083601f8401126118ef57600080fd5b8235905067ffffffffffffffff81111561190857600080fd5b60208301915083600182028301111561192057600080fd5b9250929050565b600082601f83011261193857600080fd5b813561194884826020860161180d565b91505092915050565b600082601f83011261196257600080fd5b815161197284826020860161184b565b91505092915050565b60008135905061198a816126e9565b92915050565b60008151905061199f816126e9565b92915050565b6000602082840312156119b757600080fd5b60006119c584828501611889565b91505092915050565b600080604083850312156119e157600080fd5b60006119ef8582860161189e565b925050602083015167ffffffffffffffff811115611a0c57600080fd5b611a1885828601611951565b9150509250929050565b60008060008060008060a08789031215611a3b57600080fd5b6000611a4989828a01611889565b9650506020611a5a89828a01611889565b9550506040611a6b89828a01611889565b9450506060611a7c89828a0161197b565b935050608087013567ffffffffffffffff811115611a9957600080fd5b611aa589828a016118dd565b92509250509295509295509295565b600080600080600060a08688031215611acc57600080fd5b6000611ada88828901611889565b9550506020611aeb88828901611889565b9450506040611afc88828901611889565b9350506060611b0d8882890161197b565b925050608086013567ffffffffffffffff811115611b2a57600080fd5b611b3688828901611927565b9150509295509295909350565b600080600080600060808688031215611b5b57600080fd5b6000611b6988828901611889565b9550506020611b7a88828901611889565b9450506040611b8b8882890161197b565b935050606086013567ffffffffffffffff811115611ba857600080fd5b611bb4888289016118dd565b92509250509295509295909350565b600060208284031215611bd557600080fd5b6000611be3848285016118b3565b91505092915050565b60008060408385031215611bff57600080fd5b6000611c0d858286016118b3565b9250506020611c1e85828601611889565b9150509250929050565b600060208284031215611c3a57600080fd5b6000611c48848285016118c8565b91505092915050565b600060208284031215611c6357600080fd5b6000611c7184828501611990565b91505092915050565b611c8381612329565b82525050565b611c928161234d565b82525050565b611ca181612359565b82525050565b6000611cb2826121ec565b611cbc8185612202565b9350611ccc8185602086016123f9565b611cd5816124e5565b840191505092915050565b611ce9816123c6565b82525050565b611cf8816123d8565b82525050565b6000611d09826121f7565b611d138185612213565b9350611d238185602086016123f9565b611d2c816124e5565b840191505092915050565b6000611d42826121f7565b611d4c8185612224565b9350611d5c8185602086016123f9565b80840191505092915050565b6000611d75602083612213565b9150611d80826124f6565b602082019050919050565b6000611d98601483612213565b9150611da38261251f565b602082019050919050565b6000611dbb600d83612213565b9150611dc682612548565b602082019050919050565b6000611dde601083612213565b9150611de982612571565b602082019050919050565b6000611e01601a83612213565b9150611e0c8261259a565b602082019050919050565b6000611e24601783612224565b9150611e2f826125c3565b601782019050919050565b6000611e47601883612213565b9150611e52826125ec565b602082019050919050565b6000611e6a601183612224565b9150611e7582612615565b601182019050919050565b6000611e8d602f83612213565b9150611e988261263e565b604082019050919050565b611eac816123af565b82525050565b6000611ebd82611e17565b9150611ec98285611d37565b9150611ed482611e5d565b9150611ee08284611d37565b91508190509392505050565b6000602082019050611f016000830184611c7a565b92915050565b600060a082019050611f1c6000830188611c7a565b611f296020830187611c7a565b611f366040830186611c7a565b611f436060830185611ea3565b8181036080830152611f558184611ca7565b90509695505050505050565b6000604082019050611f766000830185611c7a565b8181036020830152611f888184611ca7565b90509392505050565b6000606082019050611fa66000830186611c7a565b611fb36020830185611ce0565b611fc06040830184611ea3565b949350505050565b6000604082019050611fdd6000830185611c7a565b611fea6020830184611ea3565b9392505050565b60006020820190506120066000830184611c89565b92915050565b60006020820190506120216000830184611c98565b92915050565b600060208201905081810360008301526120418184611ca7565b905092915050565b600060408201905061205e6000830185611cef565b81810360208301526120708184611ca7565b90509392505050565b600060208201905081810360008301526120938184611cfe565b905092915050565b600060208201905081810360008301526120b481611d68565b9050919050565b600060208201905081810360008301526120d481611d8b565b9050919050565b600060208201905081810360008301526120f481611dae565b9050919050565b6000602082019050818103600083015261211481611dd1565b9050919050565b6000602082019050818103600083015261213481611df4565b9050919050565b6000602082019050818103600083015261215481611e3a565b9050919050565b6000602082019050818103600083015261217481611e80565b9050919050565b60006020820190506121906000830184611ea3565b92915050565b60006121a06121b1565b90506121ac8282612456565b919050565b6000604051905090565b600067ffffffffffffffff8211156121d6576121d56124b6565b5b6121df826124e5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061223a8261238f565b91506122458361238f565b92508273ffffffffffffffffffffffffffffffffffffffff0382111561226e5761226d612487565b5b828201905092915050565b6000612284826123af565b915061228f836123af565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122c4576122c3612487565b5b828201905092915050565b60006122da826123af565b91506122e5836123af565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561231e5761231d612487565b5b828202905092915050565b60006123348261238f565b9050919050565b60006123468261238f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006123d1826123af565b9050919050565b60006123e3826123b9565b9050919050565b82818337600083830152505050565b60005b838110156124175780820151818401526020810190506123fc565b83811115612426576000848401525b50505050565b6000612437826123af565b9150600082141561244b5761244a612487565b5b600182039050919050565b61245f826124e5565b810181811067ffffffffffffffff8211171561247e5761247d6124b6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61269681612329565b81146126a157600080fd5b50565b6126ad8161233b565b81146126b857600080fd5b50565b6126c481612359565b81146126cf57600080fd5b50565b6126db81612363565b81146126e657600080fd5b50565b6126f2816123af565b81146126fd57600080fd5b5056fea264697066735822122020f2330bd518082bad898c9bf720d13af112e43b6d2f95c311802e4d71202b8b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80637b3a3c8b116100b8578063a217fddf1161007c578063a217fddf14610351578063a7e28d481461036f578063c4c0087c1461039f578063ccc57490146103bd578063d547741f146103db578063e83d1f17146103f757610142565b80637b3a3c8b146102995780638456cb59146102c957806391d14854146102d35780639d79bdb514610303578063a0c76a961461032157610142565b80632f2ff15d1161010a5780632f2ff15d146101ff57806336568abe1461021b5780633f4ba83a146102375780634adc698a146102415780635c975abb1461025f57806377061e4d1461027d57610142565b806301ffc9a7146101475780630725667714610177578063248a9ca3146101955780632db09c1c146101c55780632e567b36146101e3575b600080fd5b610161600480360381019061015c9190611c28565b610415565b60405161016e9190611ff1565b60405180910390f35b61017f61048f565b60405161018c9190611eec565b60405180910390f35b6101af60048036038101906101aa9190611bc3565b6104b3565b6040516101bc919061200c565b60405180910390f35b6101cd6104d2565b6040516101da9190611eec565b60405180910390f35b6101fd60048036038101906101f89190611a22565b6104fa565b005b61021960048036038101906102149190611bec565b6107bc565b005b61023560048036038101906102309190611bec565b6107e5565b005b61023f610868565b005b6102496108a5565b6040516102569190611eec565b60405180910390f35b6102676108c9565b6040516102749190611ff1565b60405180910390f35b610297600480360381019061029291906119a5565b6108e0565b005b6102b360048036038101906102ae9190611b43565b610956565b6040516102c09190612027565b60405180910390f35b6102d1610cb2565b005b6102ed60048036038101906102e89190611bec565b610cef565b6040516102fa9190611ff1565b60405180910390f35b61030b610d59565b6040516103189190611eec565b60405180910390f35b61033b60048036038101906103369190611ab4565b610d7d565b6040516103489190612027565b60405180910390f35b610359610e2a565b604051610366919061200c565b60405180910390f35b610389600480360381019061038491906119a5565b610e31565b6040516103969190611eec565b60405180910390f35b6103a7610eb8565b6040516103b49190611eec565b60405180910390f35b6103c5610edc565b6040516103d2919061200c565b60405180910390f35b6103f560048036038101906103f09190611bec565b610f00565b005b6103ff610f29565b60405161040c9190611eec565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610488575061048782610f4d565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661052481610fb7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105889061213b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461061f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610616906120db565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1986866040518363ffffffff1660e01b815260040161067a929190611fc8565b600060405180830381600087803b15801561069457600080fd5b505af11580156106a8573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e879a2aa856040518263ffffffff1660e01b8152600401610705919061217b565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2876040516107ab919061217b565b60405180910390a450505050505050565b6107c5826104b3565b6107d6816107d1610fe0565b610fe8565b6107e08383611085565b505050565b6107ed610fe0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461085a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108519061215b565b60405180910390fd5b6108648282611165565b5050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561089a81610895610fe0565b610fe8565b6108a2611246565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556109128161090d610fe0565b610fe8565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60606109606108c9565b156109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610997906120fb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a25906120db565b60405180910390fd5b600080610a7e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506112e8565b915091506000815114610ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abd9061211b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac83886040518363ffffffff1660e01b8152600401610b21929190611fc8565b600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a6402a7f876040518263ffffffff1660e01b8152600401610bac919061217b565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505050506000610c178360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c128c878d8d89610d7d565b61136d565b9050808873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d738c60008c604051610c7c93929190611f91565b60405180910390a480604051602001610c95919061217b565b604051602081830303815290604052935050505095945050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610ce481610cdf610fe0565b610fe8565b610cec611471565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060632e567b3660e01b86868686600087604051602001610d9f929190612049565b604051602081830303815290604052604051602401610dc2959493929190611f07565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e8f5760009050610eb3565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b610f09826104b3565b610f1a81610f15610fe0565b610fe8565b610f248383611165565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073111100000000000000000000000000000000111182610fd9919061222f565b9050919050565b600033905090565b610ff28282610cef565b611081576110178173ffffffffffffffffffffffffffffffffffffffff166014611513565b6110258360001c6020611513565b604051602001611036929190611eb2565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110789190612079565b60405180910390fd5b5050565b61108f8282610cef565b61116157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611106610fe0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61116f8282610cef565b1561124257600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111e7610fe0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61124e6108c9565b61128d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611284906120bb565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6112d1610fe0565b6040516112de9190611eec565b60405180910390a1565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611361578280602001905181019061135491906119ce565b8092508193505050611368565b3391508290505b915091565b600080606473ffffffffffffffffffffffffffffffffffffffff1663928c169a85856040518363ffffffff1660e01b81526004016113ac929190611f61565b602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190611c51565b9050808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a688660405161145e9190612027565b60405180910390a4809150509392505050565b6114796108c9565b156114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b0906120fb565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114fc610fe0565b6040516115099190611eec565b60405180910390a1565b60606000600283600261152691906122cf565b6115309190612279565b67ffffffffffffffff81111561156f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115a15781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611689577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116c991906122cf565b6116d39190612279565b90505b60018111156117bf577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061173b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611778577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806117b89061242c565b90506116d6565b5060008414611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa9061209b565b60405180910390fd5b8091505092915050565b600061182061181b846121bb565b612196565b90508281526020810184848401111561183857600080fd5b6118438482856123ea565b509392505050565b600061185e611859846121bb565b612196565b90508281526020810184848401111561187657600080fd5b6118818482856123f9565b509392505050565b6000813590506118988161268d565b92915050565b6000815190506118ad816126a4565b92915050565b6000813590506118c2816126bb565b92915050565b6000813590506118d7816126d2565b92915050565b60008083601f8401126118ef57600080fd5b8235905067ffffffffffffffff81111561190857600080fd5b60208301915083600182028301111561192057600080fd5b9250929050565b600082601f83011261193857600080fd5b813561194884826020860161180d565b91505092915050565b600082601f83011261196257600080fd5b815161197284826020860161184b565b91505092915050565b60008135905061198a816126e9565b92915050565b60008151905061199f816126e9565b92915050565b6000602082840312156119b757600080fd5b60006119c584828501611889565b91505092915050565b600080604083850312156119e157600080fd5b60006119ef8582860161189e565b925050602083015167ffffffffffffffff811115611a0c57600080fd5b611a1885828601611951565b9150509250929050565b60008060008060008060a08789031215611a3b57600080fd5b6000611a4989828a01611889565b9650506020611a5a89828a01611889565b9550506040611a6b89828a01611889565b9450506060611a7c89828a0161197b565b935050608087013567ffffffffffffffff811115611a9957600080fd5b611aa589828a016118dd565b92509250509295509295509295565b600080600080600060a08688031215611acc57600080fd5b6000611ada88828901611889565b9550506020611aeb88828901611889565b9450506040611afc88828901611889565b9350506060611b0d8882890161197b565b925050608086013567ffffffffffffffff811115611b2a57600080fd5b611b3688828901611927565b9150509295509295909350565b600080600080600060808688031215611b5b57600080fd5b6000611b6988828901611889565b9550506020611b7a88828901611889565b9450506040611b8b8882890161197b565b935050606086013567ffffffffffffffff811115611ba857600080fd5b611bb4888289016118dd565b92509250509295509295909350565b600060208284031215611bd557600080fd5b6000611be3848285016118b3565b91505092915050565b60008060408385031215611bff57600080fd5b6000611c0d858286016118b3565b9250506020611c1e85828601611889565b9150509250929050565b600060208284031215611c3a57600080fd5b6000611c48848285016118c8565b91505092915050565b600060208284031215611c6357600080fd5b6000611c7184828501611990565b91505092915050565b611c8381612329565b82525050565b611c928161234d565b82525050565b611ca181612359565b82525050565b6000611cb2826121ec565b611cbc8185612202565b9350611ccc8185602086016123f9565b611cd5816124e5565b840191505092915050565b611ce9816123c6565b82525050565b611cf8816123d8565b82525050565b6000611d09826121f7565b611d138185612213565b9350611d238185602086016123f9565b611d2c816124e5565b840191505092915050565b6000611d42826121f7565b611d4c8185612224565b9350611d5c8185602086016123f9565b80840191505092915050565b6000611d75602083612213565b9150611d80826124f6565b602082019050919050565b6000611d98601483612213565b9150611da38261251f565b602082019050919050565b6000611dbb600d83612213565b9150611dc682612548565b602082019050919050565b6000611dde601083612213565b9150611de982612571565b602082019050919050565b6000611e01601a83612213565b9150611e0c8261259a565b602082019050919050565b6000611e24601783612224565b9150611e2f826125c3565b601782019050919050565b6000611e47601883612213565b9150611e52826125ec565b602082019050919050565b6000611e6a601183612224565b9150611e7582612615565b601182019050919050565b6000611e8d602f83612213565b9150611e988261263e565b604082019050919050565b611eac816123af565b82525050565b6000611ebd82611e17565b9150611ec98285611d37565b9150611ed482611e5d565b9150611ee08284611d37565b91508190509392505050565b6000602082019050611f016000830184611c7a565b92915050565b600060a082019050611f1c6000830188611c7a565b611f296020830187611c7a565b611f366040830186611c7a565b611f436060830185611ea3565b8181036080830152611f558184611ca7565b90509695505050505050565b6000604082019050611f766000830185611c7a565b8181036020830152611f888184611ca7565b90509392505050565b6000606082019050611fa66000830186611c7a565b611fb36020830185611ce0565b611fc06040830184611ea3565b949350505050565b6000604082019050611fdd6000830185611c7a565b611fea6020830184611ea3565b9392505050565b60006020820190506120066000830184611c89565b92915050565b60006020820190506120216000830184611c98565b92915050565b600060208201905081810360008301526120418184611ca7565b905092915050565b600060408201905061205e6000830185611cef565b81810360208301526120708184611ca7565b90509392505050565b600060208201905081810360008301526120938184611cfe565b905092915050565b600060208201905081810360008301526120b481611d68565b9050919050565b600060208201905081810360008301526120d481611d8b565b9050919050565b600060208201905081810360008301526120f481611dae565b9050919050565b6000602082019050818103600083015261211481611dd1565b9050919050565b6000602082019050818103600083015261213481611df4565b9050919050565b6000602082019050818103600083015261215481611e3a565b9050919050565b6000602082019050818103600083015261217481611e80565b9050919050565b60006020820190506121906000830184611ea3565b92915050565b60006121a06121b1565b90506121ac8282612456565b919050565b6000604051905090565b600067ffffffffffffffff8211156121d6576121d56124b6565b5b6121df826124e5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061223a8261238f565b91506122458361238f565b92508273ffffffffffffffffffffffffffffffffffffffff0382111561226e5761226d612487565b5b828201905092915050565b6000612284826123af565b915061228f836123af565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122c4576122c3612487565b5b828201905092915050565b60006122da826123af565b91506122e5836123af565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561231e5761231d612487565b5b828202905092915050565b60006123348261238f565b9050919050565b60006123468261238f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006123d1826123af565b9050919050565b60006123e3826123b9565b9050919050565b82818337600083830152505050565b60005b838110156124175780820151818401526020810190506123fc565b83811115612426576000848401525b50505050565b6000612437826123af565b9150600082141561244b5761244a612487565b5b600182039050919050565b61245f826124e5565b810181811067ffffffffffffffff8211171561247e5761247d6124b6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61269681612329565b81146126a157600080fd5b50565b6126ad8161233b565b81146126b857600080fd5b50565b6126c481612359565b81146126cf57600080fd5b50565b6126db81612363565b81146126e657600080fd5b50565b6126f2816123af565b81146126fd57600080fd5b5056fea264697066735822122020f2330bd518082bad898c9bf720d13af112e43b6d2f95c311802e4d71202b8b64736f6c63430008040033",
  "devdoc": {
    "details": "the contract can be paused by the governor which will prevent any outbound transfers but pausing the contract does not affect inbound transfers (tokens coming from L1)",
    "kind": "dev",
    "methods": {
      "finalizeInboundTransfer(address,address,address,uint256,bytes)": {
        "details": "can only accept txs coming directly from L1 LPT Gateway data param is unused because no additional data is allowed from L1",
        "params": {
          "_amount": "Amount of tokens transferred",
          "_from": "Address of the sender on L1",
          "_l1Token": "L1 Address of LPT",
          "_to": "Recepient address on L2"
        }
      },
      "getOutboundCalldata(address,address,address,uint256,bytes)": {
        "details": "encodes the target function with its params which will be called on L1 when the message is received on L1"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "outboundTransfer(address,address,uint256,bytes)": {
        "details": "no additional callhook data is allowed",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_data": "Contains sender and additional data to send to L1",
          "_l1Token": "L1 Address of LPT",
          "_to": "Recepient address on L1"
        },
        "returns": {
          "res": "ID of the withdraw tx"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setCounterpart(address)": {
        "details": "Only address with the governor role is allowed to change the value of l1Counterpart",
        "params": {
          "_l1Counterpart": "L1 Address of the counterpart"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "L1LPTGateway",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateL2TokenAddress(address)": {
        "notice": "returns address of L2 version of LPT"
      },
      "counterpartGateway()": {
        "notice": "returns address of L1 LPT Gateway"
      },
      "finalizeInboundTransfer(address,address,address,uint256,bytes)": {
        "notice": "Receives token amount from L1 and mints the equivalent tokens to the receiving address"
      },
      "getOutboundCalldata(address,address,address,uint256,bytes)": {
        "notice": "Creates calldata required to send tx to L1"
      },
      "outboundTransfer(address,address,uint256,bytes)": {
        "notice": "Burns L2 tokens and sends a message to L1 The tokens will be received on L1 only after the wait period (7 days) is over"
      },
      "setCounterpart(address)": {
        "notice": "Sets address of companion L1LPTGateway"
      }
    },
    "notice": "Manages inbound and outbound transfers of LPT between Arbitrum Rollup and L1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 343,
        "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)338_storage)"
      },
      {
        "astId": 900,
        "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4726,
        "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
        "label": "l1Counterpart",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)338_storage"
      },
      "t_struct(RoleData)338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 337,
            "contract": "contracts/L2/gateway/L2LPTGateway.sol:L2LPTGateway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}