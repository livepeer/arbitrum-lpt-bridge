{
  "address": "0x61D8BA9616b0052F52a5f7B3487879F9D5F26e2b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "CacheTotalSupplyFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "TxToL1",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseL2SupplyFromL1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "finalizeCacheTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseL2SupplyFromL1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1CirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1LPTDataCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1TotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2LPTGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2SupplyFromL1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1LPTDataCache",
          "type": "address"
        }
      ],
      "name": "setL1LPTDataCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2LPTGateway",
          "type": "address"
        }
      ],
      "name": "setL2LPTGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6b5e409cbbc5b0c7d8adb6f6e2dab24e7e5f0fd64e201ae985e94f4da57606a",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0x61D8BA9616b0052F52a5f7B3487879F9D5F26e2b",
    "transactionIndex": 0,
    "gasUsed": "7011240",
    "logsBloom": "0x
    "blockHash": "0x533961dca6998bc7be433d20e8f26a2ce25cedc2682b28943c962afbb49b1be5",
    "transactionHash": "0xb6b5e409cbbc5b0c7d8adb6f6e2dab24e7e5f0fd64e201ae985e94f4da57606a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8645432,
        "transactionHash": "0xb6b5e409cbbc5b0c7d8adb6f6e2dab24e7e5f0fd64e201ae985e94f4da57606a",
        "address": "0x61D8BA9616b0052F52a5f7B3487879F9D5F26e2b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x533961dca6998bc7be433d20e8f26a2ce25cedc2682b28943c962afbb49b1be5"
      }
    ],
    "blockNumber": 8645432,
    "cumulativeGasUsed": "139760",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3f7f51b7bc6dda218aa0e2e13638ff2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"CacheTotalSupplyFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL1\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseL2SupplyFromL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"finalizeCacheTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseL2SupplyFromL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1CirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1LPTDataCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2LPTGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2SupplyFromL1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1LPTDataCache\",\"type\":\"address\"}],\"name\":\"setL1LPTDataCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2LPTGateway\",\"type\":\"address\"}],\"name\":\"setL2LPTGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decreaseL2SupplyFromL1(uint256)\":{\"details\":\"Should be called when L2LPTGateway burns LPT ensure L2 total supply and l2SupplyFromL1 decrease by the same amount\",\"params\":{\"_amount\":\"Amount to decrease l2SupplyFromL1\"}},\"finalizeCacheTotalSupply(uint256)\":{\"params\":{\"_totalSupply\":\"L1 LPT total supply\"}},\"increaseL2SupplyFromL1(uint256)\":{\"details\":\"Should be called when L2LPTGateway mints LPT to ensure that L2 total supply and l2SupplyFromL1 increase by the same amount\",\"params\":{\"_amount\":\"Amount to increase l2SupplyFromL1\"}},\"l1CirculatingSupply()\":{\"returns\":{\"_0\":\"L1 LPT circulating supply\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setL1LPTDataCache(address)\":{\"params\":{\"_l1LPTDataCache\":\"L1 address of L1LPTDataCache\"}},\"setL2LPTGateway(address)\":{\"params\":{\"_l2LPTGateway\":\"L2 address of L2LPTGateway\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decreaseL2SupplyFromL1(uint256)\":{\"notice\":\"Called by L2LPTGateway to decrease l2SupplyFromL1\"},\"finalizeCacheTotalSupply(uint256)\":{\"notice\":\"Called by L1LPTDataCache from L1 to cache L1 LPT total supply\"},\"increaseL2SupplyFromL1(uint256)\":{\"notice\":\"Called by L2LPTGateway to increase l2SupplyFromL1\"},\"l1CirculatingSupply()\":{\"notice\":\"Calculate and return L1 LPT circulating supply\"},\"setL1LPTDataCache(address)\":{\"notice\":\"Sets the L1LPTDataCache\"},\"setL2LPTGateway(address)\":{\"notice\":\"Sets the L2LPTGateway\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/gateway/L2LPTDataCache.sol\":\"L2LPTDataCache\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IArbSys} from \\\"../../arbitrum/IArbSys.sol\\\";\\n\\nabstract contract L2ArbitrumMessenger {\\n    event TxToL1(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _id,\\n        bytes _data\\n    );\\n\\n    function sendTxToL1(\\n        address user,\\n        address to,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        // note: this method doesn't support sending ether to L1 together with a call\\n        uint256 id = IArbSys(address(100)).sendTxToL1(to, data);\\n        emit TxToL1(user, to, id, data);\\n        return id;\\n    }\\n\\n    modifier onlyL1Counterpart(address l1Counterpart) {\\n        require(\\n            msg.sender == applyL1ToL2Alias(l1Counterpart),\\n            \\\"ONLY_COUNTERPART_GATEWAY\\\"\\n        );\\n        _;\\n    }\\n\\n    uint160 internal constant OFFSET =\\n        uint160(0x1111000000000000000000000000000000001111);\\n\\n    // l1 addresses are transformed durng l1->l2 calls\\n    function applyL1ToL2Alias(address l1Address)\\n        internal\\n        pure\\n        returns (address l2Address)\\n    {\\n        l2Address = address(uint160(l1Address) + OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x03edd83d95772f14bba5da9c2726caece1b06b15f0106bd58a929e4cbdcee5a1\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2LPTDataCache.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {L2ArbitrumMessenger} from \\\"./L2ArbitrumMessenger.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract L2LPTDataCache is Ownable, L2ArbitrumMessenger {\\n    address public l1LPTDataCache;\\n    address public l2LPTGateway;\\n\\n    // Total supply of LPT on L1\\n    // Updates are initiated by a call from the L1LPTDataCache on L1\\n    uint256 public l1TotalSupply;\\n    // Amount of L2 LPT transferred from L1 via the LPT bridge\\n    uint256 public l2SupplyFromL1;\\n\\n    event CacheTotalSupplyFinalized(uint256 totalSupply);\\n\\n    modifier onlyL2LPTGateway() {\\n        require(msg.sender == l2LPTGateway, \\\"NOT_L2_LPT_GATEWAY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the L1LPTDataCache\\n     * @param _l1LPTDataCache L1 address of L1LPTDataCache\\n     */\\n    function setL1LPTDataCache(address _l1LPTDataCache) external onlyOwner {\\n        l1LPTDataCache = _l1LPTDataCache;\\n    }\\n\\n    /**\\n     * @notice Sets the L2LPTGateway\\n     * @param _l2LPTGateway L2 address of L2LPTGateway\\n     */\\n    function setL2LPTGateway(address _l2LPTGateway) external onlyOwner {\\n        l2LPTGateway = _l2LPTGateway;\\n    }\\n\\n    /**\\n     * @notice Called by L2LPTGateway to increase l2SupplyFromL1\\n     * @dev Should be called when L2LPTGateway mints LPT to ensure that L2 total supply and l2SupplyFromL1 increase by the same amount\\n     * @param _amount Amount to increase l2SupplyFromL1\\n     */\\n    function increaseL2SupplyFromL1(uint256 _amount) external onlyL2LPTGateway {\\n        l2SupplyFromL1 += _amount;\\n\\n        // No event because the L2LPTGateway events are sufficient\\n    }\\n\\n    /**\\n     * @notice Called by L2LPTGateway to decrease l2SupplyFromL1\\n     * @dev Should be called when L2LPTGateway burns LPT ensure L2 total supply and l2SupplyFromL1 decrease by the same amount\\n     * @param _amount Amount to decrease l2SupplyFromL1\\n     */\\n    function decreaseL2SupplyFromL1(uint256 _amount) external onlyL2LPTGateway {\\n        // If there is a mass withdrawal from L2, _amount could exceed l2SupplyFromL1.\\n        // In this case, we just set l2SupplyFromL1 = 0 because there will be no more supply on L2\\n        // that is from L1 and the excess (_amount - l2SupplyFromL1) is inflationary LPT that was\\n        // never from L1 in the first place.\\n        if (_amount > l2SupplyFromL1) {\\n            l2SupplyFromL1 = 0;\\n        } else {\\n            l2SupplyFromL1 -= _amount;\\n        }\\n\\n        // No event because the L2LPTGateway events are sufficient\\n    }\\n\\n    /**\\n     * @notice Called by L1LPTDataCache from L1 to cache L1 LPT total supply\\n     * @param _totalSupply L1 LPT total supply\\n     */\\n    function finalizeCacheTotalSupply(uint256 _totalSupply)\\n        external\\n        onlyL1Counterpart(l1LPTDataCache)\\n    {\\n        l1TotalSupply = _totalSupply;\\n\\n        emit CacheTotalSupplyFinalized(_totalSupply);\\n    }\\n\\n    /**\\n     * @notice Calculate and return L1 LPT circulating supply\\n     * @return L1 LPT circulating supply\\n     */\\n    function l1CirculatingSupply() public view returns (uint256) {\\n        // After the first update from L1, l1TotalSupply should always be >= l2SupplyFromL1\\n        // The below check is defensive to avoid reverting if this invariant for some reason violated\\n        return\\n            l1TotalSupply >= l2SupplyFromL1\\n                ? l1TotalSupply - l2SupplyFromL1\\n                : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5697439ddb73fb929908e1ebd316b1ba0a8de3e39c1ca3f1f9994b45e8f0185d\",\"license\":\"MIT\"},\"contracts/arbitrum/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint256);\\n\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n}\\n\",\"keccak256\":\"0x3d6319dff311534eee9cd66e2a577a3fa1ab34f9c7c5996bc4a3ecdd9101ebfb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610d808061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b833138511610066578063b8331385146101c6578063e879a2aa146101e4578063f2fde38b14610200578063fb1c5ee91461021c576100cf565b80638da5cb5b14610170578063a6402a7f1461018e578063ae3a23e0146101aa576100cf565b8063095654b6146100d45780630dd264d5146100f05780631429ce661461010e5780632b8242731461012a578063715018a6146101485780638869bdb914610152575b600080fd5b6100ee60048036038101906100e99190610950565b61023a565b005b6100f86102fa565b6040516101059190610a4c565b60405180910390f35b61012860048036038101906101239190610950565b610320565b005b6101326103e0565b60405161013f9190610ae7565b60405180910390f35b6101506103e6565b005b61015a61046e565b6040516101679190610a4c565b60405180910390f35b610178610494565b6040516101859190610a4c565b60405180910390f35b6101a860048036038101906101a39190610979565b6104bd565b005b6101c460048036038101906101bf9190610979565b610581565b005b6101ce61065c565b6040516101db9190610ae7565b60405180910390f35b6101fe60048036038101906101f99190610979565b610662565b005b61021a60048036038101906102159190610950565b61070e565b005b610224610806565b6040516102319190610ae7565b60405180910390f35b610242610831565b73ffffffffffffffffffffffffffffffffffffffff16610260610494565b73ffffffffffffffffffffffffffffffffffffffff16146102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad90610aa7565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610328610831565b73ffffffffffffffffffffffffffffffffffffffff16610346610494565b73ffffffffffffffffffffffffffffffffffffffff161461039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610aa7565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b6103ee610831565b73ffffffffffffffffffffffffffffffffffffffff1661040c610494565b73ffffffffffffffffffffffffffffffffffffffff1614610462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045990610aa7565b60405180910390fd5b61046c6000610839565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490610a87565b60405180910390fd5b60045481111561056457600060048190555061057e565b80600460008282546105769190610bb3565b925050819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166105ad816108fd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190610ac7565b60405180910390fd5b816003819055507f8d07aadbdca8bc9f3ec4711bd6c9f59cb3b4201d014664d6ebdfb201e751d308826040516106509190610ae7565b60405180910390a15050565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e990610a87565b60405180910390fd5b80600460008282546107049190610b5d565b9250508190555050565b610716610831565b73ffffffffffffffffffffffffffffffffffffffff16610734610494565b73ffffffffffffffffffffffffffffffffffffffff161461078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190610aa7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190610a67565b60405180910390fd5b61080381610839565b50565b6000600454600354101561081b57600061082c565b60045460035461082b9190610bb3565b5b905090565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007311110000000000000000000000000000000011118261091f9190610b13565b9050919050565b60008135905061093581610d1c565b92915050565b60008135905061094a81610d33565b92915050565b60006020828403121561096257600080fd5b600061097084828501610926565b91505092915050565b60006020828403121561098b57600080fd5b60006109998482850161093b565b91505092915050565b6109ab81610be7565b82525050565b60006109be602683610b02565b91506109c982610c52565b604082019050919050565b60006109e1601283610b02565b91506109ec82610ca1565b602082019050919050565b6000610a04602083610b02565b9150610a0f82610cca565b602082019050919050565b6000610a27601883610b02565b9150610a3282610cf3565b602082019050919050565b610a4681610c19565b82525050565b6000602082019050610a6160008301846109a2565b92915050565b60006020820190508181036000830152610a80816109b1565b9050919050565b60006020820190508181036000830152610aa0816109d4565b9050919050565b60006020820190508181036000830152610ac0816109f7565b9050919050565b60006020820190508181036000830152610ae081610a1a565b9050919050565b6000602082019050610afc6000830184610a3d565b92915050565b600082825260208201905092915050565b6000610b1e82610bf9565b9150610b2983610bf9565b92508273ffffffffffffffffffffffffffffffffffffffff03821115610b5257610b51610c23565b5b828201905092915050565b6000610b6882610c19565b9150610b7383610c19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ba857610ba7610c23565b5b828201905092915050565b6000610bbe82610c19565b9150610bc983610c19565b925082821015610bdc57610bdb610c23565b5b828203905092915050565b6000610bf282610bf9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e4f545f4c325f4c50545f474154455741590000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b610d2581610be7565b8114610d3057600080fd5b50565b610d3c81610c19565b8114610d4757600080fd5b5056fea26469706673582212209695b63dd94415f75e8d72f351e514453259f0f5c4283e464c5d9685dbaaeaa464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b833138511610066578063b8331385146101c6578063e879a2aa146101e4578063f2fde38b14610200578063fb1c5ee91461021c576100cf565b80638da5cb5b14610170578063a6402a7f1461018e578063ae3a23e0146101aa576100cf565b8063095654b6146100d45780630dd264d5146100f05780631429ce661461010e5780632b8242731461012a578063715018a6146101485780638869bdb914610152575b600080fd5b6100ee60048036038101906100e99190610950565b61023a565b005b6100f86102fa565b6040516101059190610a4c565b60405180910390f35b61012860048036038101906101239190610950565b610320565b005b6101326103e0565b60405161013f9190610ae7565b60405180910390f35b6101506103e6565b005b61015a61046e565b6040516101679190610a4c565b60405180910390f35b610178610494565b6040516101859190610a4c565b60405180910390f35b6101a860048036038101906101a39190610979565b6104bd565b005b6101c460048036038101906101bf9190610979565b610581565b005b6101ce61065c565b6040516101db9190610ae7565b60405180910390f35b6101fe60048036038101906101f99190610979565b610662565b005b61021a60048036038101906102159190610950565b61070e565b005b610224610806565b6040516102319190610ae7565b60405180910390f35b610242610831565b73ffffffffffffffffffffffffffffffffffffffff16610260610494565b73ffffffffffffffffffffffffffffffffffffffff16146102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad90610aa7565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610328610831565b73ffffffffffffffffffffffffffffffffffffffff16610346610494565b73ffffffffffffffffffffffffffffffffffffffff161461039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610aa7565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b6103ee610831565b73ffffffffffffffffffffffffffffffffffffffff1661040c610494565b73ffffffffffffffffffffffffffffffffffffffff1614610462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045990610aa7565b60405180910390fd5b61046c6000610839565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490610a87565b60405180910390fd5b60045481111561056457600060048190555061057e565b80600460008282546105769190610bb3565b925050819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166105ad816108fd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190610ac7565b60405180910390fd5b816003819055507f8d07aadbdca8bc9f3ec4711bd6c9f59cb3b4201d014664d6ebdfb201e751d308826040516106509190610ae7565b60405180910390a15050565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e990610a87565b60405180910390fd5b80600460008282546107049190610b5d565b9250508190555050565b610716610831565b73ffffffffffffffffffffffffffffffffffffffff16610734610494565b73ffffffffffffffffffffffffffffffffffffffff161461078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190610aa7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190610a67565b60405180910390fd5b61080381610839565b50565b6000600454600354101561081b57600061082c565b60045460035461082b9190610bb3565b5b905090565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007311110000000000000000000000000000000011118261091f9190610b13565b9050919050565b60008135905061093581610d1c565b92915050565b60008135905061094a81610d33565b92915050565b60006020828403121561096257600080fd5b600061097084828501610926565b91505092915050565b60006020828403121561098b57600080fd5b60006109998482850161093b565b91505092915050565b6109ab81610be7565b82525050565b60006109be602683610b02565b91506109c982610c52565b604082019050919050565b60006109e1601283610b02565b91506109ec82610ca1565b602082019050919050565b6000610a04602083610b02565b9150610a0f82610cca565b602082019050919050565b6000610a27601883610b02565b9150610a3282610cf3565b602082019050919050565b610a4681610c19565b82525050565b6000602082019050610a6160008301846109a2565b92915050565b60006020820190508181036000830152610a80816109b1565b9050919050565b60006020820190508181036000830152610aa0816109d4565b9050919050565b60006020820190508181036000830152610ac0816109f7565b9050919050565b60006020820190508181036000830152610ae081610a1a565b9050919050565b6000602082019050610afc6000830184610a3d565b92915050565b600082825260208201905092915050565b6000610b1e82610bf9565b9150610b2983610bf9565b92508273ffffffffffffffffffffffffffffffffffffffff03821115610b5257610b51610c23565b5b828201905092915050565b6000610b6882610c19565b9150610b7383610c19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ba857610ba7610c23565b5b828201905092915050565b6000610bbe82610c19565b9150610bc983610c19565b925082821015610bdc57610bdb610c23565b5b828203905092915050565b6000610bf282610bf9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e4f545f4c325f4c50545f474154455741590000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b610d2581610be7565b8114610d3057600080fd5b50565b610d3c81610c19565b8114610d4757600080fd5b5056fea26469706673582212209695b63dd94415f75e8d72f351e514453259f0f5c4283e464c5d9685dbaaeaa464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decreaseL2SupplyFromL1(uint256)": {
        "details": "Should be called when L2LPTGateway burns LPT ensure L2 total supply and l2SupplyFromL1 decrease by the same amount",
        "params": {
          "_amount": "Amount to decrease l2SupplyFromL1"
        }
      },
      "finalizeCacheTotalSupply(uint256)": {
        "params": {
          "_totalSupply": "L1 LPT total supply"
        }
      },
      "increaseL2SupplyFromL1(uint256)": {
        "details": "Should be called when L2LPTGateway mints LPT to ensure that L2 total supply and l2SupplyFromL1 increase by the same amount",
        "params": {
          "_amount": "Amount to increase l2SupplyFromL1"
        }
      },
      "l1CirculatingSupply()": {
        "returns": {
          "_0": "L1 LPT circulating supply"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setL1LPTDataCache(address)": {
        "params": {
          "_l1LPTDataCache": "L1 address of L1LPTDataCache"
        }
      },
      "setL2LPTGateway(address)": {
        "params": {
          "_l2LPTGateway": "L2 address of L2LPTGateway"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decreaseL2SupplyFromL1(uint256)": {
        "notice": "Called by L2LPTGateway to decrease l2SupplyFromL1"
      },
      "finalizeCacheTotalSupply(uint256)": {
        "notice": "Called by L1LPTDataCache from L1 to cache L1 LPT total supply"
      },
      "increaseL2SupplyFromL1(uint256)": {
        "notice": "Called by L2LPTGateway to increase l2SupplyFromL1"
      },
      "l1CirculatingSupply()": {
        "notice": "Calculate and return L1 LPT circulating supply"
      },
      "setL1LPTDataCache(address)": {
        "notice": "Sets the L1LPTDataCache"
      },
      "setL2LPTGateway(address)": {
        "notice": "Sets the L2LPTGateway"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 706,
        "contract": "contracts/L2/gateway/L2LPTDataCache.sol:L2LPTDataCache",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4558,
        "contract": "contracts/L2/gateway/L2LPTDataCache.sol:L2LPTDataCache",
        "label": "l1LPTDataCache",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4560,
        "contract": "contracts/L2/gateway/L2LPTDataCache.sol:L2LPTDataCache",
        "label": "l2LPTGateway",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4562,
        "contract": "contracts/L2/gateway/L2LPTDataCache.sol:L2LPTDataCache",
        "label": "l1TotalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4564,
        "contract": "contracts/L2/gateway/L2LPTDataCache.sol:L2LPTDataCache",
        "label": "l2SupplyFromL1",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}