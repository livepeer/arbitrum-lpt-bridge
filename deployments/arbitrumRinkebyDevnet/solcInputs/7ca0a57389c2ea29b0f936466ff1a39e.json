{
  "language": "Solidity",
  "sources": {
    "contracts/L2/gateway/L2Migrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {L2ArbitrumMessenger} from \"./L2ArbitrumMessenger.sol\";\nimport {IMigrator} from \"../../interfaces/IMigrator.sol\";\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ninterface IBondingManager {\n    function bondForWithHint(\n        uint256 _amount,\n        address _owner,\n        address _to,\n        address _oldDelegateNewPosPrev,\n        address _oldDelegateNewPosNext,\n        address _newDelegateNewPosPrev,\n        address _newDelegateNewPosNext\n    ) external;\n}\n\ninterface ITicketBroker {\n    function fundDepositAndReserveFor(\n        address _addr,\n        uint256 _depositAmount,\n        uint256 _reserveAmount\n    ) external;\n}\n\ninterface IMerkleSnapshot {\n    function verify(\n        bytes32 _id,\n        bytes32[] memory _proof,\n        bytes32 _leaf\n    ) external view returns (bool);\n}\n\ninterface IDelegatorPool {\n    function initialize(address _bondingManager) external;\n\n    function claim(address _addr, uint256 _stake) external;\n}\n\ninterface ApproveLike {\n    function approve(address _addr, uint256 _amount) external;\n}\n\ncontract L2Migrator is L2ArbitrumMessenger, IMigrator, AccessControl {\n    address public immutable bondingManagerAddr;\n    address public immutable ticketBrokerAddr;\n    address public immutable merkleSnapshotAddr;\n    address public immutable tokenAddr;\n\n    address public l1Migrator;\n    address public delegatorPoolImpl;\n    bool public claimStakeEnabled;\n\n    mapping(address => bool) public migratedDelegators;\n    mapping(address => address) public delegatorPools;\n    mapping(address => uint256) public claimedDelegatedStake;\n    mapping(address => mapping(uint256 => bool)) public migratedUnbondingLocks;\n    mapping(address => bool) public migratedSenders;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n\n    event MigrateDelegatorFinalized(MigrateDelegatorParams params);\n\n    event MigrateUnbondingLocksFinalized(MigrateUnbondingLocksParams params);\n\n    event MigrateSenderFinalized(MigrateSenderParams params);\n\n    event DelegatorPoolCreated(address indexed l1Addr, address delegatorPool);\n\n    event StakeClaimed(\n        address indexed delegator,\n        address delegate,\n        uint256 stake,\n        uint256 fees\n    );\n\n    constructor(\n        address _l1Migrator,\n        address _delegatorPoolImpl,\n        address _bondingManagerAddr,\n        address _ticketBrokerAddr,\n        address _merkleSnapshotAddr,\n        address _tokenAddr\n    ) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\n\n        l1Migrator = _l1Migrator;\n        delegatorPoolImpl = _delegatorPoolImpl;\n        bondingManagerAddr = _bondingManagerAddr;\n        ticketBrokerAddr = _ticketBrokerAddr;\n        merkleSnapshotAddr = _merkleSnapshotAddr;\n        tokenAddr = _tokenAddr;\n    }\n\n    /**\n     * @notice Sets L1Migrator\n     * @param _l1Migrator L1Migrator address\n     */\n    function setL1Migrator(address _l1Migrator)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        l1Migrator = _l1Migrator;\n    }\n\n    /**\n     * @notice Sets DelegatorPool implementation contract\n     * @param _delegatorPoolImpl DelegatorPool implementation contract\n     */\n    function setDelegatorPoolImpl(address _delegatorPoolImpl)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        delegatorPoolImpl = _delegatorPoolImpl;\n    }\n\n    /**\n     * @notice Enable/disable claimStake()\n     * @param _enabled True/false indicating claimStake() enabled/disabled\n     */\n    function setClaimStakeEnabled(bool _enabled)\n        external\n        onlyRole(GOVERNOR_ROLE)\n    {\n        claimStakeEnabled = _enabled;\n    }\n\n    /**\n     * @notice Called by L1Migrator to complete transcoder/delegator state migration\n     * @param _params L1 state relevant for migration\n     */\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params)\n        external\n        onlyL1Counterpart(l1Migrator)\n    {\n        require(\n            !migratedDelegators[_params.l1Addr],\n            \"L2Migrator#finalizeMigrateDelegator: ALREADY_MIGRATED\"\n        );\n\n        migratedDelegators[_params.l1Addr] = true;\n\n        if (_params.l1Addr == _params.delegate) {\n            // l1Addr is an orchestrator on L1:\n            // 1. Stake _params.stake on behalf of _params.l2Addr\n            // 2. Create delegator pool\n            // 3. Stake _params.delegatedStake on behalf of the delegator pool\n            bondFor(_params.stake, _params.l2Addr, _params.delegate);\n\n            address poolAddr = Clones.clone(delegatorPoolImpl);\n\n            delegatorPools[_params.l1Addr] = poolAddr;\n\n            bondFor(\n                _params.delegatedStake - claimedDelegatedStake[_params.l1Addr],\n                poolAddr,\n                _params.delegate\n            );\n\n            IDelegatorPool(poolAddr).initialize(bondingManagerAddr);\n\n            emit DelegatorPoolCreated(_params.l1Addr, poolAddr);\n        } else {\n            // l1Addr is a delegator on L1:\n            // If a delegator pool exists for _params.delegate claim stake which\n            // was already migrated by delegate on behalf of _params.l2Addr.\n            // Otherwise, stake _params.stake on behalf of _params.l2Addr.\n            address pool = delegatorPools[_params.delegate];\n\n            if (pool != address(0)) {\n                // Claim stake that is held by the delegator pool\n                IDelegatorPool(pool).claim(_params.l2Addr, _params.stake);\n            } else {\n                bondFor(_params.stake, _params.l2Addr, _params.delegate);\n            }\n        }\n\n        claimedDelegatedStake[_params.delegate] += _params.stake;\n\n        // Use .call() since l2Addr could be a contract that needs more gas than\n        // the stipend provided by .transfer()\n        // The .call() is safe without a re-entrancy guard because this function cannot be re-entered\n        // by _params.l2Addr since the function can only be called by the L1Migrator via a cross-chain retryable ticket\n        if (_params.fees > 0) {\n            (bool ok, ) = _params.l2Addr.call{value: _params.fees}(\"\");\n            require(ok, \"L2Migrator#finalizeMigrateDelegator: FAIL_FEE\");\n        }\n\n        emit MigrateDelegatorFinalized(_params);\n    }\n\n    /**\n     * @notice Called by L1Migrator to complete unbonding locks migration\n     * @param _params L1 state relevant for migration\n     */\n    function finalizeMigrateUnbondingLocks(\n        MigrateUnbondingLocksParams memory _params\n    ) external onlyL1Counterpart(l1Migrator) {\n        for (uint256 i = 0; i < _params.unbondingLockIds.length; i++) {\n            uint256 id = _params.unbondingLockIds[i];\n            require(\n                !migratedUnbondingLocks[_params.l1Addr][id],\n                \"L2Migrator#finalizeMigrateUnbondingLocks: ALREADY_MIGRATED\"\n            );\n            migratedUnbondingLocks[_params.l1Addr][id] = true;\n        }\n\n        bondFor(_params.total, _params.l2Addr, _params.delegate);\n\n        emit MigrateUnbondingLocksFinalized(_params);\n    }\n\n    /**\n     * @notice Called by L1Migrator to complete sender deposit/reserve migration\n     * @param _params L1 state relevant for migration\n     */\n    function finalizeMigrateSender(MigrateSenderParams memory _params)\n        external\n        onlyL1Counterpart(l1Migrator)\n    {\n        require(\n            !migratedSenders[_params.l1Addr],\n            \"L2Migrator#finalizeMigrateSender: ALREADY_MIGRATED\"\n        );\n\n        migratedSenders[_params.l1Addr] = true;\n\n        ITicketBroker(ticketBrokerAddr).fundDepositAndReserveFor(\n            _params.l2Addr,\n            _params.deposit,\n            _params.reserve\n        );\n\n        emit MigrateSenderFinalized(_params);\n    }\n\n    receive() external payable {}\n\n    /**\n     * @notice Completes delegator migration using a Merkle proof that a delegator's state was included in a state\n     * snapshot represented by a Merkle tree root\n     * @dev Assume that only EOAs are included in the snapshot\n     * Regardless of the caller of this function, the EOA from L1 will be able to access its stake on L2\n     * @param _delegate Address that is migrating\n     * @param _stake Stake of delegator on L1\n     * @param _fees Fees of delegator on L1\n     * @param _proof Merkle proof of inclusion in Merkle tree state snapshot\n     * @param _newDelegate Optional address of a new delegate on L2\n     */\n    function claimStake(\n        address _delegate,\n        uint256 _stake,\n        uint256 _fees,\n        bytes32[] calldata _proof,\n        address _newDelegate\n    ) external {\n        require(\n            claimStakeEnabled,\n            \"L2Migrator#claimStake: CLAIM_STAKE_DISABLED\"\n        );\n\n        IMerkleSnapshot merkleSnapshot = IMerkleSnapshot(merkleSnapshotAddr);\n\n        address delegator = msg.sender;\n        bytes32 leaf = keccak256(\n            abi.encodePacked(delegator, _delegate, _stake, _fees)\n        );\n\n        require(\n            merkleSnapshot.verify(keccak256(\"LIP-73\"), _proof, leaf),\n            \"L2Migrator#claimStake: INVALID_PROOF\"\n        );\n\n        require(\n            !migratedDelegators[delegator],\n            \"L2Migrator#claimStake: ALREADY_MIGRATED\"\n        );\n\n        migratedDelegators[delegator] = true;\n        claimedDelegatedStake[_delegate] += _stake;\n\n        address pool = delegatorPools[_delegate];\n\n        address delegate = _delegate;\n        if (_newDelegate != address(0)) {\n            delegate = _newDelegate;\n        }\n\n        if (pool != address(0)) {\n            // Claim stake that is held by the delegator pool\n            IDelegatorPool(pool).claim(delegator, _stake);\n        } else {\n            bondFor(_stake, delegator, delegate);\n        }\n\n        // Only EOAs are included in the snapshot so we do not need to worry about\n        // the insufficeint gas stipend with transfer()\n        if (_fees > 0) {\n            payable(delegator).transfer(_fees);\n        }\n\n        emit StakeClaimed(delegator, delegate, _stake, _fees);\n    }\n\n    function bondFor(\n        uint256 _amount,\n        address _owner,\n        address _to\n    ) internal {\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\n\n        ApproveLike(tokenAddr).approve(bondingManagerAddr, _amount);\n        bondingManager.bondForWithHint(\n            _amount,\n            _owner,\n            _to,\n            address(0),\n            address(0),\n            address(0),\n            address(0)\n        );\n    }\n}\n"
    },
    "contracts/L2/gateway/L2ArbitrumMessenger.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IArbSys} from \"../../arbitrum/IArbSys.sol\";\n\nabstract contract L2ArbitrumMessenger {\n    event TxToL1(\n        address indexed _from,\n        address indexed _to,\n        uint256 indexed _id,\n        bytes _data\n    );\n\n    function sendTxToL1(\n        address user,\n        address to,\n        bytes memory data\n    ) internal returns (uint256) {\n        // note: this method doesn't support sending ether to L1 together with a call\n        uint256 id = IArbSys(address(100)).sendTxToL1(to, data);\n        emit TxToL1(user, to, id, data);\n        return id;\n    }\n\n    modifier onlyL1Counterpart(address l1Counterpart) {\n        require(\n            msg.sender == applyL1ToL2Alias(l1Counterpart),\n            \"ONLY_COUNTERPART_GATEWAY\"\n        );\n        _;\n    }\n\n    uint160 internal constant OFFSET =\n        uint160(0x1111000000000000000000000000000000001111);\n\n    // l1 addresses are transformed durng l1->l2 calls\n    function applyL1ToL2Alias(address l1Address)\n        internal\n        pure\n        returns (address l2Address)\n    {\n        l2Address = address(uint160(l1Address) + OFFSET);\n    }\n}\n"
    },
    "contracts/interfaces/IMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMigrator {\n    struct MigrateDelegatorParams {\n        // Address that is migrating from L1\n        address l1Addr;\n        // Address to use on L2\n        // If null, l1Addr is used on L2\n        address l2Addr;\n        // Stake of l1Addr on L1\n        uint256 stake;\n        // Delegated stake of l1Addr on L1\n        uint256 delegatedStake;\n        // Fees of l1Addr on L1\n        uint256 fees;\n        // Delegate of l1Addr on L1\n        address delegate;\n    }\n\n    struct MigrateUnbondingLocksParams {\n        // Address that is migrating from L1\n        address l1Addr;\n        // Address to use on L2\n        // If null, l1Addr is used on L2\n        address l2Addr;\n        // Total tokens in unbonding locks\n        uint256 total;\n        // IDs of unbonding locks being migrated\n        uint256[] unbondingLockIds;\n        // Delegate of l1Addr on L1\n        address delegate;\n    }\n\n    struct MigrateSenderParams {\n        // Address that is migrating from L1\n        address l1Addr;\n        // Address to use on L2\n        // If null, l1Addr is used on L2\n        address l2Addr;\n        // Deposit of l1Addr on L1\n        uint256 deposit;\n        // Reserve of l1Addr on L1\n        uint256 reserve;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/arbitrum/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint256);\n\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}