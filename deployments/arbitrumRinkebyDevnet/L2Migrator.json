{
  "address": "0xD527B4ba179F41789dC00A144c1E1e374687CD5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Migrator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegatorPoolImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondingManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticketBrokerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merkleSnapshotAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatorPool",
          "type": "address"
        }
      ],
      "name": "DelegatorPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateDelegatorFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateSenderFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "MigrateUnbondingLocksFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "StakeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "TxToL1",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondingManagerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_newDelegate",
          "type": "address"
        }
      ],
      "name": "claimStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimStakeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedDelegatedStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegatorPoolImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegatorPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatedStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateDelegatorParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "finalizeMigrateDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMigrator.MigrateSenderParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "finalizeMigrateSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "unbondingLockIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IMigrator.MigrateUnbondingLocksParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "finalizeMigrateUnbondingLocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleSnapshotAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migratedDelegators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migratedSenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "migratedUnbondingLocks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setClaimStakeEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegatorPoolImpl",
          "type": "address"
        }
      ],
      "name": "setDelegatorPoolImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Migrator",
          "type": "address"
        }
      ],
      "name": "setL1Migrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBrokerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x138df33431b8643fa59a0122713fcc5d9d1e1b6ee16b7ac5c11338ef5e2c66a5",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0xD527B4ba179F41789dC00A144c1E1e374687CD5E",
    "transactionIndex": 0,
    "gasUsed": "73335866",
    "logsBloom": "0x
    "blockHash": "0xada1a099f44a1c5f7246134bdcc459702ade3916ae36ea72414569db7c53a38b",
    "transactionHash": "0x138df33431b8643fa59a0122713fcc5d9d1e1b6ee16b7ac5c11338ef5e2c66a5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8645597,
        "transactionHash": "0x138df33431b8643fa59a0122713fcc5d9d1e1b6ee16b7ac5c11338ef5e2c66a5",
        "address": "0xD527B4ba179F41789dC00A144c1E1e374687CD5E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xada1a099f44a1c5f7246134bdcc459702ade3916ae36ea72414569db7c53a38b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8645597,
        "transactionHash": "0x138df33431b8643fa59a0122713fcc5d9d1e1b6ee16b7ac5c11338ef5e2c66a5",
        "address": "0xD527B4ba179F41789dC00A144c1E1e374687CD5E",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xada1a099f44a1c5f7246134bdcc459702ade3916ae36ea72414569db7c53a38b"
      }
    ],
    "blockNumber": 8645597,
    "cumulativeGasUsed": "45965866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x6CAe93Ce3CA5E4Ef329e3A6f3B882A749e89c0ae",
    "0x68B463bcA7d561118636e9f028fF0F2e8398dd6a",
    "0xf623811b08b45792d0223D77d9c922dAE29712eC",
    "0x55cfb784ca12744275d9742B843486225C695e64"
  ],
  "solcInputHash": "3f7f51b7bc6dda218aa0e2e13638ff2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Migrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatorPoolImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketBrokerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merkleSnapshotAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatorPool\",\"type\":\"address\"}],\"name\":\"DelegatorPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateDelegatorFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateSenderFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"MigrateUnbondingLocksFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"StakeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_newDelegate\",\"type\":\"address\"}],\"name\":\"claimStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStakeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDelegatedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatorPoolImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatorPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateDelegatorParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"finalizeMigrateDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"internalType\":\"struct IMigrator.MigrateSenderParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"finalizeMigrateSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondingLockIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IMigrator.MigrateUnbondingLocksParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"finalizeMigrateUnbondingLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleSnapshotAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedDelegators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"migratedUnbondingLocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setClaimStakeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatorPoolImpl\",\"type\":\"address\"}],\"name\":\"setDelegatorPoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Migrator\",\"type\":\"address\"}],\"name\":\"setL1Migrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBrokerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimStake(address,uint256,uint256,bytes32[],address)\":{\"details\":\"Assume that only EOAs are included in the snapshot Regardless of the caller of this function, the EOA from L1 will be able to access its stake on L2\",\"params\":{\"_delegate\":\"Address that is migrating\",\"_fees\":\"Fees of delegator on L1\",\"_newDelegate\":\"Optional address of a new delegate on L2\",\"_proof\":\"Merkle proof of inclusion in Merkle tree state snapshot\",\"_stake\":\"Stake of delegator on L1\"}},\"finalizeMigrateDelegator((address,address,uint256,uint256,uint256,address))\":{\"params\":{\"_params\":\"L1 state relevant for migration\"}},\"finalizeMigrateSender((address,address,uint256,uint256))\":{\"params\":{\"_params\":\"L1 state relevant for migration\"}},\"finalizeMigrateUnbondingLocks((address,address,uint256,uint256[],address))\":{\"params\":{\"_params\":\"L1 state relevant for migration\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setClaimStakeEnabled(bool)\":{\"params\":{\"_enabled\":\"True/false indicating claimStake() enabled/disabled\"}},\"setDelegatorPoolImpl(address)\":{\"params\":{\"_delegatorPoolImpl\":\"DelegatorPool implementation contract\"}},\"setL1Migrator(address)\":{\"params\":{\"_l1Migrator\":\"L1Migrator address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimStake(address,uint256,uint256,bytes32[],address)\":{\"notice\":\"Completes delegator migration using a Merkle proof that a delegator's state was included in a state snapshot represented by a Merkle tree root\"},\"finalizeMigrateDelegator((address,address,uint256,uint256,uint256,address))\":{\"notice\":\"Called by L1Migrator to complete transcoder/delegator state migration\"},\"finalizeMigrateSender((address,address,uint256,uint256))\":{\"notice\":\"Called by L1Migrator to complete sender deposit/reserve migration\"},\"finalizeMigrateUnbondingLocks((address,address,uint256,uint256[],address))\":{\"notice\":\"Called by L1Migrator to complete unbonding locks migration\"},\"setClaimStakeEnabled(bool)\":{\"notice\":\"Enable/disable claimStake()\"},\"setDelegatorPoolImpl(address)\":{\"notice\":\"Sets DelegatorPool implementation contract\"},\"setL1Migrator(address)\":{\"notice\":\"Sets L1Migrator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/gateway/L2Migrator.sol\":\"L2Migrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IArbSys} from \\\"../../arbitrum/IArbSys.sol\\\";\\n\\nabstract contract L2ArbitrumMessenger {\\n    event TxToL1(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _id,\\n        bytes _data\\n    );\\n\\n    function sendTxToL1(\\n        address user,\\n        address to,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        // note: this method doesn't support sending ether to L1 together with a call\\n        uint256 id = IArbSys(address(100)).sendTxToL1(to, data);\\n        emit TxToL1(user, to, id, data);\\n        return id;\\n    }\\n\\n    modifier onlyL1Counterpart(address l1Counterpart) {\\n        require(\\n            msg.sender == applyL1ToL2Alias(l1Counterpart),\\n            \\\"ONLY_COUNTERPART_GATEWAY\\\"\\n        );\\n        _;\\n    }\\n\\n    uint160 internal constant OFFSET =\\n        uint160(0x1111000000000000000000000000000000001111);\\n\\n    // l1 addresses are transformed durng l1->l2 calls\\n    function applyL1ToL2Alias(address l1Address)\\n        internal\\n        pure\\n        returns (address l2Address)\\n    {\\n        l2Address = address(uint160(l1Address) + OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x03edd83d95772f14bba5da9c2726caece1b06b15f0106bd58a929e4cbdcee5a1\",\"license\":\"MIT\"},\"contracts/L2/gateway/L2Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {L2ArbitrumMessenger} from \\\"./L2ArbitrumMessenger.sol\\\";\\nimport {IMigrator} from \\\"../../interfaces/IMigrator.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IBondingManager {\\n    function bondForWithHint(\\n        uint256 _amount,\\n        address _owner,\\n        address _to,\\n        address _oldDelegateNewPosPrev,\\n        address _oldDelegateNewPosNext,\\n        address _newDelegateNewPosPrev,\\n        address _newDelegateNewPosNext\\n    ) external;\\n}\\n\\ninterface ITicketBroker {\\n    function fundDepositAndReserveFor(\\n        address _addr,\\n        uint256 _depositAmount,\\n        uint256 _reserveAmount\\n    ) external;\\n}\\n\\ninterface IMerkleSnapshot {\\n    function verify(\\n        bytes32 _id,\\n        bytes32[] memory _proof,\\n        bytes32 _leaf\\n    ) external view returns (bool);\\n}\\n\\ninterface IDelegatorPool {\\n    function initialize(address _bondingManager) external;\\n\\n    function claim(address _addr, uint256 _stake) external;\\n}\\n\\ncontract L2Migrator is L2ArbitrumMessenger, IMigrator, AccessControl {\\n    address public immutable bondingManagerAddr;\\n    address public immutable ticketBrokerAddr;\\n    address public immutable merkleSnapshotAddr;\\n\\n    address public l1Migrator;\\n    address public delegatorPoolImpl;\\n    bool public claimStakeEnabled;\\n\\n    mapping(address => bool) public migratedDelegators;\\n    mapping(address => address) public delegatorPools;\\n    mapping(address => uint256) public claimedDelegatedStake;\\n    mapping(address => mapping(uint256 => bool)) public migratedUnbondingLocks;\\n    mapping(address => bool) public migratedSenders;\\n\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\n    event MigrateDelegatorFinalized(MigrateDelegatorParams params);\\n\\n    event MigrateUnbondingLocksFinalized(MigrateUnbondingLocksParams params);\\n\\n    event MigrateSenderFinalized(MigrateSenderParams params);\\n\\n    event DelegatorPoolCreated(address indexed l1Addr, address delegatorPool);\\n\\n    event StakeClaimed(\\n        address indexed delegator,\\n        address delegate,\\n        uint256 stake,\\n        uint256 fees\\n    );\\n\\n    constructor(\\n        address _l1Migrator,\\n        address _delegatorPoolImpl,\\n        address _bondingManagerAddr,\\n        address _ticketBrokerAddr,\\n        address _merkleSnapshotAddr\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        l1Migrator = _l1Migrator;\\n        delegatorPoolImpl = _delegatorPoolImpl;\\n        bondingManagerAddr = _bondingManagerAddr;\\n        ticketBrokerAddr = _ticketBrokerAddr;\\n        merkleSnapshotAddr = _merkleSnapshotAddr;\\n    }\\n\\n    /**\\n     * @notice Sets L1Migrator\\n     * @param _l1Migrator L1Migrator address\\n     */\\n    function setL1Migrator(address _l1Migrator)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        l1Migrator = _l1Migrator;\\n    }\\n\\n    /**\\n     * @notice Sets DelegatorPool implementation contract\\n     * @param _delegatorPoolImpl DelegatorPool implementation contract\\n     */\\n    function setDelegatorPoolImpl(address _delegatorPoolImpl)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        delegatorPoolImpl = _delegatorPoolImpl;\\n    }\\n\\n    /**\\n     * @notice Enable/disable claimStake()\\n     * @param _enabled True/false indicating claimStake() enabled/disabled\\n     */\\n    function setClaimStakeEnabled(bool _enabled)\\n        external\\n        onlyRole(GOVERNOR_ROLE)\\n    {\\n        claimStakeEnabled = _enabled;\\n    }\\n\\n    /**\\n     * @notice Called by L1Migrator to complete transcoder/delegator state migration\\n     * @param _params L1 state relevant for migration\\n     */\\n    function finalizeMigrateDelegator(MigrateDelegatorParams memory _params)\\n        external\\n        onlyL1Counterpart(l1Migrator)\\n    {\\n        require(\\n            !migratedDelegators[_params.l1Addr],\\n            \\\"L2Migrator#finalizeMigrateDelegator: ALREADY_MIGRATED\\\"\\n        );\\n\\n        migratedDelegators[_params.l1Addr] = true;\\n\\n        if (_params.l1Addr == _params.delegate) {\\n            // l1Addr is an orchestrator on L1:\\n            // 1. Stake _params.stake on behalf of _params.l2Addr\\n            // 2. Create delegator pool\\n            // 3. Stake _params.delegatedStake on behalf of the delegator pool\\n            bondFor(_params.stake, _params.l2Addr, _params.delegate);\\n\\n            address poolAddr = Clones.clone(delegatorPoolImpl);\\n\\n            delegatorPools[_params.l1Addr] = poolAddr;\\n\\n            bondFor(\\n                _params.delegatedStake - claimedDelegatedStake[_params.l1Addr],\\n                poolAddr,\\n                _params.delegate\\n            );\\n\\n            IDelegatorPool(poolAddr).initialize(bondingManagerAddr);\\n\\n            emit DelegatorPoolCreated(_params.l1Addr, poolAddr);\\n        } else {\\n            // l1Addr is a delegator on L1:\\n            // If a delegator pool exists for _params.delegate claim stake which\\n            // was already migrated by delegate on behalf of _params.l2Addr.\\n            // Otherwise, stake _params.stake on behalf of _params.l2Addr.\\n            address pool = delegatorPools[_params.delegate];\\n\\n            if (pool != address(0)) {\\n                // Claim stake that is held by the delegator pool\\n                IDelegatorPool(pool).claim(_params.l2Addr, _params.stake);\\n            } else {\\n                bondFor(_params.stake, _params.l2Addr, _params.delegate);\\n            }\\n        }\\n\\n        claimedDelegatedStake[_params.delegate] += _params.stake;\\n\\n        // Use .call() since l2Addr could be a contract that needs more gas than\\n        // the stipend provided by .transfer()\\n        // The .call() is safe without a re-entrancy guard because this function cannot be re-entered\\n        // by _params.l2Addr since the function can only be called by the L1Migrator via a cross-chain retryable ticket\\n        if (_params.fees > 0) {\\n            (bool ok, ) = _params.l2Addr.call{value: _params.fees}(\\\"\\\");\\n            require(ok, \\\"L2Migrator#finalizeMigrateDelegator: FAIL_FEE\\\");\\n        }\\n\\n        emit MigrateDelegatorFinalized(_params);\\n    }\\n\\n    /**\\n     * @notice Called by L1Migrator to complete unbonding locks migration\\n     * @param _params L1 state relevant for migration\\n     */\\n    function finalizeMigrateUnbondingLocks(\\n        MigrateUnbondingLocksParams memory _params\\n    ) external onlyL1Counterpart(l1Migrator) {\\n        for (uint256 i = 0; i < _params.unbondingLockIds.length; i++) {\\n            uint256 id = _params.unbondingLockIds[i];\\n            require(\\n                !migratedUnbondingLocks[_params.l1Addr][id],\\n                \\\"L2Migrator#finalizeMigrateUnbondingLocks: ALREADY_MIGRATED\\\"\\n            );\\n            migratedUnbondingLocks[_params.l1Addr][id] = true;\\n        }\\n\\n        bondFor(_params.total, _params.l2Addr, _params.delegate);\\n\\n        emit MigrateUnbondingLocksFinalized(_params);\\n    }\\n\\n    /**\\n     * @notice Called by L1Migrator to complete sender deposit/reserve migration\\n     * @param _params L1 state relevant for migration\\n     */\\n    function finalizeMigrateSender(MigrateSenderParams memory _params)\\n        external\\n        onlyL1Counterpart(l1Migrator)\\n    {\\n        require(\\n            !migratedSenders[_params.l1Addr],\\n            \\\"L2Migrator#finalizeMigrateSender: ALREADY_MIGRATED\\\"\\n        );\\n\\n        migratedSenders[_params.l1Addr] = true;\\n\\n        ITicketBroker(ticketBrokerAddr).fundDepositAndReserveFor(\\n            _params.l2Addr,\\n            _params.deposit,\\n            _params.reserve\\n        );\\n\\n        emit MigrateSenderFinalized(_params);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Completes delegator migration using a Merkle proof that a delegator's state was included in a state\\n     * snapshot represented by a Merkle tree root\\n     * @dev Assume that only EOAs are included in the snapshot\\n     * Regardless of the caller of this function, the EOA from L1 will be able to access its stake on L2\\n     * @param _delegate Address that is migrating\\n     * @param _stake Stake of delegator on L1\\n     * @param _fees Fees of delegator on L1\\n     * @param _proof Merkle proof of inclusion in Merkle tree state snapshot\\n     * @param _newDelegate Optional address of a new delegate on L2\\n     */\\n    function claimStake(\\n        address _delegate,\\n        uint256 _stake,\\n        uint256 _fees,\\n        bytes32[] calldata _proof,\\n        address _newDelegate\\n    ) external {\\n        require(\\n            claimStakeEnabled,\\n            \\\"L2Migrator#claimStake: CLAIM_STAKE_DISABLED\\\"\\n        );\\n\\n        IMerkleSnapshot merkleSnapshot = IMerkleSnapshot(merkleSnapshotAddr);\\n\\n        address delegator = msg.sender;\\n        bytes32 leaf = keccak256(\\n            abi.encodePacked(delegator, _delegate, _stake, _fees)\\n        );\\n\\n        require(\\n            merkleSnapshot.verify(keccak256(\\\"LIP-73\\\"), _proof, leaf),\\n            \\\"L2Migrator#claimStake: INVALID_PROOF\\\"\\n        );\\n\\n        require(\\n            !migratedDelegators[delegator],\\n            \\\"L2Migrator#claimStake: ALREADY_MIGRATED\\\"\\n        );\\n\\n        migratedDelegators[delegator] = true;\\n        claimedDelegatedStake[_delegate] += _stake;\\n\\n        address pool = delegatorPools[_delegate];\\n\\n        address delegate = _delegate;\\n        if (_newDelegate != address(0)) {\\n            delegate = _newDelegate;\\n        }\\n\\n        if (pool != address(0)) {\\n            // Claim stake that is held by the delegator pool\\n            IDelegatorPool(pool).claim(delegator, _stake);\\n        } else {\\n            bondFor(_stake, delegator, delegate);\\n        }\\n\\n        // Only EOAs are included in the snapshot so we do not need to worry about\\n        // the insufficeint gas stipend with transfer()\\n        if (_fees > 0) {\\n            payable(delegator).transfer(_fees);\\n        }\\n\\n        emit StakeClaimed(delegator, delegate, _stake, _fees);\\n    }\\n\\n    function bondFor(\\n        uint256 _amount,\\n        address _owner,\\n        address _to\\n    ) internal {\\n        IBondingManager bondingManager = IBondingManager(bondingManagerAddr);\\n\\n        bondingManager.bondForWithHint(\\n            _amount,\\n            _owner,\\n            _to,\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc1c2a498ee79a5ed8c64a1e66b13c609bf1c16b3aee9643b21e514f3c8e945e1\",\"license\":\"MIT\"},\"contracts/arbitrum/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint256);\\n\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n}\\n\",\"keccak256\":\"0x3d6319dff311534eee9cd66e2a577a3fa1ab34f9c7c5996bc4a3ecdd9101ebfb\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMigrator {\\n    struct MigrateDelegatorParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Stake of l1Addr on L1\\n        uint256 stake;\\n        // Delegated stake of l1Addr on L1\\n        uint256 delegatedStake;\\n        // Fees of l1Addr on L1\\n        uint256 fees;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateUnbondingLocksParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Total tokens in unbonding locks\\n        uint256 total;\\n        // IDs of unbonding locks being migrated\\n        uint256[] unbondingLockIds;\\n        // Delegate of l1Addr on L1\\n        address delegate;\\n    }\\n\\n    struct MigrateSenderParams {\\n        // Address that is migrating from L1\\n        address l1Addr;\\n        // Address to use on L2\\n        // If null, l1Addr is used on L2\\n        address l2Addr;\\n        // Deposit of l1Addr on L1\\n        uint256 deposit;\\n        // Reserve of l1Addr on L1\\n        uint256 reserve;\\n    }\\n}\\n\",\"keccak256\":\"0x4da4a2547b74ca1e20db78d23538c54227bd3746af5d89cd5b81bb23e7c681a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003da438038062003da48339818101604052810190620000379190620003d4565b6200005b6000801b6200004f620001c260201b60201c565b620001ca60201b60201c565b620000907f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556000801b620001e060201b60201c565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050505050620004a4565b600033905090565b620001dc82826200024360201b60201c565b5050565b6000620001f3836200033460201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6200025582826200035360201b60201c565b6200033057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002d5620001c260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000838152602001908152602001600020600101549050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081519050620003ce816200048a565b92915050565b600080600080600060a08688031215620003ed57600080fd5b6000620003fd88828901620003bd565b95505060206200041088828901620003bd565b94505060406200042388828901620003bd565b93505060606200043688828901620003bd565b92505060806200044988828901620003bd565b9150509295509295909350565b600062000463826200046a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004958162000456565b8114620004a157600080fd5b50565b60805160601c60a05160601c60c05160601c6138ab620004f960003960008181610ed701526113740152600081816113e7015261168b0152600081816109ee01528181611ac90152611b8201526138ab6000f3fe6080604052600436106101855760003560e01c806391d14854116100d1578063b76087361161008a578063d0b1cba211610064578063d0b1cba2146105af578063d2f40c5a146105da578063d547741f14610617578063e89320e5146106405761018c565b8063b760873614610532578063cc14c9881461055b578063ccc57490146105845761018c565b806391d1485414610422578063923f475c1461045f57806396f995a214610488578063a0965da5146104b3578063a217fddf146104de578063b3f5ccae146105095761018c565b80633aceba5d1161013e5780635cf207f8116101185780635cf207f81461035257806389bec3441461037d5780638a716fbb146103ba5780638f2c17ed146103f75761018c565b80633aceba5d146102af5780633f1c49cc146102ec5780635118d8cf146103155761018c565b806301ffc9a7146101915780631a0725d8146101ce57806324583d97146101f7578063248a9ca3146102205780632f2ff15d1461025d57806336568abe146102865761018c565b3661018c57005b600080fd5b34801561019d57600080fd5b506101b860048036038101906101b39190612713565b61066b565b6040516101c59190612dd7565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f0919061273c565b6106e5565b005b34801561020357600080fd5b5061021e60048036038101906102199190612565565b610d3f565b005b34801561022c57600080fd5b50610247600480360381019061024291906126ae565b610d99565b6040516102549190612df2565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f91906126d7565b610db8565b005b34801561029257600080fd5b506102ad60048036038101906102a891906126d7565b610de1565b005b3480156102bb57600080fd5b506102d660048036038101906102d19190612565565b610e64565b6040516102e39190612dd7565b60405180910390f35b3480156102f857600080fd5b50610313600480360381019061030e91906125ca565b610e84565b005b34801561032157600080fd5b5061033c60048036038101906103379190612565565b61135a565b6040516103499190613027565b60405180910390f35b34801561035e57600080fd5b50610367611372565b6040516103749190612d5c565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f919061258e565b611396565b6040516103b19190612dd7565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190612565565b6113c5565b6040516103ee9190612dd7565b60405180910390f35b34801561040357600080fd5b5061040c6113e5565b6040516104199190612d5c565b60405180910390f35b34801561042e57600080fd5b50610449600480360381019061044491906126d7565b611409565b6040516104569190612dd7565b60405180910390f35b34801561046b57600080fd5b506104866004803603810190610481919061265c565b611473565b005b34801561049457600080fd5b5061049d6114c3565b6040516104aa9190612dd7565b60405180910390f35b3480156104bf57600080fd5b506104c86114d6565b6040516104d59190612d5c565b60405180910390f35b3480156104ea57600080fd5b506104f36114fc565b6040516105009190612df2565b60405180910390f35b34801561051557600080fd5b50610530600480360381019061052b9190612765565b611503565b005b34801561053e57600080fd5b5061055960048036038101906105549190612565565b61175f565b005b34801561056757600080fd5b50610582600480360381019061057d919061278e565b6117b9565b005b34801561059057600080fd5b50610599611a21565b6040516105a69190612df2565b60405180910390f35b3480156105bb57600080fd5b506105c4611a45565b6040516105d19190612d5c565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190612565565b611a6b565b60405161060e9190612d5c565b60405180910390f35b34801561062357600080fd5b5061063e600480360381019061063991906126d7565b611a9e565b005b34801561064c57600080fd5b50610655611ac7565b6040516106629190612d5c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106de57506106dd82611aeb565b5b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661071181611b55565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590612f8f565b60405180910390fd5b60036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690612f0f565b60405180910390fd5b600160036000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160a0015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415610ab3576108be826040015183602001518460a00151611b7e565b60006108eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c22565b90508060046000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109d060056000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484606001516109c59190613278565b828560a00151611b7e565b8073ffffffffffffffffffffffffffffffffffffffff1663c4d66de87f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a299190612d5c565b600060405180830381600087803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b50505050826000015173ffffffffffffffffffffffffffffffffffffffff167ff8a0d4273560c59d7022f3feaae470fc5b68c55cff078a6ab7e618203b53041882604051610aa59190612d5c565b60405180910390a250610be3565b6000600460008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bc9578073ffffffffffffffffffffffffffffffffffffffff1663aad3ec96846020015185604001516040518363ffffffff1660e01b8152600401610b92929190612d77565b600060405180830381600087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b50505050610be1565b610be0836040015184602001518560a00151611b7e565b5b505b8160400151600560008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3a91906131c8565b92505081905550600082608001511115610d04576000826020015173ffffffffffffffffffffffffffffffffffffffff168360800151604051610c7c90612d0d565b60006040518083038185875af1925050503d8060008114610cb9576040519150601f19603f3d011682016040523d82523d6000602084013e610cbe565b606091505b5050905080610d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf990612eef565b60405180910390fd5b505b7fab2cb96eeb8726c709227935b01f6a5c6f7e9b518ab69eda0670c7ceda752d1a82604051610d339190612fcf565b60405180910390a15050565b6000801b610d5481610d4f611cf7565b611cff565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000838152602001908152602001600020600101549050919050565b610dc182610d99565b610dd281610dcd611cf7565b611cff565b610ddc8383611d9c565b505050565b610de9611cf7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90612faf565b60405180910390fd5b610e608282611e7c565b5050565b60076020528060005260406000206000915054906101000a900460ff1681565b600260149054906101000a900460ff16610ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eca90612eaf565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000339050600081898989604051602001610f169493929190612cbf565b6040516020818303038152906040528051906020012090508273ffffffffffffffffffffffffffffffffffffffff16630a02831c7facef05f736f89c16facc0f940c13f4c3a386cf48a9b54b50f59defd8b301c40a8888856040518563ffffffff1660e01b8152600401610f8d9493929190612e0d565b60206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190612685565b61101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390612f2f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a090612f6f565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555087600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461115091906131c8565b925050819055506000600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008a9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146111f8578590505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461129e578173ffffffffffffffffffffffffffffffffffffffff1663aad3ec96858c6040518363ffffffff1660e01b8152600401611267929190612d77565b600060405180830381600087803b15801561128157600080fd5b505af1158015611295573d6000803e3d6000fd5b505050506112aa565b6112a98a8583611b7e565b5b60008911156112fb578373ffffffffffffffffffffffffffffffffffffffff166108fc8a9081150290604051600060405180830381858888f193505050501580156112f9573d6000803e3d6000fd5b505b8373ffffffffffffffffffffffffffffffffffffffff167fc08c27d872ca12215b2df3f441676fe2c084a204a487086d7436a4ac433d417a828c8c60405161134593929190612da0565b60405180910390a25050505050505050505050565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556114a5816114a0611cf7565b611cff565b81600260146101000a81548160ff0219169083151502179055505050565b600260149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661152f81611b55565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461159c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159390612f8f565b60405180910390fd5b60076000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162490612e8f565b60405180910390fd5b600160076000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663989f789c8360200151846040015185606001516040518463ffffffff1660e01b81526004016116f293929190612da0565b600060405180830381600087803b15801561170c57600080fd5b505af1158015611720573d6000803e3d6000fd5b505050507f71adb0cec7763a4cfefd893fc873369117ed172979f7b8f7b683f6a5787c52c0826040516117539190612fea565b60405180910390a15050565b6000801b6117748161176f611cf7565b611cff565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166117e581611b55565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184990612f8f565b60405180910390fd5b60005b8260600151518110156119ce576000836060015182815181106118a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060066000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff161561194d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194490612f4f565b60405180910390fd5b600160066000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505080806119c6906133c7565b915050611855565b506119e6826040015183602001518460800151611b7e565b7f9e36876ab9fc404649651fb29b8aebacf24393e00799e53abef98a59c5a0039482604051611a159190613005565b60405180910390a15050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa782610d99565b611ab881611ab3611cf7565b611cff565b611ac28383611e7c565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073111100000000000000000000000000000000111182611b77919061317e565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663ee4e804a8585856000806000806040518863ffffffff1660e01b8152600401611bea9796959493929190613042565b600060405180830381600087803b158015611c0457600080fd5b505af1158015611c18573d6000803e3d6000fd5b5050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce990612ecf565b60405180910390fd5b919050565b600033905090565b611d098282611409565b611d9857611d2e8173ffffffffffffffffffffffffffffffffffffffff166014611f5d565b611d3c8360001c6020611f5d565b604051602001611d4d929190612d22565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f9190612e4d565b60405180910390fd5b5050565b611da68282611409565b611e7857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611e1d611cf7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611e868282611409565b15611f5957600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611efe611cf7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b606060006002836002611f70919061321e565b611f7a91906131c8565b67ffffffffffffffff811115611fb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611feb5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612049577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612113919061321e565b61211d91906131c8565b90505b6001811115612209577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612185577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106121c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806122029061336c565b9050612120565b506000841461224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490612e6f565b60405180910390fd5b8091505092915050565b600061226a612265846130d6565b6130b1565b9050808382526020820190508285602086028201111561228957600080fd5b60005b858110156122b9578161229f8882612550565b84526020840193506020830192505060018101905061228c565b5050509392505050565b6000813590506122d281613802565b92915050565b60008083601f8401126122ea57600080fd5b8235905067ffffffffffffffff81111561230357600080fd5b60208301915083602082028301111561231b57600080fd5b9250929050565b600082601f83011261233357600080fd5b8135612343848260208601612257565b91505092915050565b60008135905061235b81613819565b92915050565b60008151905061237081613819565b92915050565b60008135905061238581613830565b92915050565b60008135905061239a81613847565b92915050565b600060c082840312156123b257600080fd5b6123bc60c06130b1565b905060006123cc848285016122c3565b60008301525060206123e0848285016122c3565b60208301525060406123f484828501612550565b604083015250606061240884828501612550565b606083015250608061241c84828501612550565b60808301525060a0612430848285016122c3565b60a08301525092915050565b60006080828403121561244e57600080fd5b61245860806130b1565b90506000612468848285016122c3565b600083015250602061247c848285016122c3565b602083015250604061249084828501612550565b60408301525060606124a484828501612550565b60608301525092915050565b600060a082840312156124c257600080fd5b6124cc60a06130b1565b905060006124dc848285016122c3565b60008301525060206124f0848285016122c3565b602083015250604061250484828501612550565b604083015250606082013567ffffffffffffffff81111561252457600080fd5b61253084828501612322565b6060830152506080612544848285016122c3565b60808301525092915050565b60008135905061255f8161385e565b92915050565b60006020828403121561257757600080fd5b6000612585848285016122c3565b91505092915050565b600080604083850312156125a157600080fd5b60006125af858286016122c3565b92505060206125c085828601612550565b9150509250929050565b60008060008060008060a087890312156125e357600080fd5b60006125f189828a016122c3565b965050602061260289828a01612550565b955050604061261389828a01612550565b945050606087013567ffffffffffffffff81111561263057600080fd5b61263c89828a016122d8565b9350935050608061264f89828a016122c3565b9150509295509295509295565b60006020828403121561266e57600080fd5b600061267c8482850161234c565b91505092915050565b60006020828403121561269757600080fd5b60006126a584828501612361565b91505092915050565b6000602082840312156126c057600080fd5b60006126ce84828501612376565b91505092915050565b600080604083850312156126ea57600080fd5b60006126f885828601612376565b9250506020612709858286016122c3565b9150509250929050565b60006020828403121561272557600080fd5b60006127338482850161238b565b91505092915050565b600060c0828403121561274e57600080fd5b600061275c848285016123a0565b91505092915050565b60006080828403121561277757600080fd5b60006127858482850161243c565b91505092915050565b6000602082840312156127a057600080fd5b600082013567ffffffffffffffff8111156127ba57600080fd5b6127c6848285016124b0565b91505092915050565b60006127db8383612c8a565b60208301905092915050565b6127f0816132ac565b82525050565b6127ff816132ac565b82525050565b612816612811826132ac565b613410565b82525050565b60006128288385613135565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561285757600080fd5b60208302925061286883858461332a565b82840190509392505050565b600061287f82613112565b6128898185613146565b935061289483613102565b8060005b838110156128c55781516128ac88826127cf565b97506128b783613128565b925050600181019050612898565b5085935050505092915050565b6128db816132be565b82525050565b6128ea816132ca565b82525050565b60006128fb8261311d565b6129058185613162565b9350612915818560208601613339565b61291e8161349c565b840191505092915050565b60006129348261311d565b61293e8185613173565b935061294e818560208601613339565b80840191505092915050565b6000612967602083613162565b9150612972826134ba565b602082019050919050565b600061298a603283613162565b9150612995826134e3565b604082019050919050565b60006129ad602b83613162565b91506129b882613532565b604082019050919050565b60006129d0601683613162565b91506129db82613581565b602082019050919050565b60006129f3602d83613162565b91506129fe826135aa565b604082019050919050565b6000612a16603583613162565b9150612a21826135f9565b604082019050919050565b6000612a39602483613162565b9150612a4482613648565b604082019050919050565b6000612a5c600083613157565b9150612a6782613697565b600082019050919050565b6000612a7f603a83613162565b9150612a8a8261369a565b604082019050919050565b6000612aa2601783613173565b9150612aad826136e9565b601782019050919050565b6000612ac5602783613162565b9150612ad082613712565b604082019050919050565b6000612ae8601883613162565b9150612af382613761565b602082019050919050565b6000612b0b601183613173565b9150612b168261378a565b601182019050919050565b6000612b2e602f83613162565b9150612b39826137b3565b604082019050919050565b60c082016000820151612b5a60008501826127e7565b506020820151612b6d60208501826127e7565b506040820151612b806040850182612c8a565b506060820151612b936060850182612c8a565b506080820151612ba66080850182612c8a565b5060a0820151612bb960a08501826127e7565b50505050565b608082016000820151612bd560008501826127e7565b506020820151612be860208501826127e7565b506040820151612bfb6040850182612c8a565b506060820151612c0e6060850182612c8a565b50505050565b600060a083016000830151612c2c60008601826127e7565b506020830151612c3f60208601826127e7565b506040830151612c526040860182612c8a565b5060608301518482036060860152612c6a8282612874565b9150506080830151612c7f60808601826127e7565b508091505092915050565b612c9381613320565b82525050565b612ca281613320565b82525050565b612cb9612cb482613320565b613434565b82525050565b6000612ccb8287612805565b601482019150612cdb8286612805565b601482019150612ceb8285612ca8565b602082019150612cfb8284612ca8565b60208201915081905095945050505050565b6000612d1882612a4f565b9150819050919050565b6000612d2d82612a95565b9150612d398285612929565b9150612d4482612afe565b9150612d508284612929565b91508190509392505050565b6000602082019050612d7160008301846127f6565b92915050565b6000604082019050612d8c60008301856127f6565b612d996020830184612c99565b9392505050565b6000606082019050612db560008301866127f6565b612dc26020830185612c99565b612dcf6040830184612c99565b949350505050565b6000602082019050612dec60008301846128d2565b92915050565b6000602082019050612e0760008301846128e1565b92915050565b6000606082019050612e2260008301876128e1565b8181036020830152612e3581858761281c565b9050612e4460408301846128e1565b95945050505050565b60006020820190508181036000830152612e6781846128f0565b905092915050565b60006020820190508181036000830152612e888161295a565b9050919050565b60006020820190508181036000830152612ea88161297d565b9050919050565b60006020820190508181036000830152612ec8816129a0565b9050919050565b60006020820190508181036000830152612ee8816129c3565b9050919050565b60006020820190508181036000830152612f08816129e6565b9050919050565b60006020820190508181036000830152612f2881612a09565b9050919050565b60006020820190508181036000830152612f4881612a2c565b9050919050565b60006020820190508181036000830152612f6881612a72565b9050919050565b60006020820190508181036000830152612f8881612ab8565b9050919050565b60006020820190508181036000830152612fa881612adb565b9050919050565b60006020820190508181036000830152612fc881612b21565b9050919050565b600060c082019050612fe46000830184612b44565b92915050565b6000608082019050612fff6000830184612bbf565b92915050565b6000602082019050818103600083015261301f8184612c14565b905092915050565b600060208201905061303c6000830184612c99565b92915050565b600060e082019050613057600083018a612c99565b61306460208301896127f6565b61307160408301886127f6565b61307e60608301876127f6565b61308b60808301866127f6565b61309860a08301856127f6565b6130a560c08301846127f6565b98975050505050505050565b60006130bb6130cc565b90506130c78282613396565b919050565b6000604051905090565b600067ffffffffffffffff8211156130f1576130f061346d565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061318982613300565b915061319483613300565b92508273ffffffffffffffffffffffffffffffffffffffff038211156131bd576131bc61343e565b5b828201905092915050565b60006131d382613320565b91506131de83613320565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132135761321261343e565b5b828201905092915050565b600061322982613320565b915061323483613320565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561326d5761326c61343e565b5b828202905092915050565b600061328382613320565b915061328e83613320565b9250828210156132a1576132a061343e565b5b828203905092915050565b60006132b782613300565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561335757808201518184015260208101905061333c565b83811115613366576000848401525b50505050565b600061337782613320565b9150600082141561338b5761338a61343e565b5b600182039050919050565b61339f8261349c565b810181811067ffffffffffffffff821117156133be576133bd61346d565b5b80604052505050565b60006133d282613320565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134055761340461343e565b5b600182019050919050565b600061341b82613422565b9050919050565b600061342d826134ad565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4c324d69677261746f722366696e616c697a654d69677261746553656e64657260008201527f3a20414c52454144595f4d494752415445440000000000000000000000000000602082015250565b7f4c324d69677261746f7223636c61696d5374616b653a20434c41494d5f53544160008201527f4b455f44495341424c4544000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4c324d69677261746f722366696e616c697a654d69677261746544656c65676160008201527f746f723a204641494c5f46454500000000000000000000000000000000000000602082015250565b7f4c324d69677261746f722366696e616c697a654d69677261746544656c65676160008201527f746f723a20414c52454144595f4d494752415445440000000000000000000000602082015250565b7f4c324d69677261746f7223636c61696d5374616b653a20494e56414c49445f5060008201527f524f4f4600000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4c324d69677261746f722366696e616c697a654d696772617465556e626f6e6460008201527f696e674c6f636b733a20414c52454144595f4d49475241544544000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4c324d69677261746f7223636c61696d5374616b653a20414c52454144595f4d60008201527f4947524154454400000000000000000000000000000000000000000000000000602082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61380b816132ac565b811461381657600080fd5b50565b613822816132be565b811461382d57600080fd5b50565b613839816132ca565b811461384457600080fd5b50565b613850816132d4565b811461385b57600080fd5b50565b61386781613320565b811461387257600080fd5b5056fea2646970667358221220e60f333821e0f357f438411f26d9ef9f50a8ebba3bb9f7ec668b80dda09a5c4564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101855760003560e01c806391d14854116100d1578063b76087361161008a578063d0b1cba211610064578063d0b1cba2146105af578063d2f40c5a146105da578063d547741f14610617578063e89320e5146106405761018c565b8063b760873614610532578063cc14c9881461055b578063ccc57490146105845761018c565b806391d1485414610422578063923f475c1461045f57806396f995a214610488578063a0965da5146104b3578063a217fddf146104de578063b3f5ccae146105095761018c565b80633aceba5d1161013e5780635cf207f8116101185780635cf207f81461035257806389bec3441461037d5780638a716fbb146103ba5780638f2c17ed146103f75761018c565b80633aceba5d146102af5780633f1c49cc146102ec5780635118d8cf146103155761018c565b806301ffc9a7146101915780631a0725d8146101ce57806324583d97146101f7578063248a9ca3146102205780632f2ff15d1461025d57806336568abe146102865761018c565b3661018c57005b600080fd5b34801561019d57600080fd5b506101b860048036038101906101b39190612713565b61066b565b6040516101c59190612dd7565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f0919061273c565b6106e5565b005b34801561020357600080fd5b5061021e60048036038101906102199190612565565b610d3f565b005b34801561022c57600080fd5b50610247600480360381019061024291906126ae565b610d99565b6040516102549190612df2565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f91906126d7565b610db8565b005b34801561029257600080fd5b506102ad60048036038101906102a891906126d7565b610de1565b005b3480156102bb57600080fd5b506102d660048036038101906102d19190612565565b610e64565b6040516102e39190612dd7565b60405180910390f35b3480156102f857600080fd5b50610313600480360381019061030e91906125ca565b610e84565b005b34801561032157600080fd5b5061033c60048036038101906103379190612565565b61135a565b6040516103499190613027565b60405180910390f35b34801561035e57600080fd5b50610367611372565b6040516103749190612d5c565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f919061258e565b611396565b6040516103b19190612dd7565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190612565565b6113c5565b6040516103ee9190612dd7565b60405180910390f35b34801561040357600080fd5b5061040c6113e5565b6040516104199190612d5c565b60405180910390f35b34801561042e57600080fd5b50610449600480360381019061044491906126d7565b611409565b6040516104569190612dd7565b60405180910390f35b34801561046b57600080fd5b506104866004803603810190610481919061265c565b611473565b005b34801561049457600080fd5b5061049d6114c3565b6040516104aa9190612dd7565b60405180910390f35b3480156104bf57600080fd5b506104c86114d6565b6040516104d59190612d5c565b60405180910390f35b3480156104ea57600080fd5b506104f36114fc565b6040516105009190612df2565b60405180910390f35b34801561051557600080fd5b50610530600480360381019061052b9190612765565b611503565b005b34801561053e57600080fd5b5061055960048036038101906105549190612565565b61175f565b005b34801561056757600080fd5b50610582600480360381019061057d919061278e565b6117b9565b005b34801561059057600080fd5b50610599611a21565b6040516105a69190612df2565b60405180910390f35b3480156105bb57600080fd5b506105c4611a45565b6040516105d19190612d5c565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190612565565b611a6b565b60405161060e9190612d5c565b60405180910390f35b34801561062357600080fd5b5061063e600480360381019061063991906126d7565b611a9e565b005b34801561064c57600080fd5b50610655611ac7565b6040516106629190612d5c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106de57506106dd82611aeb565b5b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661071181611b55565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590612f8f565b60405180910390fd5b60036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690612f0f565b60405180910390fd5b600160036000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160a0015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415610ab3576108be826040015183602001518460a00151611b7e565b60006108eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c22565b90508060046000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109d060056000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484606001516109c59190613278565b828560a00151611b7e565b8073ffffffffffffffffffffffffffffffffffffffff1663c4d66de87f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a299190612d5c565b600060405180830381600087803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b50505050826000015173ffffffffffffffffffffffffffffffffffffffff167ff8a0d4273560c59d7022f3feaae470fc5b68c55cff078a6ab7e618203b53041882604051610aa59190612d5c565b60405180910390a250610be3565b6000600460008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bc9578073ffffffffffffffffffffffffffffffffffffffff1663aad3ec96846020015185604001516040518363ffffffff1660e01b8152600401610b92929190612d77565b600060405180830381600087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b50505050610be1565b610be0836040015184602001518560a00151611b7e565b5b505b8160400151600560008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3a91906131c8565b92505081905550600082608001511115610d04576000826020015173ffffffffffffffffffffffffffffffffffffffff168360800151604051610c7c90612d0d565b60006040518083038185875af1925050503d8060008114610cb9576040519150601f19603f3d011682016040523d82523d6000602084013e610cbe565b606091505b5050905080610d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf990612eef565b60405180910390fd5b505b7fab2cb96eeb8726c709227935b01f6a5c6f7e9b518ab69eda0670c7ceda752d1a82604051610d339190612fcf565b60405180910390a15050565b6000801b610d5481610d4f611cf7565b611cff565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000838152602001908152602001600020600101549050919050565b610dc182610d99565b610dd281610dcd611cf7565b611cff565b610ddc8383611d9c565b505050565b610de9611cf7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90612faf565b60405180910390fd5b610e608282611e7c565b5050565b60076020528060005260406000206000915054906101000a900460ff1681565b600260149054906101000a900460ff16610ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eca90612eaf565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000339050600081898989604051602001610f169493929190612cbf565b6040516020818303038152906040528051906020012090508273ffffffffffffffffffffffffffffffffffffffff16630a02831c7facef05f736f89c16facc0f940c13f4c3a386cf48a9b54b50f59defd8b301c40a8888856040518563ffffffff1660e01b8152600401610f8d9493929190612e0d565b60206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190612685565b61101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390612f2f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a090612f6f565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555087600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461115091906131c8565b925050819055506000600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008a9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146111f8578590505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461129e578173ffffffffffffffffffffffffffffffffffffffff1663aad3ec96858c6040518363ffffffff1660e01b8152600401611267929190612d77565b600060405180830381600087803b15801561128157600080fd5b505af1158015611295573d6000803e3d6000fd5b505050506112aa565b6112a98a8583611b7e565b5b60008911156112fb578373ffffffffffffffffffffffffffffffffffffffff166108fc8a9081150290604051600060405180830381858888f193505050501580156112f9573d6000803e3d6000fd5b505b8373ffffffffffffffffffffffffffffffffffffffff167fc08c27d872ca12215b2df3f441676fe2c084a204a487086d7436a4ac433d417a828c8c60405161134593929190612da0565b60405180910390a25050505050505050505050565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556114a5816114a0611cf7565b611cff565b81600260146101000a81548160ff0219169083151502179055505050565b600260149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661152f81611b55565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461159c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159390612f8f565b60405180910390fd5b60076000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162490612e8f565b60405180910390fd5b600160076000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663989f789c8360200151846040015185606001516040518463ffffffff1660e01b81526004016116f293929190612da0565b600060405180830381600087803b15801561170c57600080fd5b505af1158015611720573d6000803e3d6000fd5b505050507f71adb0cec7763a4cfefd893fc873369117ed172979f7b8f7b683f6a5787c52c0826040516117539190612fea565b60405180910390a15050565b6000801b6117748161176f611cf7565b611cff565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166117e581611b55565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184990612f8f565b60405180910390fd5b60005b8260600151518110156119ce576000836060015182815181106118a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060066000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff161561194d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194490612f4f565b60405180910390fd5b600160066000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505080806119c6906133c7565b915050611855565b506119e6826040015183602001518460800151611b7e565b7f9e36876ab9fc404649651fb29b8aebacf24393e00799e53abef98a59c5a0039482604051611a159190613005565b60405180910390a15050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa782610d99565b611ab881611ab3611cf7565b611cff565b611ac28383611e7c565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073111100000000000000000000000000000000111182611b77919061317e565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663ee4e804a8585856000806000806040518863ffffffff1660e01b8152600401611bea9796959493929190613042565b600060405180830381600087803b158015611c0457600080fd5b505af1158015611c18573d6000803e3d6000fd5b5050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce990612ecf565b60405180910390fd5b919050565b600033905090565b611d098282611409565b611d9857611d2e8173ffffffffffffffffffffffffffffffffffffffff166014611f5d565b611d3c8360001c6020611f5d565b604051602001611d4d929190612d22565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f9190612e4d565b60405180910390fd5b5050565b611da68282611409565b611e7857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611e1d611cf7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611e868282611409565b15611f5957600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611efe611cf7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b606060006002836002611f70919061321e565b611f7a91906131c8565b67ffffffffffffffff811115611fb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611feb5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612049577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612113919061321e565b61211d91906131c8565b90505b6001811115612209577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612185577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106121c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806122029061336c565b9050612120565b506000841461224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490612e6f565b60405180910390fd5b8091505092915050565b600061226a612265846130d6565b6130b1565b9050808382526020820190508285602086028201111561228957600080fd5b60005b858110156122b9578161229f8882612550565b84526020840193506020830192505060018101905061228c565b5050509392505050565b6000813590506122d281613802565b92915050565b60008083601f8401126122ea57600080fd5b8235905067ffffffffffffffff81111561230357600080fd5b60208301915083602082028301111561231b57600080fd5b9250929050565b600082601f83011261233357600080fd5b8135612343848260208601612257565b91505092915050565b60008135905061235b81613819565b92915050565b60008151905061237081613819565b92915050565b60008135905061238581613830565b92915050565b60008135905061239a81613847565b92915050565b600060c082840312156123b257600080fd5b6123bc60c06130b1565b905060006123cc848285016122c3565b60008301525060206123e0848285016122c3565b60208301525060406123f484828501612550565b604083015250606061240884828501612550565b606083015250608061241c84828501612550565b60808301525060a0612430848285016122c3565b60a08301525092915050565b60006080828403121561244e57600080fd5b61245860806130b1565b90506000612468848285016122c3565b600083015250602061247c848285016122c3565b602083015250604061249084828501612550565b60408301525060606124a484828501612550565b60608301525092915050565b600060a082840312156124c257600080fd5b6124cc60a06130b1565b905060006124dc848285016122c3565b60008301525060206124f0848285016122c3565b602083015250604061250484828501612550565b604083015250606082013567ffffffffffffffff81111561252457600080fd5b61253084828501612322565b6060830152506080612544848285016122c3565b60808301525092915050565b60008135905061255f8161385e565b92915050565b60006020828403121561257757600080fd5b6000612585848285016122c3565b91505092915050565b600080604083850312156125a157600080fd5b60006125af858286016122c3565b92505060206125c085828601612550565b9150509250929050565b60008060008060008060a087890312156125e357600080fd5b60006125f189828a016122c3565b965050602061260289828a01612550565b955050604061261389828a01612550565b945050606087013567ffffffffffffffff81111561263057600080fd5b61263c89828a016122d8565b9350935050608061264f89828a016122c3565b9150509295509295509295565b60006020828403121561266e57600080fd5b600061267c8482850161234c565b91505092915050565b60006020828403121561269757600080fd5b60006126a584828501612361565b91505092915050565b6000602082840312156126c057600080fd5b60006126ce84828501612376565b91505092915050565b600080604083850312156126ea57600080fd5b60006126f885828601612376565b9250506020612709858286016122c3565b9150509250929050565b60006020828403121561272557600080fd5b60006127338482850161238b565b91505092915050565b600060c0828403121561274e57600080fd5b600061275c848285016123a0565b91505092915050565b60006080828403121561277757600080fd5b60006127858482850161243c565b91505092915050565b6000602082840312156127a057600080fd5b600082013567ffffffffffffffff8111156127ba57600080fd5b6127c6848285016124b0565b91505092915050565b60006127db8383612c8a565b60208301905092915050565b6127f0816132ac565b82525050565b6127ff816132ac565b82525050565b612816612811826132ac565b613410565b82525050565b60006128288385613135565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561285757600080fd5b60208302925061286883858461332a565b82840190509392505050565b600061287f82613112565b6128898185613146565b935061289483613102565b8060005b838110156128c55781516128ac88826127cf565b97506128b783613128565b925050600181019050612898565b5085935050505092915050565b6128db816132be565b82525050565b6128ea816132ca565b82525050565b60006128fb8261311d565b6129058185613162565b9350612915818560208601613339565b61291e8161349c565b840191505092915050565b60006129348261311d565b61293e8185613173565b935061294e818560208601613339565b80840191505092915050565b6000612967602083613162565b9150612972826134ba565b602082019050919050565b600061298a603283613162565b9150612995826134e3565b604082019050919050565b60006129ad602b83613162565b91506129b882613532565b604082019050919050565b60006129d0601683613162565b91506129db82613581565b602082019050919050565b60006129f3602d83613162565b91506129fe826135aa565b604082019050919050565b6000612a16603583613162565b9150612a21826135f9565b604082019050919050565b6000612a39602483613162565b9150612a4482613648565b604082019050919050565b6000612a5c600083613157565b9150612a6782613697565b600082019050919050565b6000612a7f603a83613162565b9150612a8a8261369a565b604082019050919050565b6000612aa2601783613173565b9150612aad826136e9565b601782019050919050565b6000612ac5602783613162565b9150612ad082613712565b604082019050919050565b6000612ae8601883613162565b9150612af382613761565b602082019050919050565b6000612b0b601183613173565b9150612b168261378a565b601182019050919050565b6000612b2e602f83613162565b9150612b39826137b3565b604082019050919050565b60c082016000820151612b5a60008501826127e7565b506020820151612b6d60208501826127e7565b506040820151612b806040850182612c8a565b506060820151612b936060850182612c8a565b506080820151612ba66080850182612c8a565b5060a0820151612bb960a08501826127e7565b50505050565b608082016000820151612bd560008501826127e7565b506020820151612be860208501826127e7565b506040820151612bfb6040850182612c8a565b506060820151612c0e6060850182612c8a565b50505050565b600060a083016000830151612c2c60008601826127e7565b506020830151612c3f60208601826127e7565b506040830151612c526040860182612c8a565b5060608301518482036060860152612c6a8282612874565b9150506080830151612c7f60808601826127e7565b508091505092915050565b612c9381613320565b82525050565b612ca281613320565b82525050565b612cb9612cb482613320565b613434565b82525050565b6000612ccb8287612805565b601482019150612cdb8286612805565b601482019150612ceb8285612ca8565b602082019150612cfb8284612ca8565b60208201915081905095945050505050565b6000612d1882612a4f565b9150819050919050565b6000612d2d82612a95565b9150612d398285612929565b9150612d4482612afe565b9150612d508284612929565b91508190509392505050565b6000602082019050612d7160008301846127f6565b92915050565b6000604082019050612d8c60008301856127f6565b612d996020830184612c99565b9392505050565b6000606082019050612db560008301866127f6565b612dc26020830185612c99565b612dcf6040830184612c99565b949350505050565b6000602082019050612dec60008301846128d2565b92915050565b6000602082019050612e0760008301846128e1565b92915050565b6000606082019050612e2260008301876128e1565b8181036020830152612e3581858761281c565b9050612e4460408301846128e1565b95945050505050565b60006020820190508181036000830152612e6781846128f0565b905092915050565b60006020820190508181036000830152612e888161295a565b9050919050565b60006020820190508181036000830152612ea88161297d565b9050919050565b60006020820190508181036000830152612ec8816129a0565b9050919050565b60006020820190508181036000830152612ee8816129c3565b9050919050565b60006020820190508181036000830152612f08816129e6565b9050919050565b60006020820190508181036000830152612f2881612a09565b9050919050565b60006020820190508181036000830152612f4881612a2c565b9050919050565b60006020820190508181036000830152612f6881612a72565b9050919050565b60006020820190508181036000830152612f8881612ab8565b9050919050565b60006020820190508181036000830152612fa881612adb565b9050919050565b60006020820190508181036000830152612fc881612b21565b9050919050565b600060c082019050612fe46000830184612b44565b92915050565b6000608082019050612fff6000830184612bbf565b92915050565b6000602082019050818103600083015261301f8184612c14565b905092915050565b600060208201905061303c6000830184612c99565b92915050565b600060e082019050613057600083018a612c99565b61306460208301896127f6565b61307160408301886127f6565b61307e60608301876127f6565b61308b60808301866127f6565b61309860a08301856127f6565b6130a560c08301846127f6565b98975050505050505050565b60006130bb6130cc565b90506130c78282613396565b919050565b6000604051905090565b600067ffffffffffffffff8211156130f1576130f061346d565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061318982613300565b915061319483613300565b92508273ffffffffffffffffffffffffffffffffffffffff038211156131bd576131bc61343e565b5b828201905092915050565b60006131d382613320565b91506131de83613320565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132135761321261343e565b5b828201905092915050565b600061322982613320565b915061323483613320565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561326d5761326c61343e565b5b828202905092915050565b600061328382613320565b915061328e83613320565b9250828210156132a1576132a061343e565b5b828203905092915050565b60006132b782613300565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561335757808201518184015260208101905061333c565b83811115613366576000848401525b50505050565b600061337782613320565b9150600082141561338b5761338a61343e565b5b600182039050919050565b61339f8261349c565b810181811067ffffffffffffffff821117156133be576133bd61346d565b5b80604052505050565b60006133d282613320565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134055761340461343e565b5b600182019050919050565b600061341b82613422565b9050919050565b600061342d826134ad565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4c324d69677261746f722366696e616c697a654d69677261746553656e64657260008201527f3a20414c52454144595f4d494752415445440000000000000000000000000000602082015250565b7f4c324d69677261746f7223636c61696d5374616b653a20434c41494d5f53544160008201527f4b455f44495341424c4544000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4c324d69677261746f722366696e616c697a654d69677261746544656c65676160008201527f746f723a204641494c5f46454500000000000000000000000000000000000000602082015250565b7f4c324d69677261746f722366696e616c697a654d69677261746544656c65676160008201527f746f723a20414c52454144595f4d494752415445440000000000000000000000602082015250565b7f4c324d69677261746f7223636c61696d5374616b653a20494e56414c49445f5060008201527f524f4f4600000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4c324d69677261746f722366696e616c697a654d696772617465556e626f6e6460008201527f696e674c6f636b733a20414c52454144595f4d49475241544544000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4c324d69677261746f7223636c61696d5374616b653a20414c52454144595f4d60008201527f4947524154454400000000000000000000000000000000000000000000000000602082015250565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61380b816132ac565b811461381657600080fd5b50565b613822816132be565b811461382d57600080fd5b50565b613839816132ca565b811461384457600080fd5b50565b613850816132d4565b811461385b57600080fd5b50565b61386781613320565b811461387257600080fd5b5056fea2646970667358221220e60f333821e0f357f438411f26d9ef9f50a8ebba3bb9f7ec668b80dda09a5c4564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimStake(address,uint256,uint256,bytes32[],address)": {
        "details": "Assume that only EOAs are included in the snapshot Regardless of the caller of this function, the EOA from L1 will be able to access its stake on L2",
        "params": {
          "_delegate": "Address that is migrating",
          "_fees": "Fees of delegator on L1",
          "_newDelegate": "Optional address of a new delegate on L2",
          "_proof": "Merkle proof of inclusion in Merkle tree state snapshot",
          "_stake": "Stake of delegator on L1"
        }
      },
      "finalizeMigrateDelegator((address,address,uint256,uint256,uint256,address))": {
        "params": {
          "_params": "L1 state relevant for migration"
        }
      },
      "finalizeMigrateSender((address,address,uint256,uint256))": {
        "params": {
          "_params": "L1 state relevant for migration"
        }
      },
      "finalizeMigrateUnbondingLocks((address,address,uint256,uint256[],address))": {
        "params": {
          "_params": "L1 state relevant for migration"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setClaimStakeEnabled(bool)": {
        "params": {
          "_enabled": "True/false indicating claimStake() enabled/disabled"
        }
      },
      "setDelegatorPoolImpl(address)": {
        "params": {
          "_delegatorPoolImpl": "DelegatorPool implementation contract"
        }
      },
      "setL1Migrator(address)": {
        "params": {
          "_l1Migrator": "L1Migrator address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimStake(address,uint256,uint256,bytes32[],address)": {
        "notice": "Completes delegator migration using a Merkle proof that a delegator's state was included in a state snapshot represented by a Merkle tree root"
      },
      "finalizeMigrateDelegator((address,address,uint256,uint256,uint256,address))": {
        "notice": "Called by L1Migrator to complete transcoder/delegator state migration"
      },
      "finalizeMigrateSender((address,address,uint256,uint256))": {
        "notice": "Called by L1Migrator to complete sender deposit/reserve migration"
      },
      "finalizeMigrateUnbondingLocks((address,address,uint256,uint256[],address))": {
        "notice": "Called by L1Migrator to complete unbonding locks migration"
      },
      "setClaimStakeEnabled(bool)": {
        "notice": "Enable/disable claimStake()"
      },
      "setDelegatorPoolImpl(address)": {
        "notice": "Sets DelegatorPool implementation contract"
      },
      "setL1Migrator(address)": {
        "notice": "Sets L1Migrator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 343,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)338_storage)"
      },
      {
        "astId": 5084,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "l1Migrator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5086,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "delegatorPoolImpl",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5088,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "claimStakeEnabled",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5092,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "migratedDelegators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5096,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "delegatorPools",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5100,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "claimedDelegatedStake",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5106,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "migratedUnbondingLocks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5110,
        "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
        "label": "migratedSenders",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)338_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(RoleData)338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 337,
            "contract": "contracts/L2/gateway/L2Migrator.sol:L2Migrator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}