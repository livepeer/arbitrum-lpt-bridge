{
  "address": "0xD82c27966eBB293b2D8646D8eAcb293BC260698E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1LPTEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Lpt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_sequenceNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l2Counterpart",
          "type": "address"
        }
      ],
      "name": "L2CounterpartUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "MinterUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_exitNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFinalized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "calculateL2TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterpartGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "finalizeInboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getOutboundCalldata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "outboundCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1LPTEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Counterpart",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Lpt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Counterpart",
          "type": "address"
        }
      ],
      "name": "setCounterpart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c13c6f624d428d06f9b3a436899d3f29095105b905036b1f64983d30266e5c3",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0xD82c27966eBB293b2D8646D8eAcb293BC260698E",
    "transactionIndex": 320,
    "gasUsed": "2833260",
    "logsBloom": "0x
    "blockHash": "0xa2d1a0e3c063108f22cef93e0848c1a72548b732744f5cee331996c0b1a1bf7b",
    "transactionHash": "0x6c13c6f624d428d06f9b3a436899d3f29095105b905036b1f64983d30266e5c3",
    "logs": [
      {
        "transactionIndex": 320,
        "blockNumber": 14185770,
        "transactionHash": "0x6c13c6f624d428d06f9b3a436899d3f29095105b905036b1f64983d30266e5c3",
        "address": "0xD82c27966eBB293b2D8646D8eAcb293BC260698E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
          "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5"
        ],
        "data": "0x",
        "logIndex": 487,
        "blockHash": "0xa2d1a0e3c063108f22cef93e0848c1a72548b732744f5cee331996c0b1a1bf7b"
      },
      {
        "transactionIndex": 320,
        "blockNumber": 14185770,
        "transactionHash": "0x6c13c6f624d428d06f9b3a436899d3f29095105b905036b1f64983d30266e5c3",
        "address": "0xD82c27966eBB293b2D8646D8eAcb293BC260698E",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000b5af4138f0f33be0d6414eb25271b9c2dc245fb5",
        "logIndex": 488,
        "blockHash": "0xa2d1a0e3c063108f22cef93e0848c1a72548b732744f5cee331996c0b1a1bf7b"
      }
    ],
    "blockNumber": 14185770,
    "cumulativeGasUsed": "28693804",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
    "0xAc60c5260249cE0a8FbbB5D100688f37a64f06Ea",
    "0x58b6A8A3302369DAEc383334672404Ee733aB239",
    "0x289ba1701C2F088cf0faf8B3705246331cB8A839",
    "0x4c6f947Ae67F572afa4ae0730947DE7C874F95Ef"
  ],
  "solcInputHash": "a582cfe11011008962da6f3d958d9716",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1LPTEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_sequenceNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l2Counterpart\",\"type\":\"address\"}],\"name\":\"L2CounterpartUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1LPTEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Lpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Counterpart\",\"type\":\"address\"}],\"name\":\"setCounterpart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the contract can be paused by the admin which will prevent any outbound transfers but pausing the contract does not affect inbound transfers (tokens coming from L2)\",\"kind\":\"dev\",\"methods\":{\"finalizeInboundTransfer(address,address,address,uint256,bytes)\":{\"details\":\"can only accept txs coming directly from L2 LPT Gateway\",\"params\":{\"amount\":\"Amount of tokens transferred\",\"data\":\"Contains exitNum which is always set to 0\",\"from\":\"Address of the sender\",\"l1Token\":\"L1 Address of LPT\",\"to\":\"Recepient address on L1\"}},\"getOutboundCalldata(address,address,address,uint256,bytes)\":{\"details\":\"encodes the target function with its params which will be called on L2 when the retryable ticket is redeemed\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"outboundTransfer(address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"maxGas and gasPriceBid must be set using arbitrum's Inbox.estimateRetryableTicket method.\",\"params\":{\"_amount\":\"Amount of tokens to tranfer\",\"_data\":\"Encoded maxSubmission cost and sender address along with additional calldata\",\"_gasPriceBid\":\"Price per gas on L2\",\"_l1Token\":\"L1 Address of LPT\",\"_maxGas\":\"Gas limit for L2 execution of the ticket\",\"_to\":\"Recepient address on L2\"},\"returns\":{\"_0\":\"seqNum Sequence number of the retryable ticket created by Inbox\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setCounterpart(address)\":{\"details\":\"Only address with the admin role is allowed to change the value of l2Counterpart\",\"params\":{\"_l2Counterpart\":\"L2 Address of the counterpart\"}},\"setMinter(address)\":{\"details\":\"Only address with the admin role is allowed to change the value of minter\",\"params\":{\"_minter\":\"L1 Address of minter\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"L1LPTGateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateL2TokenAddress(address)\":{\"notice\":\"returns address of L2 version of LPT\"},\"counterpartGateway()\":{\"notice\":\"returns address of L2 LPT Gateway\"},\"finalizeInboundTransfer(address,address,address,uint256,bytes)\":{\"notice\":\"Receives withdrawn token amount from L2 The equivalent tokens are released from the Escrow contract and sent to the destination In case the escrow doesn't have enough balance, new tokens are minted\"},\"getOutboundCalldata(address,address,address,uint256,bytes)\":{\"notice\":\"Creates calldata required to create a retryable ticket\"},\"outboundTransfer(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Creates and sends a retryable ticket to migrate LPT to L2 using arbitrum Inbox. The tokens are sent to the Escrow contract for safekeeping until they are withdrawn The ticket must be redeemed on L2 to receive tokens at the specified address.\"},\"setCounterpart(address)\":{\"notice\":\"Sets address of companion L2LPTGateway\"},\"setMinter(address)\":{\"notice\":\"Sets address of Minter\"}},\"notice\":\"Manages inbound and outbound transfers of LPT between L1 and Arbitrum Rollup\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/gateway/L1LPTGateway.sol\":\"L1LPTGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ControlledGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title ControlledGateway\\n * @notice Base Contract for both L1 and L2 LPT gateways. Provides AccessControl.\\n * Gateways can be paused by the admin to stop outgoing token migrations\\n */\\ncontract ControlledGateway is AccessControl, Pausable {\\n    address public immutable l1Lpt;\\n    address public immutable l2Lpt;\\n\\n    constructor(address _l1Lpt, address _l2Lpt) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        l1Lpt = _l1Lpt;\\n        l2Lpt = _l2Lpt;\\n    }\\n\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xf17a5db4b19585d848d60c6d38c09938275a767f59c1918d9f65a40d97c26841\",\"license\":\"MIT\"},\"contracts/L1/gateway/IL1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IL1LPTGateway {\\n    event DepositInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _sequenceNumber,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalFinalized(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d47adc8ef84079e4bcc5bfd3cf7929794cc5fa443e188119438688ebeeaa57e\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1ArbitrumMessenger.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IBridge} from \\\"../../arbitrum/IBridge.sol\\\";\\nimport {IInbox} from \\\"../../arbitrum/IInbox.sol\\\";\\nimport {IOutbox} from \\\"../../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1ArbitrumMessenger {\\n    IInbox public immutable inbox;\\n\\n    event TxToL2(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed seqNum,\\n        bytes data\\n    );\\n\\n    constructor(address _inbox) {\\n        inbox = IInbox(_inbox);\\n    }\\n\\n    modifier onlyL2Counterpart(address l2Counterpart) {\\n        // a message coming from the counterpart gateway was executed by the bridge\\n        address bridge = inbox.bridge();\\n        require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n        // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n        address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox())\\n            .l2ToL1Sender();\\n        require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address from,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        return\\n            sendTxToL2(\\n                target,\\n                from,\\n                msg.value,\\n                0, // we always assume that l2CallValue = 0\\n                maxSubmissionCost,\\n                maxGas,\\n                gasPriceBid,\\n                data\\n            );\\n    }\\n\\n    function sendTxToL2(\\n        address target,\\n        address from,\\n        uint256 _l1CallValue,\\n        uint256 _l2CallValue,\\n        uint256 maxSubmissionCost,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        uint256 seqNum = inbox.createRetryableTicket{value: _l1CallValue}(\\n            target,\\n            _l2CallValue,\\n            maxSubmissionCost,\\n            from,\\n            from,\\n            maxGas,\\n            gasPriceBid,\\n            data\\n        );\\n        emit TxToL2(from, target, seqNum, data);\\n        return seqNum;\\n    }\\n}\\n\",\"keccak256\":\"0x5992094d676f73b20bb0f7f014f6b9491ceb44f3a7fc16f4ef78deefae37795c\",\"license\":\"MIT\"},\"contracts/L1/gateway/L1LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {ControlledGateway} from \\\"../../ControlledGateway.sol\\\";\\nimport {L1ArbitrumMessenger} from \\\"./L1ArbitrumMessenger.sol\\\";\\nimport {IL1LPTGateway} from \\\"./IL1LPTGateway.sol\\\";\\nimport {IL2LPTGateway} from \\\"../../L2/gateway/IL2LPTGateway.sol\\\";\\n\\ninterface TokenLike {\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IMinter {\\n    function bridgeMint(address _to, uint256 _amount) external;\\n}\\n\\n/**\\n * @title L1LPTGateway\\n * @notice Manages inbound and outbound transfers of LPT between L1 and Arbitrum Rollup\\n * @dev the contract can be paused by the admin which will prevent any outbound transfers\\n * but pausing the contract does not affect inbound transfers (tokens coming from L2)\\n */\\ncontract L1LPTGateway is IL1LPTGateway, ControlledGateway, L1ArbitrumMessenger {\\n    address public immutable l1Router;\\n    address public immutable l1LPTEscrow;\\n    address public l2Counterpart;\\n    address public minter;\\n\\n    event L2CounterpartUpdate(address _l2Counterpart);\\n\\n    event MinterUpdate(address _minter);\\n\\n    constructor(\\n        address _l1Router,\\n        address _l1LPTEscrow,\\n        address _l1Lpt,\\n        address _l2Lpt,\\n        address _inbox\\n    ) ControlledGateway(_l1Lpt, _l2Lpt) L1ArbitrumMessenger(_inbox) {\\n        l1Router = _l1Router;\\n        l1LPTEscrow = _l1LPTEscrow;\\n\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Sets address of companion L2LPTGateway\\n     * @dev Only address with the admin role is allowed to change the value of l2Counterpart\\n     * @param _l2Counterpart L2 Address of the counterpart\\n     */\\n    function setCounterpart(address _l2Counterpart)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        l2Counterpart = _l2Counterpart;\\n        emit L2CounterpartUpdate(_l2Counterpart);\\n    }\\n\\n    /**\\n     * @notice Sets address of Minter\\n     * @dev Only address with the admin role is allowed to change the value of minter\\n     * @param _minter L1 Address of minter\\n     */\\n    function setMinter(address _minter) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        minter = _minter;\\n        emit MinterUpdate(_minter);\\n    }\\n\\n    /**\\n     * @notice Creates and sends a retryable ticket to migrate LPT to L2 using arbitrum Inbox.\\n     * The tokens are sent to the Escrow contract for safekeeping until they are withdrawn\\n     * The ticket must be redeemed on L2 to receive tokens at the specified address.\\n     * @dev maxGas and gasPriceBid must be set using arbitrum's Inbox.estimateRetryableTicket method.\\n     * @param _l1Token L1 Address of LPT\\n     * @param _to Recepient address on L2\\n     * @param _amount Amount of tokens to tranfer\\n     * @param _maxGas Gas limit for L2 execution of the ticket\\n     * @param _gasPriceBid Price per gas on L2\\n     * @param _data Encoded maxSubmission cost and sender address along with additional calldata\\n     * @return seqNum Sequence number of the retryable ticket created by Inbox\\n     */\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable override whenNotPaused returns (bytes memory) {\\n        require(_l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n        require(_amount > 0, \\\"INVALID_ZERO_AMOUNT\\\");\\n\\n        // nested scope to avoid stack too deep errors\\n        address from;\\n        uint256 seqNum;\\n        bytes memory extraData;\\n        {\\n            uint256 maxSubmissionCost;\\n            (from, maxSubmissionCost, extraData) = parseOutboundData(_data);\\n            require(extraData.length == 0, \\\"CALL_HOOK_DATA_NOT_ALLOWED\\\");\\n\\n            // makes sure only sufficient ETH is supplied required for successful redemption on L2\\n            // if a user does not desire immediate redemption they should provide\\n            // a msg.value of AT LEAST maxSubmissionCost\\n            uint256 expectedEth = maxSubmissionCost + (_maxGas * _gasPriceBid);\\n            require(maxSubmissionCost > 0, \\\"NO_SUBMISSION_COST\\\");\\n            require(msg.value == expectedEth, \\\"WRONG_ETH_VALUE\\\");\\n\\n            // transfer tokens to escrow\\n            TokenLike(_l1Token).transferFrom(from, l1LPTEscrow, _amount);\\n\\n            bytes memory outboundCalldata = getOutboundCalldata(\\n                _l1Token,\\n                from,\\n                _to,\\n                _amount,\\n                extraData\\n            );\\n\\n            seqNum = sendTxToL2(\\n                l2Counterpart,\\n                from,\\n                maxSubmissionCost,\\n                _maxGas,\\n                _gasPriceBid,\\n                outboundCalldata\\n            );\\n        }\\n\\n        emit DepositInitiated(_l1Token, from, _to, seqNum, _amount);\\n\\n        return abi.encode(seqNum);\\n    }\\n\\n    /**\\n     * @notice Receives withdrawn token amount from L2\\n     * The equivalent tokens are released from the Escrow contract and sent to the destination\\n     * In case the escrow doesn't have enough balance, new tokens are minted\\n     * @dev can only accept txs coming directly from L2 LPT Gateway\\n     * @param l1Token L1 Address of LPT\\n     * @param from Address of the sender\\n     * @param to Recepient address on L1\\n     * @param amount Amount of tokens transferred\\n     * @param data Contains exitNum which is always set to 0\\n     */\\n    function finalizeInboundTransfer(\\n        address l1Token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyL2Counterpart(l2Counterpart) {\\n        require(l1Token == l1Lpt, \\\"TOKEN_NOT_LPT\\\");\\n        (uint256 exitNum, ) = abi.decode(data, (uint256, bytes));\\n\\n        uint256 escrowBalance = TokenLike(l1Token).balanceOf(l1LPTEscrow);\\n\\n        // mint additional tokens if requested amount exceeds escrowed amount\\n        if (amount <= escrowBalance) {\\n            TokenLike(l1Token).transferFrom(l1LPTEscrow, to, amount);\\n        } else {\\n            if (escrowBalance > 0) {\\n                TokenLike(l1Token).transferFrom(l1LPTEscrow, to, escrowBalance);\\n            }\\n            IMinter(minter).bridgeMint(to, amount - escrowBalance);\\n        }\\n\\n        emit WithdrawalFinalized(l1Token, from, to, exitNum, amount);\\n    }\\n\\n    /**\\n     * @notice decodes calldata required for migration of tokens\\n     * @dev data must include maxSubmissionCost, extraData can be left empty\\n     * @param data encoded callhook data\\n     * @return from sender of the tx\\n     * @return maxSubmissionCost base ether value required to keep retyrable ticket alive\\n     * @return extraData any other data sent to L2\\n     */\\n    function parseOutboundData(bytes memory data)\\n        private\\n        view\\n        returns (\\n            address from,\\n            uint256 maxSubmissionCost,\\n            bytes memory extraData\\n        )\\n    {\\n        if (msg.sender == l1Router) {\\n            // router encoded\\n            (from, extraData) = abi.decode(data, (address, bytes));\\n        } else {\\n            from = msg.sender;\\n            extraData = data;\\n        }\\n        // user encoded\\n        (maxSubmissionCost, extraData) = abi.decode(\\n            extraData,\\n            (uint256, bytes)\\n        );\\n    }\\n\\n    /**\\n     * @notice returns address of L2 LPT Gateway\\n     */\\n    function counterpartGateway() external view override returns (address) {\\n        return l2Counterpart;\\n    }\\n\\n    /**\\n     * @notice returns address of L2 version of LPT\\n     */\\n    function calculateL2TokenAddress(address l1Token)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (l1Token != l1Lpt) {\\n            return address(0);\\n        }\\n\\n        return l2Lpt;\\n    }\\n\\n    /**\\n     * @notice Creates calldata required to create a retryable ticket\\n     * @dev encodes the target function with its params which\\n     * will be called on L2 when the retryable ticket is redeemed\\n     */\\n    function getOutboundCalldata(\\n        address l1Token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data\\n    ) public pure returns (bytes memory outboundCalldata) {\\n        bytes memory emptyBytes;\\n\\n        outboundCalldata = abi.encodeWithSelector(\\n            IL2LPTGateway.finalizeInboundTransfer.selector,\\n            l1Token,\\n            from,\\n            to,\\n            amount,\\n            abi.encode(emptyBytes, data)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3f3538b2b8cd8e688d0144436b63bf5104b4ced235d61a1c1d4b11b608badcd1\",\"license\":\"MIT\"},\"contracts/L2/gateway/IL2LPTGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IL2LPTGateway {\\n    event DepositFinalized(\\n        address indexed _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n    event WithdrawalInitiated(\\n        address _l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _l2ToL1Id,\\n        uint256 _exitNum,\\n        uint256 _amount\\n    );\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    // if token is not supported this should return 0x0 address\\n    function calculateL2TokenAddress(address _l1Token)\\n        external\\n        view\\n        returns (address);\\n\\n    // used by router\\n    function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x536e2e1380bedaf69662181b2f20c22e975eb19b284f08c319edb2e80900629d\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.9;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e72972d4c0f6d4832d5cb338faab1a016d5eee9c9461631334a873bffdc96dd\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0xfb28f598c86519a5a414fe4523b3fd17d608e88e02ead26599af32f8605f3583\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.9;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0xc1a98f8599fdb5fd7b29abf5c00d48d3e35e5f649cbd81b4f4a940f2e587d9b0\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.9;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths\\n    ) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa3f81acfc7f912053a527abd61058a646fcd1d2ebc8b34cc64a0bd40a5860151\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c806377061e4d116100b6578063a217fddf1161006f578063a217fddf1461046e578063a7e28d4814610499578063d2ce7d65146104d6578063d547741f14610506578063fb0e722b1461052f578063fca3b5aa1461055a5761014b565b806377061e4d1461035e5780638456cb59146103875780638e7c8efe1461039e57806391d14854146103c95780639d79bdb514610406578063a0c76a96146104315761014b565b80632f2ff15d116101085780632f2ff15d1461027457806336568abe1461029d5780633f4ba83a146102c6578063407395e0146102dd5780635c975abb1461030857806362dcefbb146103335761014b565b806301ffc9a714610150578063072566771461018d57806307546172146101b8578063248a9ca3146101e35780632db09c1c146102205780632e567b361461024b575b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190611e47565b610583565b6040516101849190611e8f565b60405180910390f35b34801561019957600080fd5b506101a26105fd565b6040516101af9190611eeb565b60405180910390f35b3480156101c457600080fd5b506101cd610621565b6040516101da9190611eeb565b60405180910390f35b3480156101ef57600080fd5b5061020a60048036038101906102059190611f3c565b610647565b6040516102179190611f78565b60405180910390f35b34801561022c57600080fd5b50610235610666565b6040516102429190611eeb565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d919061205a565b61068e565b005b34801561028057600080fd5b5061029b600480360381019061029691906120f4565b610d01565b005b3480156102a957600080fd5b506102c460048036038101906102bf91906120f4565b610d2a565b005b3480156102d257600080fd5b506102db610dad565b005b3480156102e957600080fd5b506102f2610dcd565b6040516102ff9190611eeb565b60405180910390f35b34801561031457600080fd5b5061031d610df1565b60405161032a9190611e8f565b60405180910390f35b34801561033f57600080fd5b50610348610e08565b6040516103559190611eeb565b60405180910390f35b34801561036a57600080fd5b5061038560048036038101906103809190612134565b610e2c565b005b34801561039357600080fd5b5061039c610ebc565b005b3480156103aa57600080fd5b506103b3610edc565b6040516103c09190611eeb565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb91906120f4565b610f00565b6040516103fd9190611e8f565b60405180910390f35b34801561041257600080fd5b5061041b610f6a565b6040516104289190611eeb565b60405180910390f35b34801561043d57600080fd5b50610458600480360381019061045391906122a2565b610f8e565b60405161046591906123c1565b60405180910390f35b34801561047a57600080fd5b5061048361103c565b6040516104909190611f78565b60405180910390f35b3480156104a557600080fd5b506104c060048036038101906104bb9190612134565b611043565b6040516104cd9190611eeb565b60405180910390f35b6104f060048036038101906104eb91906123e3565b6110ca565b6040516104fd91906123c1565b60405180910390f35b34801561051257600080fd5b5061052d600480360381019061052891906120f4565b6114b5565b005b34801561053b57600080fd5b506105446114de565b60405161055191906124f1565b60405180910390f35b34801561056657600080fd5b50610581600480360381019061057c9190612134565b611502565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f657506105f582611593565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190612521565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b6906125ab565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190612521565b73ffffffffffffffffffffffffffffffffffffffff166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561088457600080fd5b505afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc9190612521565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461092c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092390612617565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190612683565b60405180910390fd5b600085858101906109cb91906126a3565b50905060008a73ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a299190611eeb565b60206040518083038186803b158015610a4157600080fd5b505afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190612714565b9050808811610b37578a73ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000008b8b6040518463ffffffff1660e01b8152600401610adf93929190612750565b602060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3191906127b3565b50610c8c565b6000811115610bf1578a73ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000008b846040518463ffffffff1660e01b8152600401610b9d93929190612750565b602060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef91906127b3565b505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c2a993e8a838b610c3c919061280f565b6040518363ffffffff1660e01b8152600401610c59929190612843565b600060405180830381600087803b158015610c7357600080fd5b505af1158015610c87573d6000803e3d6000fd5b505050505b818973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b38e8c604051610cec929190612843565b60405180910390a45050505050505050505050565b610d0a82610647565b610d1b81610d166115fd565b611605565b610d2583836116a2565b505050565b610d326115fd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d96906128de565b60405180910390fd5b610da98282611782565b5050565b6000801b610dc281610dbd6115fd565b611605565b610dca611863565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000801b610e4181610e3c6115fd565b611605565b816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5e7a493863411309f190ab78ded345429e56b2df9a2b48530f31243fa31e992882604051610eb09190611eeb565b60405180910390a15050565b6000801b610ed181610ecc6115fd565b611605565b610ed9611905565b50565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606080632e567b3660e01b878787878588604051602001610fb09291906128fe565b604051602081830303815290604052604051602401610fd3959493929190612935565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091505095945050505050565b6000801b81565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146110a157600090506110c5565b7f000000000000000000000000000000000000000000000000000000000000000090505b919050565b60606110d4610df1565b15611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b906129db565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119990612683565b60405180910390fd5b600086116111e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dc90612a47565b60405180910390fd5b6000806060600061123987878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506119a7565b8094508193508296505050506000825114611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612ab3565b60405180910390fd5b6000888a6112979190612ad3565b826112a29190612b2d565b9050600082116112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de90612bcf565b60405180910390fd5b803414611329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132090612c3b565b60405180910390fd5b8c73ffffffffffffffffffffffffffffffffffffffff166323b872dd867f00000000000000000000000000000000000000000000000000000000000000008e6040518463ffffffff1660e01b815260040161138693929190612750565b602060405180830381600087803b1580156113a057600080fd5b505af11580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d891906127b3565b5060006113e88e878f8f88610f8e565b905061141860018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687858e8e86611a4b565b9450505050818a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e18e8d60405161147d929190612843565b60405180910390a4816040516020016114969190612c5b565b6040516020818303038152906040529350505050979650505050505050565b6114be82610647565b6114cf816114ca6115fd565b611605565b6114d98383611782565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000801b611517816115126115fd565b611605565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe4445650be24dc57d85324bde2bc79571389abac71a7126fb392df5aa012600f826040516115879190611eeb565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61160f8282610f00565b61169e576116348173ffffffffffffffffffffffffffffffffffffffff166014611a6a565b6116428360001c6020611a6a565b604051602001611653929190612d55565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116959190612dc8565b60405180910390fd5b5050565b6116ac8282610f00565b61177e57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117236115fd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61178c8282610f00565b1561185f57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506118046115fd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61186b610df1565b6118aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a190612e36565b60405180910390fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6118ee6115fd565b6040516118fb9190611eeb565b60405180910390a1565b61190d610df1565b1561194d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611944906129db565b60405180910390fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119906115fd565b60405161199d9190611eeb565b60405180910390a1565b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611a215783806020019051810190611a149190612f04565b8092508194505050611a28565b3392508390505b80806020019051810190611a3c9190612f60565b80925081935050509193909250565b6000611a5e878734600089898989611ca6565b90509695505050505050565b606060006002836002611a7d9190612ad3565b611a879190612b2d565b67ffffffffffffffff811115611aa057611a9f612177565b5b6040519080825280601f01601f191660200182016040528015611ad25781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b0a57611b09612fbc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b6e57611b6d612fbc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611bae9190612ad3565b611bb89190612b2d565b90505b6001811115611c58577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611bfa57611bf9612fbc565b5b1a60f81b828281518110611c1157611c10612fbc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611c5190612feb565b9050611bbb565b5060008414611c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9390613061565b60405180910390fd5b8091505092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679b6ded898c8a8a8e8f8c8c8c6040518a63ffffffff1660e01b8152600401611d11989796959493929190613081565b6020604051808303818588803b158015611d2a57600080fd5b505af1158015611d3e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611d639190612714565b9050808a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b086604051611dc391906123c1565b60405180910390a48091505098975050505050505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e2481611def565b8114611e2f57600080fd5b50565b600081359050611e4181611e1b565b92915050565b600060208284031215611e5d57611e5c611de5565b5b6000611e6b84828501611e32565b91505092915050565b60008115159050919050565b611e8981611e74565b82525050565b6000602082019050611ea46000830184611e80565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ed582611eaa565b9050919050565b611ee581611eca565b82525050565b6000602082019050611f006000830184611edc565b92915050565b6000819050919050565b611f1981611f06565b8114611f2457600080fd5b50565b600081359050611f3681611f10565b92915050565b600060208284031215611f5257611f51611de5565b5b6000611f6084828501611f27565b91505092915050565b611f7281611f06565b82525050565b6000602082019050611f8d6000830184611f69565b92915050565b611f9c81611eca565b8114611fa757600080fd5b50565b600081359050611fb981611f93565b92915050565b6000819050919050565b611fd281611fbf565b8114611fdd57600080fd5b50565b600081359050611fef81611fc9565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261201a57612019611ff5565b5b8235905067ffffffffffffffff81111561203757612036611ffa565b5b60208301915083600182028301111561205357612052611fff565b5b9250929050565b60008060008060008060a0878903121561207757612076611de5565b5b600061208589828a01611faa565b965050602061209689828a01611faa565b95505060406120a789828a01611faa565b94505060606120b889828a01611fe0565b935050608087013567ffffffffffffffff8111156120d9576120d8611dea565b5b6120e589828a01612004565b92509250509295509295509295565b6000806040838503121561210b5761210a611de5565b5b600061211985828601611f27565b925050602061212a85828601611faa565b9150509250929050565b60006020828403121561214a57612149611de5565b5b600061215884828501611faa565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121af82612166565b810181811067ffffffffffffffff821117156121ce576121cd612177565b5b80604052505050565b60006121e1611ddb565b90506121ed82826121a6565b919050565b600067ffffffffffffffff82111561220d5761220c612177565b5b61221682612166565b9050602081019050919050565b82818337600083830152505050565b6000612245612240846121f2565b6121d7565b90508281526020810184848401111561226157612260612161565b5b61226c848285612223565b509392505050565b600082601f83011261228957612288611ff5565b5b8135612299848260208601612232565b91505092915050565b600080600080600060a086880312156122be576122bd611de5565b5b60006122cc88828901611faa565b95505060206122dd88828901611faa565b94505060406122ee88828901611faa565b93505060606122ff88828901611fe0565b925050608086013567ffffffffffffffff8111156123205761231f611dea565b5b61232c88828901612274565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015612373578082015181840152602081019050612358565b83811115612382576000848401525b50505050565b600061239382612339565b61239d8185612344565b93506123ad818560208601612355565b6123b681612166565b840191505092915050565b600060208201905081810360008301526123db8184612388565b905092915050565b600080600080600080600060c0888a03121561240257612401611de5565b5b60006124108a828b01611faa565b97505060206124218a828b01611faa565b96505060406124328a828b01611fe0565b95505060606124438a828b01611fe0565b94505060806124548a828b01611fe0565b93505060a088013567ffffffffffffffff81111561247557612474611dea565b5b6124818a828b01612004565b925092505092959891949750929550565b6000819050919050565b60006124b76124b26124ad84611eaa565b612492565b611eaa565b9050919050565b60006124c98261249c565b9050919050565b60006124db826124be565b9050919050565b6124eb816124d0565b82525050565b600060208201905061250660008301846124e2565b92915050565b60008151905061251b81611f93565b92915050565b60006020828403121561253757612536611de5565b5b60006125458482850161250c565b91505092915050565b600082825260208201905092915050565b7f4e4f545f46524f4d5f4252494447450000000000000000000000000000000000600082015250565b6000612595600f8361254e565b91506125a08261255f565b602082019050919050565b600060208201905081810360008301526125c481612588565b9050919050565b7f4f4e4c595f434f554e544552504152545f474154455741590000000000000000600082015250565b600061260160188361254e565b915061260c826125cb565b602082019050919050565b60006020820190508181036000830152612630816125f4565b9050919050565b7f544f4b454e5f4e4f545f4c505400000000000000000000000000000000000000600082015250565b600061266d600d8361254e565b915061267882612637565b602082019050919050565b6000602082019050818103600083015261269c81612660565b9050919050565b600080604083850312156126ba576126b9611de5565b5b60006126c885828601611fe0565b925050602083013567ffffffffffffffff8111156126e9576126e8611dea565b5b6126f585828601612274565b9150509250929050565b60008151905061270e81611fc9565b92915050565b60006020828403121561272a57612729611de5565b5b6000612738848285016126ff565b91505092915050565b61274a81611fbf565b82525050565b60006060820190506127656000830186611edc565b6127726020830185611edc565b61277f6040830184612741565b949350505050565b61279081611e74565b811461279b57600080fd5b50565b6000815190506127ad81612787565b92915050565b6000602082840312156127c9576127c8611de5565b5b60006127d78482850161279e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281a82611fbf565b915061282583611fbf565b925082821015612838576128376127e0565b5b828203905092915050565b60006040820190506128586000830185611edc565b6128656020830184612741565b9392505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006128c8602f8361254e565b91506128d38261286c565b604082019050919050565b600060208201905081810360008301526128f7816128bb565b9050919050565b600060408201905081810360008301526129188185612388565b9050818103602083015261292c8184612388565b90509392505050565b600060a08201905061294a6000830188611edc565b6129576020830187611edc565b6129646040830186611edc565b6129716060830185612741565b81810360808301526129838184612388565b90509695505050505050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006129c560108361254e565b91506129d08261298f565b602082019050919050565b600060208201905081810360008301526129f4816129b8565b9050919050565b7f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000600082015250565b6000612a3160138361254e565b9150612a3c826129fb565b602082019050919050565b60006020820190508181036000830152612a6081612a24565b9050919050565b7f43414c4c5f484f4f4b5f444154415f4e4f545f414c4c4f574544000000000000600082015250565b6000612a9d601a8361254e565b9150612aa882612a67565b602082019050919050565b60006020820190508181036000830152612acc81612a90565b9050919050565b6000612ade82611fbf565b9150612ae983611fbf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b2257612b216127e0565b5b828202905092915050565b6000612b3882611fbf565b9150612b4383611fbf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b7857612b776127e0565b5b828201905092915050565b7f4e4f5f5355424d495353494f4e5f434f53540000000000000000000000000000600082015250565b6000612bb960128361254e565b9150612bc482612b83565b602082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b7f57524f4e475f4554485f56414c55450000000000000000000000000000000000600082015250565b6000612c25600f8361254e565b9150612c3082612bef565b602082019050919050565b60006020820190508181036000830152612c5481612c18565b9050919050565b6000602082019050612c706000830184612741565b92915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612cb7601783612c76565b9150612cc282612c81565b601782019050919050565b600081519050919050565b6000612ce382612ccd565b612ced8185612c76565b9350612cfd818560208601612355565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612d3f601183612c76565b9150612d4a82612d09565b601182019050919050565b6000612d6082612caa565b9150612d6c8285612cd8565b9150612d7782612d32565b9150612d838284612cd8565b91508190509392505050565b6000612d9a82612ccd565b612da4818561254e565b9350612db4818560208601612355565b612dbd81612166565b840191505092915050565b60006020820190508181036000830152612de28184612d8f565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612e2060148361254e565b9150612e2b82612dea565b602082019050919050565b60006020820190508181036000830152612e4f81612e13565b9050919050565b6000612e6182611eaa565b9050919050565b612e7181612e56565b8114612e7c57600080fd5b50565b600081519050612e8e81612e68565b92915050565b6000612ea7612ea2846121f2565b6121d7565b905082815260208101848484011115612ec357612ec2612161565b5b612ece848285612355565b509392505050565b600082601f830112612eeb57612eea611ff5565b5b8151612efb848260208601612e94565b91505092915050565b60008060408385031215612f1b57612f1a611de5565b5b6000612f2985828601612e7f565b925050602083015167ffffffffffffffff811115612f4a57612f49611dea565b5b612f5685828601612ed6565b9150509250929050565b60008060408385031215612f7757612f76611de5565b5b6000612f85858286016126ff565b925050602083015167ffffffffffffffff811115612fa657612fa5611dea565b5b612fb285828601612ed6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612ff682611fbf565b9150600082141561300a576130096127e0565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061304b60208361254e565b915061305682613015565b602082019050919050565b6000602082019050818103600083015261307a8161303e565b9050919050565b600061010082019050613097600083018b611edc565b6130a4602083018a612741565b6130b16040830189612741565b6130be6060830188611edc565b6130cb6080830187611edc565b6130d860a0830186612741565b6130e560c0830185612741565b81810360e08301526130f78184612388565b9050999850505050505050505056fea2646970667358221220d2b38db1047051666bcc5f05516f4dc8dfdcd78f97d00ff14822cb38b898980164736f6c63430008090033",
  "devdoc": {
    "details": "the contract can be paused by the admin which will prevent any outbound transfers but pausing the contract does not affect inbound transfers (tokens coming from L2)",
    "kind": "dev",
    "methods": {
      "finalizeInboundTransfer(address,address,address,uint256,bytes)": {
        "details": "can only accept txs coming directly from L2 LPT Gateway",
        "params": {
          "amount": "Amount of tokens transferred",
          "data": "Contains exitNum which is always set to 0",
          "from": "Address of the sender",
          "l1Token": "L1 Address of LPT",
          "to": "Recepient address on L1"
        }
      },
      "getOutboundCalldata(address,address,address,uint256,bytes)": {
        "details": "encodes the target function with its params which will be called on L2 when the retryable ticket is redeemed"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "outboundTransfer(address,address,uint256,uint256,uint256,bytes)": {
        "details": "maxGas and gasPriceBid must be set using arbitrum's Inbox.estimateRetryableTicket method.",
        "params": {
          "_amount": "Amount of tokens to tranfer",
          "_data": "Encoded maxSubmission cost and sender address along with additional calldata",
          "_gasPriceBid": "Price per gas on L2",
          "_l1Token": "L1 Address of LPT",
          "_maxGas": "Gas limit for L2 execution of the ticket",
          "_to": "Recepient address on L2"
        },
        "returns": {
          "_0": "seqNum Sequence number of the retryable ticket created by Inbox"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setCounterpart(address)": {
        "details": "Only address with the admin role is allowed to change the value of l2Counterpart",
        "params": {
          "_l2Counterpart": "L2 Address of the counterpart"
        }
      },
      "setMinter(address)": {
        "details": "Only address with the admin role is allowed to change the value of minter",
        "params": {
          "_minter": "L1 Address of minter"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "L1LPTGateway",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateL2TokenAddress(address)": {
        "notice": "returns address of L2 version of LPT"
      },
      "counterpartGateway()": {
        "notice": "returns address of L2 LPT Gateway"
      },
      "finalizeInboundTransfer(address,address,address,uint256,bytes)": {
        "notice": "Receives withdrawn token amount from L2 The equivalent tokens are released from the Escrow contract and sent to the destination In case the escrow doesn't have enough balance, new tokens are minted"
      },
      "getOutboundCalldata(address,address,address,uint256,bytes)": {
        "notice": "Creates calldata required to create a retryable ticket"
      },
      "outboundTransfer(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "Creates and sends a retryable ticket to migrate LPT to L2 using arbitrum Inbox. The tokens are sent to the Escrow contract for safekeeping until they are withdrawn The ticket must be redeemed on L2 to receive tokens at the specified address."
      },
      "setCounterpart(address)": {
        "notice": "Sets address of companion L2LPTGateway"
      },
      "setMinter(address)": {
        "notice": "Sets address of Minter"
      }
    },
    "notice": "Manages inbound and outbound transfers of LPT between L1 and Arbitrum Rollup",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 343,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)338_storage)"
      },
      {
        "astId": 903,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3271,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "l2Counterpart",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3273,
        "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
        "label": "minter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)338_storage"
      },
      "t_struct(RoleData)338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 337,
            "contract": "contracts/L1/gateway/L1LPTGateway.sol:L1LPTGateway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}